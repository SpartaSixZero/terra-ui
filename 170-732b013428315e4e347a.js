(window.webpackJsonp=window.webpackJsonp||[]).push([[170,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{1101:function(e){e.exports=JSON.parse('{"_from":"terra-table@^3.0.0","_id":"terra-table@3.21.0","_inBundle":false,"_integrity":"sha512-0iUfqeothMyYpBA7FnBTn4Y4CGprW/loJ7CKPRINC5e43bP5oN/s8TDY7YVuB0+My2L2sYXIfz9UVLgzxrfqSw==","_location":"/terra-table","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-table@^3.0.0","name":"terra-table","escapedName":"terra-table","rawSpec":"^3.0.0","saveSpec":null,"fetchSpec":"^3.0.0"},"_requiredBy":["/","/terra-clinical-item-collection"],"_resolved":"https://registry.npmjs.org/terra-table/-/terra-table-3.21.0.tgz","_shasum":"9fcee4877660f50faa9bfcab7f1c6f32950f9530","_spec":"terra-table@^3.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-core/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","keycode-js":"^1.0.4","prop-types":"^15.5.8","terra-doc-template":"^2.15.0","terra-icon":"^3.16.0"},"deprecated":false,"description":"The terra-table component provides user a way to render data in a tabular format","gitHead":"0b893dc4a80250c0b485a5f205f2defde7c38ecf","homepage":"https://github.com/cerner/terra-core#readme","keywords":["Cerner","Terra","terra-table","Table","UI"],"license":"Apache-2.0","main":"lib/Table.js","name":"terra-table","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-core.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"3.21.0"}')},1387:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=o(n(917));function o(e){return e&&e.__esModule?e:{default:e}}var s=function(){return l.default.createElement(a.default,{isStriped:!1},l.default.createElement(a.default.Header,null,l.default.createElement(a.default.HeaderCell,{content:"Name",key:"NAME",minWidth:"small"}),l.default.createElement(a.default.HeaderCell,{content:"Address",key:"ADDRESS",minWidth:"medium"}),l.default.createElement(a.default.HeaderCell,{content:"Phone Number",key:"PHONE_NUMBER",minWidth:"large"})),l.default.createElement(a.default.SingleSelectableRows,null,l.default.createElement(a.default.Row,{isSelected:!0,key:"PERSON_0"},l.default.createElement(a.default.Cell,{content:"John Smith",key:"NAME"}),l.default.createElement(a.default.Cell,{content:"123 Adams Drive",key:"ADDRESS"}),l.default.createElement(a.default.Cell,{content:"111-222-3333",key:"PHONE_NUMBER"})),l.default.createElement(a.default.Row,{key:"PERSON_1"},l.default.createElement(a.default.Cell,{content:"Jane Smith",key:"NAME"}),l.default.createElement(a.default.Cell,{content:"321 Drive Street",key:"ADDRESS"}),l.default.createElement(a.default.Cell,{content:"111-222-3333",key:"PHONE_NUMBER"})),l.default.createElement(a.default.Row,{key:"PERSON_2"},l.default.createElement(a.default.Cell,{content:"Dave Smith",key:"NAME"}),l.default.createElement(a.default.Cell,{content:"213 Raymond Road",key:"ADDRESS"}),l.default.createElement(a.default.Cell,{content:"111-222-3333",key:"PHONE_NUMBER"}))))};t.default=s},1388:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport Table from \'terra-table/lib/Table\';\n\nconst SingleRowSelectableTable = () => (\n  <Table isStriped={false}>\n    <Table.Header>\n      <Table.HeaderCell content="Name" key="NAME" minWidth="small" />\n      <Table.HeaderCell content="Address" key="ADDRESS" minWidth="medium" />\n      <Table.HeaderCell content="Phone Number" key="PHONE_NUMBER" minWidth="large" />\n    </Table.Header>\n    <Table.SingleSelectableRows>\n      <Table.Row isSelected key="PERSON_0">\n        <Table.Cell content="John Smith" key="NAME" />\n        <Table.Cell content="123 Adams Drive" key="ADDRESS" />\n        <Table.Cell content="111-222-3333" key="PHONE_NUMBER" />\n      </Table.Row>\n      <Table.Row key="PERSON_1">\n        <Table.Cell content="Jane Smith" key="NAME" />\n        <Table.Cell content="321 Drive Street" key="ADDRESS" />\n        <Table.Cell content="111-222-3333" key="PHONE_NUMBER" />\n      </Table.Row>\n      <Table.Row key="PERSON_2">\n        <Table.Cell content="Dave Smith" key="NAME" />\n        <Table.Cell content="213 Raymond Road" key="ADDRESS" />\n        <Table.Cell content="111-222-3333" key="PHONE_NUMBER" />\n      </Table.Row>\n    </Table.SingleSelectableRows>\n  </Table>\n);\n\nexport default SingleRowSelectableTable;\n'},3393:function(e,t,n){"use strict";n.r(t),t.default="# Selectable (Managed) Tables\n\nIn certain scenarios, consumers may wish to use a selectable table, but would like to implement their own selection state management. In these cases, the recommended pattern is to implement the `SelectableTableRows` subcomponent, which provides the basic framework needed to implement selectable table rows, and then utilize the `SelectableTableRows.Utils` utility functions to manage the state. The `SelectableTableRows.Utils` property gives access to various selection management utility functions as well as table navigation KeyCodes. Use this component in place of the TableRows component.\n\n## Managed Single Select Table Rows\n\n```jsx\nimport Table from 'terra-table';\n\nclass CustomSingleSelectTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.state = { selectedIndex: Table.SelectableTableRows.Utils.initialSingleSelectRowIndex(this.props.children) };\n  }\n\n  handleOnChange(event, index) {\n    if (Table.SelectableList.Utils.shouldHandleSingleSelectRowSelection(this.state.selectedIndex, index)) {\n      event.preventDefault();\n      this.setState({ selectedIndex: index });\n\n      // Custom Selection Logic Here\n    }\n  }\n\n  someFunction() {\n    // Set state with custom function, update or deselect, etc\n    this.setState({ selectedIndex: someIndex });\n  }\n\n  render() {\n    const { children, onChange } = this.props;\n    return (\n      <Table.SelectableTableRows\n        onChange={this.handleOnChange}\n        selectedIndexes={[this.state.selectedIndex]}\n      >\n        {children}\n      </Table.SelectableTableRows>\n    );\n  }\n}\n\n```\n"},3394:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyCode from 'keycode-js';\nimport TableRows from './TableRows';\nimport TableRow from './TableRow';\nimport TableHeader from './TableHeader';\nimport TableSubheader from './TableSubheader';\nimport SelectableUtils from './SelectableUtils';\n\nconst propTypes = {\n  /**\n   * The children rows to be be passed to the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Indicates if the unselected rows are disabled. This is helpful for enabling max row selection.\n   */\n  disableUnselectedRows: PropTypes.bool,\n  /**\n   * A callback function to execute when the selection state changes. The first parameter is the event. The second parameter is the selectedIndexes.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The list of selected row indexes.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  selectedIndexes: PropTypes.array,\n};\n\nconst defaultProps = {\n  disableUnselectedRows: false,\n  onChange: undefined,\n  selectedIndexes: [],\n};\n\nclass SelectableTableRows extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  handleOnChange(event, index) {\n    if (this.props.onChange) {\n      this.props.onChange(event, index);\n    }\n  }\n\n  wrappedOnClickForRow(row, index) {\n    const initialOnClick = row.props.onClick;\n\n    return (event) => {\n      // The default isSelectable attribute is either undefined or true, unless the consumer specifies the row's isSelectable attribute as false.\n      if (row.props.isSelectable !== false) {\n        this.handleOnChange(event, index);\n      }\n\n      if (initialOnClick) {\n        initialOnClick(event);\n      }\n    };\n  }\n\n  wrappedOnKeyDownForRow(row, index) {\n    const initialOnKeyDown = row.props.onKeyDown;\n\n    return (event) => {\n      if (event.nativeEvent.keyCode === KeyCode.KEY_RETURN || event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {\n        // The default isSelectable attribute is either undefined or true, unless the consumer specifies the row's isSelectable attribute as false.\n        if (row.props.isSelectable !== false) {\n          this.handleOnChange(event, index);\n        }\n      }\n\n      if (initialOnKeyDown) {\n        initialOnKeyDown(event);\n      }\n    };\n  }\n\n  newPropsForRow(row, index, onClick, onKeyDown) {\n    const isSelected = this.props.selectedIndexes.indexOf(index) >= 0;\n    const newProps = { };\n\n    // Set the isSelected attribute to false for all the rows except the rows whose index is set to state selectedIndex.\n    if (isSelected !== row.props.isSelected) {\n      newProps.isSelected = isSelected;\n    }\n\n    // Set the default isSelectable attribute to true, unless the consumer specifies the row isSelectable as false.\n    newProps.isSelectable = true;\n    if (row.props.isSelectable === false) {\n      newProps.isSelectable = row.props.isSelectable;\n    }\n\n    if (this.props.disableUnselectedRows && !isSelected) {\n      newProps.isSelectable = false;\n    }\n\n    // If selectable, add tabIndex on rows to navigate through keyboard tab key for selectable row and add\n    // onClick and onKeyDown functions.\n    if (newProps.isSelectable) {\n      newProps.tabIndex = '0';\n      newProps.onClick = onClick;\n      newProps.onKeyDown = onKeyDown;\n    }\n\n    return newProps;\n  }\n\n  clonedChildItems(rows) {\n    return React.Children.map(rows, (row, index) => {\n      if (row.type !== TableHeader && row.type !== TableSubheader) {\n        const wrappedOnClick = this.wrappedOnClickForRow(row, index);\n        const wrappedOnKeyDown = this.wrappedOnKeyDownForRow(row, index);\n        const newProps = this.newPropsForRow(row, index, wrappedOnClick, wrappedOnKeyDown);\n        return React.cloneElement(row, newProps);\n      }\n      return row;\n    });\n  }\n\n  render() {\n    const {\n      children, disableUnselectedRows, onChange, selectedIndexes, ...customProps\n    } = this.props;\n    const clonedChildItems = this.clonedChildItems(children);\n\n    return (\n      <TableRows {...customProps}>\n        {clonedChildItems}\n      </TableRows>\n    );\n  }\n}\n\nSelectableTableRows.propTypes = propTypes;\nSelectableTableRows.defaultProps = defaultProps;\nSelectableTableRows.Row = TableRow;\nSelectableTableRows.Utils = SelectableUtils;\n\nexport default SelectableTableRows;\n"},3395:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=o(n(917));function o(e){return e&&e.__esModule?e:{default:e}}var s=function(){alert("Attempted to change selected indexes.")},r=function(){return l.default.createElement(a.default,{isStriped:!1},l.default.createElement(a.default.Header,null,l.default.createElement(a.default.HeaderCell,{content:"Name",key:"NAME",minWidth:"small"}),l.default.createElement(a.default.HeaderCell,{content:"Address",key:"ADDRESS",minWidth:"medium"}),l.default.createElement(a.default.HeaderCell,{content:"Phone Number",key:"PHONE_NUMBER",minWidth:"large"})),l.default.createElement(a.default.SelectableTableRows,{selectedIndexes:[1],disableUnselectedRows:!0,onChange:s},l.default.createElement(a.default.Row,{key:"PERSON_0"},l.default.createElement(a.default.Cell,{content:"John Smith",key:"NAME"}),l.default.createElement(a.default.Cell,{content:"123 Adams Drive",key:"ADDRESS"}),l.default.createElement(a.default.Cell,{content:"111-222-3333",key:"PHONE_NUMBER"})),l.default.createElement(a.default.Row,{key:"PERSON_1"},l.default.createElement(a.default.Cell,{content:"Jane Smith",key:"NAME"}),l.default.createElement(a.default.Cell,{content:"321 Drive Street",key:"ADDRESS"}),l.default.createElement(a.default.Cell,{content:"111-222-3333",key:"PHONE_NUMBER"})),l.default.createElement(a.default.Row,{key:"PERSON_2"},l.default.createElement(a.default.Cell,{content:"Dave Smith",key:"NAME"}),l.default.createElement(a.default.Cell,{content:"213 Raymond Road",key:"ADDRESS"}),l.default.createElement(a.default.Cell,{content:"111-222-3333",key:"PHONE_NUMBER"}))))};t.default=r},3396:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport Table from \'terra-table/lib/Table\';\n\nconst onChange = () => {\n  // eslint-disable-next-line no-alert\n  alert(\'Attempted to change selected indexes.\');\n};\n\nconst SelectableRowsDisableUnselectedRows = () => (\n  <Table isStriped={false}>\n    <Table.Header>\n      <Table.HeaderCell content="Name" key="NAME" minWidth="small" />\n      <Table.HeaderCell content="Address" key="ADDRESS" minWidth="medium" />\n      <Table.HeaderCell content="Phone Number" key="PHONE_NUMBER" minWidth="large" />\n    </Table.Header>\n    <Table.SelectableTableRows selectedIndexes={[1]} disableUnselectedRows onChange={onChange}>\n      <Table.Row key="PERSON_0">\n        <Table.Cell content="John Smith" key="NAME" />\n        <Table.Cell content="123 Adams Drive" key="ADDRESS" />\n        <Table.Cell content="111-222-3333" key="PHONE_NUMBER" />\n      </Table.Row>\n      <Table.Row key="PERSON_1">\n        <Table.Cell content="Jane Smith" key="NAME" />\n        <Table.Cell content="321 Drive Street" key="ADDRESS" />\n        <Table.Cell content="111-222-3333" key="PHONE_NUMBER" />\n      </Table.Row>\n      <Table.Row key="PERSON_2">\n        <Table.Cell content="Dave Smith" key="NAME" />\n        <Table.Cell content="213 Raymond Road" key="ADDRESS" />\n        <Table.Cell content="111-222-3333" key="PHONE_NUMBER" />\n      </Table.Row>\n    </Table.SelectableTableRows>\n  </Table>\n);\n\nexport default SelectableRowsDisableUnselectedRows;\n'},3832:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=b(n(0)),a=b(n(911)),o=b(n(3393)),s=n(1101),r=b(n(3394)),i=b(n(1387)),d=b(n(1388)),c=b(n(3395)),u=b(n(3396));function b(e){return e&&e.__esModule?e:{default:e}}var p=function(){return l.default.createElement(a.default,{packageName:s.name,readme:o.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(s.name),examples:[{title:"Selectable Table",description:"Note: Recording what item(s) are selected is an implementation detail of the consumer. This example shows a single-selectable table implementation.",example:l.default.createElement(i.default,null),source:d.default},{title:"Selectable Rows (Unselected rows are disabled)",description:"A listener has been added for trying to change the selection state of a row, but only enabled rows can have their selection state changed.",example:l.default.createElement(c.default,null),source:u.default}],propsTables:[{componentName:"Selectable Table Rows",componentSrc:r.default}]})};t.default=p},912:function(e,t){}}]);
//# sourceMappingURL=170-732b013428315e4e347a.js.map