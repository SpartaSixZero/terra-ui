(window.webpackJsonp=window.webpackJsonp||[]).push([[179,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{2420:function(e,n,t){"use strict";t.r(n),n.default="# Terra Form Field\n\nThe Form Field component handles the layout of the label, help text and error text associated with a form element. Additionally, it provides required, optional, and invalid indicators.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-form-field`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\n<details>\n<summary>View information on this component's peer dependencies.</summary>\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n| react-intl | ^2.8.0 |\n\n\n</details>\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Implementation Notes:\nThe Form-Field component must be composed inside the [Base][1] component with a locale in order for it to load the correct translation strings.\n\n[1]: https://github.com/cerner/terra-core/tree/master/packages/terra-base/docs\n\n## Usage\n\n```jsx\nimport React from 'react';\nimport Field from 'terra-form-field';\n\n<Field\n  label=\"Do you have any Children?\"\n  labelAttrs={{ className: 'healtheintent-application' }}\n  error=\"This field is required\"\n  help=\"Families are eligible for family package plans\"\n  required\n  isInvalid={this.state.isInvalid}\n >\n   {this.props.children}\n</Field>\n```\n\n## Component Features\n\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n * [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n * [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n * [Localization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n * [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n"},2421:function(e){e.exports=JSON.parse('{"_from":"terra-form-field@^3.0.0","_id":"terra-form-field@3.19.0","_inBundle":false,"_integrity":"sha512-JE6WPhZf+DGG1eZeU1MhUZsAuuLX+CxhGIaDHZNa3JfHdrzvqQV8Ac4KzKN1kMTGedEzG8145mYlhHTzxeh91Q==","_location":"/terra-form-field","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-form-field@^3.0.0","name":"terra-form-field","escapedName":"terra-form-field","rawSpec":"^3.0.0","saveSpec":null,"fetchSpec":"^3.0.0"},"_requiredBy":["/","/terra-clinical-onset-picker","/terra-date-picker","/terra-form-fieldset","/terra-form-input","/terra-form-select","/terra-form-textarea"],"_resolved":"https://registry.npmjs.org/terra-form-field/-/terra-form-field-3.19.0.tgz","_shasum":"f42bbc423c7cc7f00dfca0bd48a28fe87acf6576","_spec":"terra-form-field@^3.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-core/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","terra-doc-template":"^2.15.0","terra-icon":"^3.16.0"},"deprecated":false,"description":"The Form Field component handles the layout of the label, help text and error text associated with a form element.","gitHead":"0b893dc4a80250c0b485a5f205f2defde7c38ecf","homepage":"https://github.com/cerner/terra-core#readme","keywords":["Cerner","Terra","terra-form-field","Field","UI"],"license":"Apache-2.0","main":"lib/Field.js","name":"terra-form-field","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-core.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"3.19.0"}')},2422:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport IconError from 'terra-icon/lib/icon/IconError';\nimport styles from './Field.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The form control elements the Field contains.\n   */\n  children: PropTypes.node,\n  /**\n   * Error message for when the input is invalid. This will only be displayed if isInvalid is true.\n   */\n  error: PropTypes.node,\n  /**\n   * Error Icon to display when the input is invalid.\n   */\n  errorIcon: PropTypes.element,\n  /**\n   * Help element to display with the input.\n   */\n  help: PropTypes.node,\n  /**\n   * Whether or not to hide the required indicator on the label.\n   */\n  hideRequired: PropTypes.bool,\n  /**\n   * The htmlFor attribute on the field label.\n   */\n  htmlFor: PropTypes.string,\n  /**\n   * Whether or not the field is invalid.\n   */\n  isInvalid: PropTypes.bool,\n  /**\n   * Whether or not the field is an inline field.\n   */\n  isInline: PropTypes.bool,\n  /**\n   * Whether or not the label is visible. Use this props to hide a label while still creating it on the DOM for accessibility.\n   */\n  isLabelHidden: PropTypes.bool,\n  /**\n   * The label of the form control children.\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * Attributes to attach to the label.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  labelAttrs: PropTypes.object,\n  /**\n   * Set the max-width of a field using `length` or `%`.  Best practice recommendation to never exceed\n   * a rendered value of 1020px. _(Note: Providing custom inline styles will take precedence.)_\n   */\n  maxWidth: PropTypes.string,\n  /**\n   * Whether or not the field is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Whether or not to append the 'optional' label to a non-required field label.\n   */\n  showOptional: PropTypes.bool,\n  /**\n   *  Provides first class prop for custom inline styles\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n};\n\nconst defaultProps = {\n  children: null,\n  error: null,\n  errorIcon: <IconError />,\n  help: null,\n  hideRequired: false,\n  htmlFor: undefined,\n  isInvalid: false,\n  isInline: false,\n  isLabelHidden: false,\n  labelAttrs: {},\n  maxWidth: undefined,\n  required: false,\n  showOptional: false,\n};\n\nconst contextTypes = {\n  /* eslint-disable consistent-return */\n  intl: (context) => {\n    if (context.intl === undefined) {\n      return new Error('Component is internationalized, and must be wrapped in terra-base');\n    }\n  },\n};\n\nconst hasWhiteSpace = s => /\\s/g.test(s);\n// Detect IE 10 or IE 11\n// TODO - Delete detection logic when we drop support for IE\nconst isIE = () => (window.navigator.userAgent.indexOf('Trident/6.0') > -1 || window.navigator.userAgent.indexOf('Trident/7.0') > -1);\n\nconst Field = (props, { intl }) => {\n  const {\n    children,\n    error,\n    errorIcon,\n    help,\n    hideRequired,\n    htmlFor,\n    isInvalid,\n    isInline,\n    isLabelHidden,\n    label,\n    labelAttrs,\n    maxWidth,\n    required,\n    showOptional,\n    style,\n    ...customProps\n  } = props;\n\n  const customStyles = maxWidth ? Object.assign({ maxWidth }, style) : style;\n\n  const fieldClasses = cx([\n    'field',\n    { 'field-inline': isInline },\n    customProps.className,\n  ]);\n\n  const labelClassNames = cx([\n    'label',\n    labelAttrs.className,\n  ]);\n\n  // Checks to run when not in production\n  // TODO - Remove this once we make this a required prop.\n  // More info: https://github.com/cerner/terra-core/issues/2290\n  if (process.env.NODE_ENV !== 'production') {\n    if (!htmlFor) {\n      // eslint-disable-next-line\n      console.warn('The htmlFor prop will be required in the next major version bump of terra-form-field. It is needed for creating an accessible mapping from the form field to its related error and help text.');\n    }\n\n    if (htmlFor && hasWhiteSpace(htmlFor)) {\n      // eslint-disable-next-line\n      console.warn('The htmlFor prop should be a string without white spaces as it will be used as an HTML attribute value. Use - or _ in place of white space characters.');\n    }\n  }\n\n\n  /**\n   * IE + JAWS has trouble reading aria-describedby content with our form components.\n   * Using feature detect for Microsoft browsers and injecting the help and error messages\n   * into the label as visually hidden text so JAWS can announce them correctly in IE.\n   */\n  const IEDescriptionText = (\n    isIE()\n      ? (\n        <div className={cx('visually-hidden-text')}>\n          {isInvalid && error ? error : null}\n          {help}\n        </div>\n      ) : null\n  );\n\n  const content = React.Children.map(children, (child) => {\n    if (required && child && (child.type.isInput || child.type.isSelect || child.type.isTextarea)) {\n      return React.cloneElement(child, {\n        required: true,\n      });\n    }\n    return child;\n  });\n\n  const labelGroup = (\n    <div className={cx(['label-group', { 'label-group-hidden': isLabelHidden }])}>\n      {isInvalid && <div className={cx('error-icon')}>{errorIcon}</div>}\n      {\n        <label htmlFor={htmlFor} {...labelAttrs} className={labelClassNames}>\n          {required && (isInvalid || !hideRequired) && <div className={cx('required')}>*</div>}\n          {label}\n          {required && !isInvalid && hideRequired && <div className={cx('required-hidden')}>*</div>}\n          {showOptional && !required && <div className={cx('optional')}>{intl.formatMessage({ id: 'Terra.form.field.optional' })}</div>}\n          {IEDescriptionText}\n        </label>\n      }\n      {!isInvalid && <div className={cx('error-icon-hidden')}>{errorIcon}</div>}\n    </div>\n  );\n\n  return (\n    <div style={customStyles} {...customProps} className={fieldClasses}>\n      {labelGroup}\n      {content}\n      {isInvalid && error && <div tabIndex=\"-1\" id={htmlFor ? `${htmlFor}-error` : undefined} className={cx('error-text')}>{error}</div>}\n      {help && <div tabIndex=\"-1\" id={htmlFor ? `${htmlFor}-help` : undefined} className={cx('help-text')}>{help}</div>}\n    </div>\n  );\n};\n\nField.propTypes = propTypes;\nField.defaultProps = defaultProps;\nField.contextTypes = contextTypes;\n\nexport default Field;\n"},2423:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=s(t(0)),i=s(t(330)),o=s(t(4)),l=s(t(2424));function s(e){return e&&e.__esModule?e:{default:e}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,n){return(u=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var m=o.default.bind(l.default),f=function(e){function n(e){var t,r,i;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),r=this,(t=!(i=c(n).call(this,e))||"object"!==a(i)&&"function"!=typeof i?p(r):i).state={isInvalid:!1},t.toggleIsInvalid=t.toggleIsInvalid.bind(p(t)),t}var t,o,l;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&u(e,n)}(n,r.default.Component),t=n,(o=[{key:"toggleIsInvalid",value:function(){this.setState(function(e){return{isInvalid:!e.isInvalid}})}},{key:"render",value:function(){return r.default.createElement("div",null,r.default.createElement("h2",null," Field Examples "),r.default.createElement(i.default,{label:"Field Label",help:"This is a standard, non-required field.",error:"Error Message",isInvalid:this.state.isInvalid},r.default.createElement("div",{className:m("field-content")},"Control Placeholder")),r.default.createElement(i.default,{label:"Field Label",help:"This is an optional field.",error:"Error Message",isInvalid:this.state.isInvalid,isInline:!0,showOptional:!0},r.default.createElement("div",{className:m("field-content")},"Control Placeholder")),r.default.createElement(i.default,{label:"Field Label",help:"This is a required field.",error:"Error Message",isInvalid:this.state.isInvalid,isInline:!0,required:!0},r.default.createElement("div",{className:m("field-content")},"Control Placeholder")),r.default.createElement(i.default,{label:"Field Label",help:"This is a required field, but the required indicator is hidden until the field is in error.",error:"Now the required indicator is showing because the field is in error.",isInvalid:this.state.isInvalid,isInline:!0,required:!0,hideRequired:!0},r.default.createElement("div",{className:m("field-content")},"Control Placeholder")),r.default.createElement("hr",null),r.default.createElement("p",null,"If a field is invalid, an error icon will be displayed.",r.default.createElement("button",{type:"button",onClick:this.toggleIsInvalid},"Toggle Invalid State")))}}])&&d(t.prototype,o),l&&d(t,l),n}();n.default=f},2424:function(e,n,t){e.exports={"field-content":"FieldExamples-module__field-content___d6ez5"}},3695:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=d(t(0)),i=d(t(911)),o=d(t(2420)),l=t(2421),s=d(t(2422)),a=d(t(2423));function d(e){return e&&e.__esModule?e:{default:e}}var c=function(){return r.default.createElement(i.default,{packageName:l.name,readme:o.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(l.name),examples:[{example:r.default.createElement(a.default,null)}],propsTables:[{componentName:"Field",componentSrc:s.default}]})};n.default=c},912:function(e,n){}}]);
//# sourceMappingURL=179-bd79b88761a4284289c5.js.map