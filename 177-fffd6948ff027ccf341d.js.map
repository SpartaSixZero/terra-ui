{"version":3,"sources":["webpack:///./node_modules/terra-clinical-data-grid/lib/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/DatagridWithSelections.js","webpack:///./node_modules/terra-clinical-data-grid/src/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/DatagridWithSelections.jsx","webpack:///./node_modules/terra-clinical-data-grid/lib/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/DatagridWithSelections.4.doc.js","webpack:///./node_modules/terra-clinical-data-grid/lib/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/ContentCellLayout.js","webpack:///./node_modules/terra-clinical-data-grid/lib/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/ContentCellLayout.scss?c8b8","webpack:///./node_modules/terra-clinical-data-grid/lib/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/Datagrid.module.scss?f571"],"names":["Object","defineProperty","exports","value","default","_react","_interopRequireDefault","_terraClinicalDataGrid","_bind","_ContentCellLayout","_DatagridModule","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","this","_defineProperties","props","descriptor","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","cx","bind","_default","_React$Component","DatagridWithSelections","_this","instance","Constructor","TypeError","_classCallCheck","buildSection","buildRows","state","selectedRow","undefined","selectedCell","columns","id","width","text","isSelectable","sortIndicator","sortedColumnId","sortedColumnDirection","protoProps","staticProps","subClass","superClass","create","_inherits","Component","sectionId","num","_this2","rows","Array","fill","map","rowVal","rowIndex","concat","isSelected","rowId","cells","cellVal","cellIndex","columnKey","columnId","component","createElement","reverse","sectionName","numberOfRows","_this3","className","pinnedColumns","overflowColumns","sections","onColumnSelect","newColumns","columnToSort","previouslySortedColumn","setState","prevState","onCellSelect","hasSelectableRows","onRowSelect","_ExampleTemplate","_DatagridWithSelections","_DatagridWithSelections2","description","example","exampleSrc","_propTypes","propTypes","string","ContentCellLayout","_ref","module"],"mappings":"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","file":"177-fffd6948ff027ccf341d.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraClinicalDataGrid = _interopRequireDefault(require(\"terra-clinical-data-grid\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _ContentCellLayout = _interopRequireDefault(require(\"./ContentCellLayout\"));\n\nvar _DatagridModule = _interopRequireDefault(require(\"./Datagrid.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar cx = _bind.default.bind(_DatagridModule.default);\n\nvar DatagridWithSelections =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DatagridWithSelections, _React$Component);\n\n  function DatagridWithSelections(props) {\n    var _this;\n\n    _classCallCheck(this, DatagridWithSelections);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatagridWithSelections).call(this, props));\n    _this.buildSection = _this.buildSection.bind(_assertThisInitialized(_this));\n    _this.buildRows = _this.buildRows.bind(_assertThisInitialized(_this));\n    _this.state = {\n      selectedRow: undefined,\n      selectedCell: undefined,\n      columns: {\n        'Column-0': {\n          id: 'Column-0',\n          width: 200,\n          text: 'Column 0',\n          isSelectable: true,\n          sortIndicator: 'ascending'\n        },\n        'Column-1': {\n          id: 'Column-1',\n          width: 200,\n          text: 'Column 1',\n          isSelectable: true\n        },\n        'Column-2': {\n          id: 'Column-2',\n          width: 200,\n          text: 'Column 2',\n          isSelectable: true\n        },\n        'Column-3': {\n          id: 'Column-3',\n          width: 200,\n          text: 'Column 3',\n          isSelectable: true\n        },\n        'Column-4': {\n          id: 'Column-4',\n          width: 200,\n          text: 'Column 4',\n          isSelectable: true\n        },\n        'Column-5': {\n          id: 'Column-5',\n          width: 200,\n          text: 'Column 5',\n          isSelectable: true\n        },\n        'Column-6': {\n          id: 'Column-6',\n          width: 200,\n          text: 'Column 6',\n          isSelectable: true\n        }\n      },\n      sortedColumnId: 'Column-0',\n      sortedColumnDirection: 'ascending'\n    };\n    return _this;\n  }\n\n  _createClass(DatagridWithSelections, [{\n    key: \"buildRows\",\n    value: function buildRows(sectionId, num) {\n      var _this2 = this;\n\n      var rows = new Array(num).fill().map(function (rowVal, rowIndex) {\n        return {\n          id: \"Row-\".concat(rowIndex),\n          isSelectable: true,\n          isSelected: _this2.state.selectedRow && _this2.state.selectedRow.sectionId === sectionId && _this2.state.selectedRow.rowId === \"Row-\".concat(rowIndex),\n          cells: new Array(7).fill(0).map(function (cellVal, cellIndex) {\n            return \"Column-\".concat(cellIndex);\n          }).map(function (columnKey) {\n            return {\n              columnId: columnKey,\n              isSelectable: true,\n              isSelected: _this2.state.selectedCell && _this2.state.selectedCell.sectionId === sectionId && _this2.state.selectedCell.rowId === \"Row-\".concat(rowIndex) && _this2.state.selectedCell.columnId === columnKey,\n              component: _react.default.createElement(_ContentCellLayout.default, {\n                text: \"Row-\".concat(rowIndex, \", \").concat(columnKey)\n              })\n            };\n          })\n        };\n      });\n      return this.state.sortedColumnId && this.state.sortedColumnDirection === 'ascending' ? rows : rows.reverse();\n    }\n  }, {\n    key: \"buildSection\",\n    value: function buildSection(sectionId, sectionName, numberOfRows) {\n      return {\n        id: sectionId,\n        text: sectionName,\n        rows: this.buildRows(sectionId, numberOfRows)\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var columns = this.state.columns;\n      return _react.default.createElement(\"div\", {\n        className: cx('data-grid-basic')\n      }, _react.default.createElement(_terraClinicalDataGrid.default, {\n        id: \"selections-example\",\n        pinnedColumns: [columns['Column-0'], columns['Column-1'], columns['Column-2']],\n        overflowColumns: [columns['Column-3'], columns['Column-4'], columns['Column-5'], columns['Column-6']],\n        sections: [this.buildSection('Section-0', 'Section 0', 15), this.buildSection('Section-1', 'Section 1', 15)],\n        fill: true,\n        onColumnSelect: function onColumnSelect(columnId) {\n          var newColumns = {};\n\n          var columnToSort = _extends({}, _this3.state.columns[columnId]);\n\n          columnToSort.sortIndicator = columnToSort.sortIndicator === 'ascending' ? 'descending' : 'ascending';\n          newColumns[\"\".concat(columnId)] = columnToSort;\n\n          if (columnId !== _this3.state.sortedColumnId) {\n            var previouslySortedColumn = _extends({}, _this3.state.columns[_this3.state.sortedColumnId]);\n\n            if (previouslySortedColumn) {\n              previouslySortedColumn.sortIndicator = undefined;\n              newColumns[\"\".concat(_this3.state.sortedColumnId)] = previouslySortedColumn;\n            }\n          }\n\n          _this3.setState(function (prevState) {\n            return {\n              columns: _extends({}, prevState.columns, newColumns),\n              sortedColumnId: columnId,\n              sortedColumnDirection: columnToSort.sortIndicator\n            };\n          });\n        },\n        onCellSelect: function onCellSelect(sectionId, rowId, columnId) {\n          _this3.setState({\n            selectedRow: undefined,\n            selectedCell: {\n              sectionId: sectionId,\n              rowId: rowId,\n              columnId: columnId\n            }\n          });\n        },\n        hasSelectableRows: true,\n        onRowSelect: function onRowSelect(sectionId, rowId) {\n          _this3.setState({\n            selectedCell: undefined,\n            selectedRow: {\n              sectionId: sectionId,\n              rowId: rowId\n            }\n          });\n        }\n      }));\n    }\n  }]);\n\n  return DatagridWithSelections;\n}(_react.default.Component);\n\nvar _default = DatagridWithSelections;\nexports.default = _default;","export default \"import React from 'react';\\n\\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\\nimport DataGrid from 'terra-clinical-data-grid';\\nimport classNames from 'classnames/bind';\\nimport ContentCellLayout from './ContentCellLayout';\\nimport styles from './Datagrid.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass DatagridWithSelections extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.buildSection = this.buildSection.bind(this);\\n    this.buildRows = this.buildRows.bind(this);\\n\\n    this.state = {\\n      selectedRow: undefined,\\n      selectedCell: undefined,\\n      columns: {\\n        'Column-0': {\\n          id: 'Column-0',\\n          width: 200,\\n          text: 'Column 0',\\n          isSelectable: true,\\n          sortIndicator: 'ascending',\\n        },\\n        'Column-1': {\\n          id: 'Column-1',\\n          width: 200,\\n          text: 'Column 1',\\n          isSelectable: true,\\n        },\\n        'Column-2': {\\n          id: 'Column-2',\\n          width: 200,\\n          text: 'Column 2',\\n          isSelectable: true,\\n        },\\n        'Column-3': {\\n          id: 'Column-3',\\n          width: 200,\\n          text: 'Column 3',\\n          isSelectable: true,\\n        },\\n        'Column-4': {\\n          id: 'Column-4',\\n          width: 200,\\n          text: 'Column 4',\\n          isSelectable: true,\\n        },\\n        'Column-5': {\\n          id: 'Column-5',\\n          width: 200,\\n          text: 'Column 5',\\n          isSelectable: true,\\n        },\\n        'Column-6': {\\n          id: 'Column-6',\\n          width: 200,\\n          text: 'Column 6',\\n          isSelectable: true,\\n        },\\n      },\\n      sortedColumnId: 'Column-0',\\n      sortedColumnDirection: 'ascending',\\n    };\\n  }\\n\\n  buildRows(sectionId, num) {\\n    const rows = (new Array(num)).fill().map((rowVal, rowIndex) => ({\\n      id: `Row-${rowIndex}`,\\n      isSelectable: true,\\n      isSelected: this.state.selectedRow && this.state.selectedRow.sectionId === sectionId && this.state.selectedRow.rowId === `Row-${rowIndex}`,\\n      cells: ((new Array(7).fill(0)).map((cellVal, cellIndex) => (`Column-${cellIndex}`))).map(columnKey => ({\\n        columnId: columnKey,\\n        isSelectable: true,\\n        isSelected: this.state.selectedCell && this.state.selectedCell.sectionId === sectionId && this.state.selectedCell.rowId === `Row-${rowIndex}` && this.state.selectedCell.columnId === columnKey,\\n        component: <ContentCellLayout text={`Row-${rowIndex}, ${columnKey}`} />,\\n      })),\\n    }));\\n\\n    return this.state.sortedColumnId && this.state.sortedColumnDirection === 'ascending' ? rows : rows.reverse();\\n  }\\n\\n  buildSection(sectionId, sectionName, numberOfRows) {\\n    return {\\n      id: sectionId,\\n      text: sectionName,\\n      rows: this.buildRows(sectionId, numberOfRows),\\n    };\\n  }\\n\\n  render() {\\n    const { columns } = this.state;\\n\\n    return (\\n      <div className={cx('data-grid-basic')}>\\n        <DataGrid\\n          id=\\\"selections-example\\\"\\n          pinnedColumns={[\\n            columns['Column-0'],\\n            columns['Column-1'],\\n            columns['Column-2'],\\n          ]}\\n          overflowColumns={[\\n            columns['Column-3'],\\n            columns['Column-4'],\\n            columns['Column-5'],\\n            columns['Column-6'],\\n          ]}\\n          sections={[\\n            this.buildSection('Section-0', 'Section 0', 15),\\n            this.buildSection('Section-1', 'Section 1', 15),\\n          ]}\\n          fill\\n          onColumnSelect={(columnId) => {\\n            const newColumns = {};\\n\\n            const columnToSort = Object.assign({}, this.state.columns[columnId]);\\n            columnToSort.sortIndicator = columnToSort.sortIndicator === 'ascending' ? 'descending' : 'ascending';\\n            newColumns[`${columnId}`] = columnToSort;\\n\\n            if (columnId !== this.state.sortedColumnId) {\\n              const previouslySortedColumn = Object.assign({}, this.state.columns[this.state.sortedColumnId]);\\n              if (previouslySortedColumn) {\\n                previouslySortedColumn.sortIndicator = undefined;\\n                newColumns[`${this.state.sortedColumnId}`] = previouslySortedColumn;\\n              }\\n            }\\n\\n            this.setState(prevState => ({\\n              columns: Object.assign({}, prevState.columns, newColumns),\\n              sortedColumnId: columnId,\\n              sortedColumnDirection: columnToSort.sortIndicator,\\n            }));\\n          }}\\n          onCellSelect={(sectionId, rowId, columnId) => {\\n            this.setState({\\n              selectedRow: undefined,\\n              selectedCell: {\\n                sectionId,\\n                rowId,\\n                columnId,\\n              },\\n            });\\n          }}\\n          hasSelectableRows\\n          onRowSelect={(sectionId, rowId) => {\\n            this.setState({\\n              selectedCell: undefined,\\n              selectedRow: {\\n                sectionId,\\n                rowId,\\n              },\\n            });\\n          }}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default DatagridWithSelections;\\n\"","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _ExampleTemplate = _interopRequireDefault(require(\"terra-doc-template/lib/ExampleTemplate\"));\n\nvar _DatagridWithSelections = _interopRequireDefault(require(\"./DatagridWithSelections\"));\n\nvar _DatagridWithSelections2 = _interopRequireDefault(require(\"!raw-loader!../../../../../src/terra-dev-site/doc/clinical-data-grid/DatagridExamples.2/DatagridWithSelections\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable import/no-webpack-loader-syntax, import/first, import/extensions, import/no-unresolved, import/no-duplicates */\n\n/* eslint-enable import/no-webpack-loader-syntax, import/first, import/extensions, import/no-unresolved, import/no-duplicates */\nvar DatagridWithSelectionsExample = function DatagridWithSelectionsExample() {\n  return _react.default.createElement(_ExampleTemplate.default, {\n    description: \"This example features selectable rows, cells, and column headers. Column headers implement rudimentary sorting on selection. Rows can be selected by interacting with the leading column.\",\n    example: _react.default.createElement(_DatagridWithSelections.default, null),\n    exampleSrc: _DatagridWithSelections2.default\n  });\n};\n\nvar _default = DatagridWithSelectionsExample;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _ContentCellLayout = _interopRequireDefault(require(\"./ContentCellLayout.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_ContentCellLayout.default);\n\nvar propTypes = {\n  text: _propTypes.default.string\n};\n\nvar ContentCellLayout = function ContentCellLayout(_ref) {\n  var text = _ref.text;\n  return _react.default.createElement(\"div\", {\n    className: cx('content-cell')\n  }, text);\n};\n\nContentCellLayout.propTypes = propTypes;\nvar _default = ContentCellLayout;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content-cell\":\"ContentCellLayout__content-cell___1l9SY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"data-grid-basic\":\"Datagrid-module__data-grid-basic___2jvhh\",\"data-grid-row-style\":\"Datagrid-module__data-grid-row-style___1eRFT\",\"data-grid-paging\":\"Datagrid-module__data-grid-paging___3PtUm\",\"loading-overlay\":\"Datagrid-module__loading-overlay___aAZco\"};"],"sourceRoot":""}