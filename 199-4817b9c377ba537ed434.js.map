{"version":3,"sources":["webpack:///./node_modules/terra-navigation-prompt/docs/implementation-guide/IMPLEMENTATION_GUIDE_PART_2.md","webpack:///./node_modules/terra-navigation-prompt/lib/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart2.js","webpack:///./node_modules/terra-navigation-prompt/src/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart2.jsx","webpack:///./node_modules/terra-navigation-prompt/lib/terra-dev-site/doc/navigation-prompt/implementation-guide.1/Part2-UsingCustomHandler.3.doc.js"],"names":["_interopRequireWildcard","_interopRequireDefault","Object","defineProperty","exports","value","default","_slicedToArray2","_react","_propTypes","_index","Form","_ref","title","_useState","useState","_useState2","inputValue","setInputValue","createElement","length","description","undefined","type","onChange","event","target","onClick","propTypes","string","_default","_useState3","_useState4","activeForm","setActiveForm","_useState5","_useState6","activePrompts","setActivePrompts","onSwitchForm","formKey","disabled","bind","NavigationPromptCheckpoint","onPromptChange","prompts","key","_terraDocTemplate","_IMPLEMENTATION_GUIDE_PART_","_ImplementationGuidePart","_ImplementationGuidePart2","packageName","srcPath","readme","examples","example","source"],"mappings":"6VAAA,OAAe,yhG,kCCEf,IAAIA,EAA0B,EAAQ,IAElCC,EAAyB,EAAQ,GAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAkBN,EAAuB,EAAQ,MAEjDO,EAASR,EAAwB,EAAQ,IAEzCS,EAAaR,EAAuB,EAAQ,IAE5CS,EAASV,EAAwB,EAAQ,OAEzCW,EAAO,SAAcC,GACvB,IAAIC,EAAQD,EAAKC,MAEbC,GAAY,EAAIN,EAAOO,UAAU,IACjCC,GAAa,EAAIT,EAAgBD,SAASQ,EAAW,GACrDG,EAAaD,EAAW,GACxBE,EAAgBF,EAAW,GAE/B,OAAOR,EAAOF,QAAQa,cAAc,MAAO,KAAMX,EAAOF,QAAQa,cAAc,IAAK,KAAMN,GAAQI,EAAWG,OAASZ,EAAOF,QAAQa,cAAcT,EAAOJ,QAAS,CAChKe,YAAaR,SACVS,EAAWd,EAAOF,QAAQa,cAAc,QAAS,CACpDI,KAAM,OACNC,SAAU,SAAkBC,GAC1BP,EAAcO,EAAMC,OAAOrB,QAE7BA,MAAOY,IACLT,EAAOF,QAAQa,cAAc,SAAU,CACzCI,KAAM,SACNI,QAAS,WACPT,EAAc,MAEf,YAGLP,EAAKiB,UAAY,CACff,MAAOJ,EAAWH,QAAQuB,QAG5B,IAiCIC,EAjCe,WACjB,IAAIC,GAAa,EAAIvB,EAAOO,UAAU,UAClCiB,GAAa,EAAIzB,EAAgBD,SAASyB,EAAY,GACtDE,EAAaD,EAAW,GACxBE,EAAgBF,EAAW,GAE3BG,GAAa,EAAI3B,EAAOO,UAAU,IAClCqB,GAAa,EAAI7B,EAAgBD,SAAS6B,EAAY,GACtDE,EAAgBD,EAAW,GAC3BE,EAAmBF,EAAW,GAElC,SAASG,EAAaC,GACpBN,EAAcM,GAGhB,OAAOhC,EAAOF,QAAQa,cAAc,MAAO,KAAMX,EAAOF,QAAQa,cAAc,KAAM,KAAM,iBAAkBX,EAAOF,QAAQa,cAAc,IAAK,KAAM,0GAA2GX,EAAOF,QAAQa,cAAc,SAAU,CACpSI,KAAM,SACNkB,SAAyB,WAAfR,GAA2BI,EAAcjB,OACnDO,QAASY,EAAaG,KAAK,KAAM,WAChC,oBAAqBlC,EAAOF,QAAQa,cAAc,SAAU,CAC7DI,KAAM,SACNkB,SAAyB,WAAfR,GAA2BI,EAAcjB,OACnDO,QAASY,EAAaG,KAAK,KAAM,WAChC,oBAAqBlC,EAAOF,QAAQa,cAAcT,EAAOiC,2BAA4B,CACtFC,eAAgB,SAAwBC,GACtCP,EAAiBO,KAElBrC,EAAOF,QAAQa,cAAcR,EAAM,CACpCE,MAAOoB,EACPa,IAAKb,OAKT7B,EAAQE,QAAUwB,G,kCCjFlB,OAAe,y1D,kCCEf,IAAI7B,EAAyB,EAAQ,GAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIE,EAASP,EAAuB,EAAQ,IAExC8C,EAAoB9C,EAAuB,EAAQ,MAEnD+C,EAA8B/C,EAAuB,EAAQ,OAE7DgD,EAA2BhD,EAAuB,EAAQ,OAE1DiD,EAA4BjD,EAAuB,EAAQ,OAmB3D6B,EAb0B,WAC5B,OAAOtB,EAAOF,QAAQa,cAAc4B,EAAkBzC,QAAS,CAC7D6C,YAAa,0BACbC,QAAS,yFACTC,OAAQL,EAA4B1C,QACpCgD,SAAU,CAAC,CACTzC,MAAO,gDACP0C,QAAS/C,EAAOF,QAAQa,cAAc8B,EAAyB3C,QAAS,MACxEkD,OAAQN,EAA0B5C,aAMxCF,EAAQE,QAAUwB,G","file":"199-4817b9c377ba537ed434.js","sourcesContent":["export default \"# Terra Navigation Prompt - Implementation Guide\\n\\n## Part 3 - Implementing a Custom Prompt Solution\\n\\nAt this point, we realize that we do not want to **ever** allow users to navigate away from a Form with unsaved state. We can do that by using the NavigationPromptCheckpoint's `onPromptChange` prop.\\n\\n```diff\\n- import React, { useState, useRef } from 'react';\\n+ import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport NavigationPrompt, { NavigationPromptCheckpoint } from 'terra-navigation-prompt';\\n\\nconst Form = ({ title }) => {\\n  const [inputValue, setInputValue] = useState('');\\n\\n  return (\\n    <div>\\n      <p>{title}</p>\\n      {inputValue.length ? <NavigationPrompt description={title} /> : undefined}\\n      <input\\n        type=\\\"text\\\"\\n        onChange={(event) => {\\n          setInputValue(event.target.value);\\n        }}\\n        value={inputValue}\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setInputValue('');\\n        }}\\n      >\\n        Submit\\n      </button>\\n    </div>\\n  );\\n};\\n\\nconst FormSwitcher = () => {\\n  const [activeForm, setActiveForm] = useState('Form 1');\\n+ const [activePrompts, setActivePrompts] = useState([]);\\n\\n  function onSwitchForm(formKey) {\\n-   formCheckpointRef.current.resolvePrompts({\\n-     title: 'Descriptive Notification Prompt Title',\\n-     message: 'Descriptive Notification Prompt Message',\\n-     rejectButtonText: `Descriptive Reject Button Action`,\\n-     acceptButtonText: 'Descriptive Accept Button Action',\\n-   }).then(() => {\\n      setActiveForm(formKey);\\n-   });\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Form Switcher</h2>\\n-     <p>The user will be prompted with the provided messaging when Forms are switched with unsaved changes present.</p>\\n+     <p>Custom logic has been implemented to prevent navigation altogether when NavigationPrompts are present.</p>\\n      <button\\n        type=\\\"button\\\"\\n-       disabled={activeForm === 'Form 1'}\\n+       disabled={activeForm === 'Form 1' || activePrompts.length}\\n        onClick={onSwitchForm.bind(null, 'Form 1')}\\n      >\\n        Switch to Form 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n-       disabled={activeForm === 'Form 2'}\\n+       disabled={activeForm === 'Form 2' || activePrompts.length}\\n        onClick={onSwitchForm.bind(null, 'Form 2')}\\n      >\\n        Switch to Form 2\\n      </button>\\n      <NavigationPromptCheckpoint\\n-       ref={formCheckpointRef}\\n+       onPromptChange={(prompts) => {\\n+         setActivePrompts(prompts);\\n+       }}\\n      >\\n        <Form title={activeForm} key={activeForm} />\\n      </NavigationPromptCheckpoint>\\n    </div>\\n  );\\n};\\n```\\n\\nWe remove the `ref` from the NavigationPromptCheckpoint and instead implement `onPromptChange` to store the currently rendered NavigationPrompt's in the FormSwitcher's state. We disable the 'Switch to' buttons altogether if a NavigationPrompt is detected. We could also use this state to control other navigation-capable components, like client-side routers.\\n\"","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _index = _interopRequireWildcard(require(\"../../../../index\"));\n\nvar Form = function Form(_ref) {\n  var title = _ref.title;\n\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, title), inputValue.length ? _react.default.createElement(_index.default, {\n    description: title\n  }) : undefined, _react.default.createElement(\"input\", {\n    type: \"text\",\n    onChange: function onChange(event) {\n      setInputValue(event.target.value);\n    },\n    value: inputValue\n  }), _react.default.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      setInputValue('');\n    }\n  }, \"Submit\"));\n};\n\nForm.propTypes = {\n  title: _propTypes.default.string\n};\n\nvar FormSwitcher = function FormSwitcher() {\n  var _useState3 = (0, _react.useState)('Form 1'),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      activeForm = _useState4[0],\n      setActiveForm = _useState4[1];\n\n  var _useState5 = (0, _react.useState)([]),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      activePrompts = _useState6[0],\n      setActivePrompts = _useState6[1];\n\n  function onSwitchForm(formKey) {\n    setActiveForm(formKey);\n  }\n\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"h2\", null, \"Form Switcher\"), _react.default.createElement(\"p\", null, \"Custom logic has been implemented to prevent navigation altogether when NavigationPrompts are present.\"), _react.default.createElement(\"button\", {\n    type: \"button\",\n    disabled: activeForm === 'Form 1' || activePrompts.length,\n    onClick: onSwitchForm.bind(null, 'Form 1')\n  }, \"Switch to Form 1\"), _react.default.createElement(\"button\", {\n    type: \"button\",\n    disabled: activeForm === 'Form 2' || activePrompts.length,\n    onClick: onSwitchForm.bind(null, 'Form 2')\n  }, \"Switch to Form 2\"), _react.default.createElement(_index.NavigationPromptCheckpoint, {\n    onPromptChange: function onPromptChange(prompts) {\n      setActivePrompts(prompts);\n    }\n  }, _react.default.createElement(Form, {\n    title: activeForm,\n    key: activeForm\n  })));\n};\n\nvar _default = FormSwitcher;\nexports.default = _default;","export default \"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport NavigationPrompt, { NavigationPromptCheckpoint } from '../../../../index';\\n\\nconst Form = ({ title }) => {\\n  const [inputValue, setInputValue] = useState('');\\n\\n  return (\\n    <div>\\n      <p>{title}</p>\\n      {inputValue.length ? <NavigationPrompt description={title} /> : undefined}\\n      <input\\n        type=\\\"text\\\"\\n        onChange={(event) => {\\n          setInputValue(event.target.value);\\n        }}\\n        value={inputValue}\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setInputValue('');\\n        }}\\n      >\\n        Submit\\n      </button>\\n    </div>\\n  );\\n};\\n\\nForm.propTypes = {\\n  title: PropTypes.string,\\n};\\n\\nconst FormSwitcher = () => {\\n  const [activeForm, setActiveForm] = useState('Form 1');\\n  const [activePrompts, setActivePrompts] = useState([]);\\n\\n  function onSwitchForm(formKey) {\\n    setActiveForm(formKey);\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Form Switcher</h2>\\n      <p>Custom logic has been implemented to prevent navigation altogether when NavigationPrompts are present.</p>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 1' || activePrompts.length}\\n        onClick={onSwitchForm.bind(null, 'Form 1')}\\n      >\\n        Switch to Form 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 2' || activePrompts.length}\\n        onClick={onSwitchForm.bind(null, 'Form 2')}\\n      >\\n        Switch to Form 2\\n      </button>\\n      <NavigationPromptCheckpoint\\n        onPromptChange={(prompts) => {\\n          setActivePrompts(prompts);\\n        }}\\n      >\\n        <Form title={activeForm} key={activeForm} />\\n      </NavigationPromptCheckpoint>\\n    </div>\\n  );\\n};\\n\\nexport default FormSwitcher;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _IMPLEMENTATION_GUIDE_PART_ = _interopRequireDefault(require(\"../../../../../docs/implementation-guide/IMPLEMENTATION_GUIDE_PART_2.md\"));\n\nvar _ImplementationGuidePart = _interopRequireDefault(require(\"../examples/ImplementationGuidePart2\"));\n\nvar _ImplementationGuidePart2 = _interopRequireDefault(require(\"!raw-loader!../../../../../src/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart2\"));\n\n/* eslint-disable import/no-webpack-loader-syntax, import/first, import/extensions, import/no-unresolved, import/no-duplicates */\n// Example Files\n\n/* eslint-enabled import/no-webpack-loader-syntax, import/first, import/extensions, import/no-unresolved, import/no-duplicates */\nvar ImplementationGuidePage = function ImplementationGuidePage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: \"terra-navigation-prompt\",\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/terra-navigation-prompt\",\n    readme: _IMPLEMENTATION_GUIDE_PART_.default,\n    examples: [{\n      title: 'Part 2 - Implementing a Custom Prompt Handler',\n      example: _react.default.createElement(_ImplementationGuidePart.default, null),\n      source: _ImplementationGuidePart2.default\n    }]\n  });\n};\n\nvar _default = ImplementationGuidePage;\nexports.default = _default;"],"sourceRoot":""}