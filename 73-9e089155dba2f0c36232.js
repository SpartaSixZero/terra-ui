(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{1092:function(e,n,t){e.exports={checkbox:"Checkbox-module__checkbox___HI9Vi",label:"Checkbox-module__label___3E8fg","is-mobile":"Checkbox-module__is-mobile___frQvN","native-input":"Checkbox-module__native-input___GvkXw","label-text":"Checkbox-module__label-text___fY5lt","is-hidden":"Checkbox-module__is-hidden___26Rqh","is-disabled":"Checkbox-module__is-disabled___WSQKG","is-inline":"Checkbox-module__is-inline___1jo0Z"}},1093:function(e,n,t){"use strict";var l={isConsideredMobileDevice:function(){return window.matchMedia("(max-width: 1024px)").matches&&("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)}};e.exports=l},1148:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M42.1 4H28V2a2 2 0 00-2-2h-4a2 2 0 00-2 2v2H5.9L5 11h38zM38 14H8.1l3.7 32a2.26 2.26 0 002.2 2h20a2.26 2.26 0 002.2-2l3.7-32z"}))};a.displayName="IconTrash",a.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1"};var u=a;n.default=u},1149:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M45.8 12c1.2 0 2.2 1 2.2 2.2v26.7c0 1.2-1 2.2-2.2 2.2H2.2C1 43 0 42 0 40.8V7.2C0 6 1 5 2.2 5H15c1.4.1 2.7.6 3.7 1.6l3.8 3.9c1 1 2.3 1.5 3.7 1.6l19.4-.1h.2z"}))};a.displayName="IconFolder",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg",isBidi:!0};var u=a;n.default=u},1150:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M39.8 12H35V1.7c0-.9-.8-1.7-1.7-1.7H8.7C7.8 0 7 .8 7 1.7V12H2.2C1 12 0 13 0 14.2v19.7C.1 35.1 1 36 2.2 36H7v10.3c0 .9.8 1.7 1.7 1.7h24.6c.9 0 1.7-.8 1.7-1.7V36h4.8c1.2 0 2.2-1 2.2-2.2V14.2c0-1.2-1-2.2-2.2-2.2zM10 3h22v9H10V3zm22 42H10V29.9h22V45zm3.2-24C34 21 33 20 33 18.8s1-2.2 2.2-2.2 2.2 1 2.2 2.2c0 1.2-1 2.2-2.2 2.2z"}))};a.displayName="IconPrinter",a.defaultProps={viewBox:"0 0 42 48",xmlns:"http://www.w3.org/2000/svg"};var u=a;n.default=u},1155:function(e,n,t){e.exports={"collapsible-menu-view":"CollapsibleMenuView-module__collapsible-menu-view___2nx9S","menu-button":"CollapsibleMenuView-module__menu-button___stZoT",hidden:"CollapsibleMenuView-module__hidden___oBOhM","menu-button-icon":"CollapsibleMenuView-module__menu-button-icon___3AEH6","face-up-item":"CollapsibleMenuView-module__face-up-item___1DBow",control:"CollapsibleMenuView-module__control___14DH1","is-disabled":"CollapsibleMenuView-module__is-disabled___3j2OV",divider:"CollapsibleMenuView-module__divider___XkJS5","is-calculating":"CollapsibleMenuView-module__is-calculating___2D9gM"}},1194:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M48 8v16h-6v-5.7L25.31 35l-4.56-4.56L9.18 42H48v6H0V0h6v36.7l14.75-14.76 4.56 4.56L37.82 14H32V8z"}))};a.displayName="IconVisualization",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",isBidi:!0};var u=a;n.default=u},1335:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M0 0v48h48V0zm31 9v10H18V9zm0 13v10H18V22zm3 0h11v10H34zm0-3V9h11v10zM3 9h12v10H3zm0 13h12v10H3zm0 23V35h12v10zm15 0V35h13v10zm16 0V35h11v10z"}))};a.displayName="IconTable",a.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1"};var u=a;n.default=u},1336:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M0 0v48h48V0zm45 45H15V3h30z"}))};a.displayName="IconFlowsheet",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",isBidi:!0};var u=a;n.default=u},1337:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(23));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M47.2 24.9c1-.5 1-1.3 0-1.8L28 13.5 25 12c-.7-.3-2.9-1.5-3.9-2L1.9.4C.8-.1 0 .4 0 1.5V19c0 1.2.9 2.2 2.1 2.3L30.3 24c1.1.1 1.1.3 0 .4L2.1 27C.9 27.1 0 28 0 29.2v17.2c-.1.6.3 1.2.9 1.3.3 0 .6 0 .9-.2L21.1 38l3-1.5c.7-.3 2.9-1.5 3.9-2l19.2-9.6z"}))};a.displayName="IconSend",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg",isBidi:!0};var u=a;n.default=u},1338:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(17)),s=l(t(34)),o=l(t(20)),a=l(t(24)),u=l(t(25)),r=l(t(26)),d=l(t(31)),c=l(t(27)),p=l(t(0)),h=l(t(2)),m=l(t(4)),f=l(t(348)),b=l(t(1155)),C=m.default.bind(b.default),g={children:h.default.node.isRequired,boundingRef:h.default.func,contentWidth:h.default.oneOf(Object.keys(f.default.Opts.widths)),button:h.default.element.isRequired},y={isCollapsibleMenuItem:h.default.bool},w=function(e){function n(e){var t;return(0,o.default)(this,n),(t=(0,u.default)(this,(0,r.default)(n).call(this,e))).handleRequestClose=t.handleRequestClose.bind((0,d.default)(t)),t.wrappedOnClick=t.wrappedOnClick.bind((0,d.default)(t)),t.wrapButtonClick=t.wrapButtonClick.bind((0,d.default)(t)),t.wrapChildrenOnClick=t.wrapChildrenOnClick.bind((0,d.default)(t)),t.setButtonNode=t.setButtonNode.bind((0,d.default)(t)),t.getButtonNode=t.getButtonNode.bind((0,d.default)(t)),t.state={isOpen:!1},t}return(0,c.default)(n,e),(0,a.default)(n,[{key:"getChildContext",value:function(){return{isCollapsibleMenuItem:!0}}},{key:"setButtonNode",value:function(e){this.buttonNode=e}},{key:"getButtonNode",value:function(){return this.buttonNode}},{key:"handleRequestClose",value:function(){this.setState({isOpen:!1})}},{key:"wrappedOnClick",value:function(e){var n=this;return function(t){n.handleRequestClose(),e.props.onClick&&e.props.onClick(t)}}},{key:"wrapButtonClick",value:function(e){var n=this;return function(t){n.setState({isOpen:!0}),e.props.onClick&&e.props.onClick(t)}}},{key:"wrapChildrenOnClick",value:function(e){var n=this,t=e?[]:void 0;return p.default.Children.forEach(e,function(e){var l=e;if(e.props.shouldCloseOnClick)l=p.default.cloneElement(e,{onClick:n.wrappedOnClick(e)});else if(e.props.children){var i=n.wrapChildrenOnClick(e.props.children);l=p.default.cloneElement(e,{children:i})}else if(e.props.subMenuItems){var s=n.wrapChildrenOnClick(e.props.subMenuItems);l=p.default.cloneElement(e,{subMenuItems:s})}t.push(l)}),t}},{key:"render",value:function(){var e=this.props,n=e.children,t=e.button,l=e.contentWidth,o=(0,s.default)(e,["children","button","contentWidth"]),a=p.default.cloneElement(t,{onClick:this.wrapButtonClick(t)});return p.default.createElement("div",{className:C("face-up-item"),ref:this.setButtonNode},p.default.createElement(f.default,(0,i.default)({},o,{onRequestClose:this.handleRequestClose,isArrowDisplayed:!0,isOpen:this.state.isOpen,targetRef:this.getButtonNode,contentWidth:l}),this.wrapChildrenOnClick(n)),a)}}]),n}(p.default.Component);w.propTypes=g,w.childContextTypes=y,w.Item=f.default.Item,w.ItemGroup=f.default.ItemGroup,w.Opts={widths:f.default.Opts.widths};var v=w;n.default=v},2203:function(e,n,t){"use strict";t.r(n),n.default='# Terra Collapsible Menu View\n\nThe collapsible menu view is a mechanism that can be used in toolbar scenarios where actionable items will be displayed face-up and flex based on the space available. Any items that can not fit in the available space will be rolled into an ellipsis menu.\n\nCollapsibleMenuView.Item will flex between a button when displayed face-up and a Menu.Item when in a menu. An item can have an onClick action and/or contain menuItems that will be displayed in a menu when clicked (they will be displayed in a submenu if the item is rolled into the ellipsis menu)\n\nCollapsibleMenuView.Toggle will flex between a checkbox with a label when displayed face-up and a selectable Menu.Item when in a menu.\n\nCollapsibleMenuView.ItemGroup will flex between a button group when displayed face-up and a Menu.ItemGroup when rolled into the ellipsis menu. A selectable ItemGroup will have toggle style selection. An Item group that is not slectable will have it\'s children roll into the ellipsis menu as non selectable Menu.Items.\n\nCollapsibleMenuView.Divider will flex between a vertical divider when displayed face-up and a Menu.Divider when in a menu.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-collapsible-menu-view`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\n<details>\n<summary>View information on this component\'s peer dependencies.</summary>\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n\n\n</details>\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\n\n```jsx\nimport React from \'react\';\nimport IconTable from \'terra-icon/lib/icon/IconTable\';\nimport IconFlowsheet from \'terra-icon/lib/icon/IconFlowsheet\';\nimport IconVisualization from \'terra-icon/lib/icon/IconVisualization\';\nimport IconSend from \'terra-icon/lib/icon/IconSend\';\nimport IconPrinter from \'terra-icon/lib/icon/IconPrinter\';\nimport IconFolder from \'terra-icon/lib/icon/IconFolder\';\nimport IconTrash from \'terra-icon/lib/icon/IconTrash\';\nimport CollapsibleMenuView from \'terra-collapsible-menu-view\';\n\nclass CollapsibleMenuViewDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDisplayTypeChange = this.handleDisplayTypeChange.bind(this);\n    this.handleToggleOneOnChange = this.handleToggleOneOnChange.bind(this);\n    this.handleToggleTwoOnChange = this.handleToggleTwoOnChange.bind(this);\n    this.state = {\n      toggle1Selection: false,\n      toggle2Selection: false,\n      displayType: \'tableView\',\n    };\n  }\n\n  handleToggleOneOnChange(event, isSelected) {\n    this.setState({ toggle1Selection: isSelected });\n  }\n\n  handleToggleTwoOnChange(event, isSelected) {\n    this.setState({ toggle2Selection: isSelected });\n  }\n\n  handleDisplayTypeChange(event, selectedKey) {\n    this.setState({ displayType: selectedKey });\n  }\n\n  render() {\n    return (\n      <CollapsibleMenuView>\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 1"\n          key="toggle1"\n          onChange={this.handleToggleOneOnChange}\n          isSelected={this.state.toggle1Selection}\n        />\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 2"\n          key="toggle2"\n          onChange={this.handleToggleTwoOnChange}\n          isSelected={this.state.toggle2Selection}\n        />\n        <CollapsibleMenuView.Divider key="Divider1" />\n        <CollapsibleMenuView.Item\n          text="Menu Button 1"\n          key="MenuButton1"\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" />,\n          ]}\n        />\n        <CollapsibleMenuView.Item\n          text="Menu Button 2"\n          key="MenuButton 2"\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" />,\n          ]}\n        />\n        <CollapsibleMenuView.Divider key="Divider2" />\n        <CollapsibleMenuView.ItemGroup key="ViewTypeSelection" onChange={this.handleDisplayTypeChange}>\n          <CollapsibleMenuView.Item\n            icon={<IconTable />}\n            text="Table View"\n            key="tableView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'tableView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconFlowsheet />}\n            text="Expanded View"\n            key="expandedView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'expandedView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconVisualization />}\n            text="Trending View"\n            key="trendingView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'trendingView\'}\n          />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider3" />\n        <CollapsibleMenuView.Item icon={<IconSend />} text="Send Message" key="send" isIconOnly />\n        <CollapsibleMenuView.ItemGroup key="messageActionGroup">\n          <CollapsibleMenuView.Item icon={<IconPrinter />} text="Print Message" key="print" isIconOnly />\n          <CollapsibleMenuView.Item icon={<IconFolder />} text="Move Message to Folder..." key="move" isIconOnly />\n          <CollapsibleMenuView.Item icon={<IconTrash />} text="Trash Message" key="trash" isIconOnly />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider4" />\n        <CollapsibleMenuView.Item text="Button 1" key="button1" />\n        <CollapsibleMenuView.Item text="Button 2" key="button2" />\n        <CollapsibleMenuView.Item text="Button 3" key="button3" />\n        <CollapsibleMenuView.Item text="Button 4" key="button4" />\n      </CollapsibleMenuView>\n    );\n  }\n}\n\nexport default CollapsibleMenuViewDemo;\n```\n\n## Component Features\n\n\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n * [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n * [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n'},2204:function(e){e.exports=JSON.parse('{"_from":"terra-collapsible-menu-view@^6.0.0","_id":"terra-collapsible-menu-view@6.8.0","_inBundle":false,"_integrity":"sha512-LyhLEU/2ZUgifg17tOFIhFC3Qy9SY00AfaSVufSOLd82XQk0Q0zhf0nIpW/U3V94zwE7FH9DS4tRgiDpq+WK4Q==","_location":"/terra-collapsible-menu-view","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-collapsible-menu-view@^6.0.0","name":"terra-collapsible-menu-view","escapedName":"terra-collapsible-menu-view","rawSpec":"^6.0.0","saveSpec":null,"fetchSpec":"^6.0.0"},"_requiredBy":["/"],"_resolved":"https://registry.npmjs.org/terra-collapsible-menu-view/-/terra-collapsible-menu-view-6.8.0.tgz","_shasum":"db4a44128b6b82ddfd680c23c2e4cd1449e520fe","_spec":"terra-collapsible-menu-view@^6.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","resize-observer-polyfill":"^1.4.1","terra-button":"^3.3.0","terra-button-group":"^3.0.0","terra-form-checkbox":"^3.0.0","terra-list":"^4.0.0","terra-menu":"^6.8.0","terra-mixins":"^1.0.0"},"deprecated":false,"description":"The collapsible menu view is a mechanism that can be used in toolbar scenarios where actionable items will be displayed face-up and flex based on the space available. Any items that can not fit in the available space will be rolled into an ellipsis menu.","devDependencies":{"terra-doc-template":"^2.2.0","terra-icon":"^3.1.0"},"gitHead":"f763d8f2d030d85d834554d5c2eca6f2917f2eac","homepage":"https://github.com/cerner/terra-framework#readme","keywords":["Cerner","Terra","terra-collapsible-menu-view","CollapsibleMenuView","UI"],"license":"Apache-2.0","main":"lib/CollapsibleMenuView.js","name":"terra-collapsible-menu-view","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"scripts":{"compile":"babel --root-mode upward --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"6.8.0"}')},2205:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport CollapsibleMenuViewItem from './CollapsibleMenuViewItem';\nimport CollapsibleMenuViewItemGroup from './CollapsibleMenuViewItemGroup';\nimport CollapsibleMenuViewToggle from './CollapsibleMenuViewToggle';\nimport CollapsibleMenuViewDivider from './CollapsibleMenuViewDivider';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Item/ItemGroup/Divider elements to display in the view. Items that will fit in the space available will\n   * display face-up the remainder will be rolled into a menu\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A string representation of the width in px, limited to:\n   * 160, 240, 320, 640, 960, 1280, 1760, or auto\n   */\n  menuWidth: PropTypes.oneOf(Object.keys(CollapsibleMenuViewItem.Opts.widths)),\n\n  /**\n   * Bounding container for the menu, will use window if no value provided.\n   */\n  boundingRef: PropTypes.func,\n};\n\nconst contextTypes = {\n  /* eslint-disable consistent-return */\n  intl: (context) => {\n    if (context.intl === undefined) {\n      return new Error('Component is internationalized, and must be wrapped in terra-base');\n    }\n  },\n};\n\nclass CollapsibleMenuView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setContainer = this.setContainer.bind(this);\n    this.setMenuButton = this.setMenuButton.bind(this);\n    this.resetCache = this.resetCache.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.resetCache();\n  }\n\n  componentDidMount() {\n    this.resizeObserver = new ResizeObserver((entries) => {\n      this.contentWidth = entries[0].contentRect.width;\n      if (!this.isCalculating) {\n        this.animationFrameID = window.requestAnimationFrame(() => {\n          // Resetting the cache so that all elements will be rendered face-up for width calculations\n          this.resetCache();\n          this.forceUpdate();\n        });\n      }\n    });\n    this.handleResize(this.contentWidth);\n    this.resizeObserver.observe(this.container);\n  }\n\n  componentDidUpdate() {\n    if (this.isCalculating) {\n      this.isCalculating = false;\n      this.handleResize(this.contentWidth);\n    }\n  }\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.animationFrameID);\n    this.resizeObserver.disconnect(this.container);\n    this.container = null;\n  }\n\n  setContainer(node) {\n    if (node === null) { return; } // Ref callbacks happen on mount and unmount, element will be null on unmount\n    this.container = node;\n  }\n\n  setMenuButton(node) {\n    if (node === null) { return; }\n    this.menuButton = node;\n  }\n\n  resetCache() {\n    this.animationFrameID = null;\n    this.hiddenStartIndex = -1;\n    this.isCalculating = true;\n    this.menuHidden = false;\n  }\n\n  handleResize(width) {\n    const menuButtonWidth = this.menuButton.getBoundingClientRect().width;\n    const availableWidth = width - menuButtonWidth;\n    let hiddenStartIndex = -1;\n    let calcWidth = 0;\n    let menuHidden = true;\n\n    for (let i = 0; i < React.Children.count(this.props.children); i += 1) {\n      const child = this.container.children[i];\n      const childWidth = child.getBoundingClientRect().width;\n      calcWidth += childWidth;\n\n      if (calcWidth > availableWidth) {\n        // If last child fits in the available space, leave it face up\n        if (i === this.props.children.length - 1 && calcWidth <= width) {\n          break;\n        }\n\n        hiddenStartIndex = i;\n        menuHidden = false;\n        break;\n      }\n    }\n\n    if (this.menuHidden !== menuHidden || this.hiddenStartIndex !== hiddenStartIndex) {\n      this.menuHidden = menuHidden;\n      this.hiddenStartIndex = hiddenStartIndex;\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    const {\n      children, boundingRef, menuWidth, ...customProps\n    } = this.props;\n    const { intl } = this.context;\n    const ellipsesText = intl.formatMessage({ id: 'Terra.collapsibleMenuView.more' });\n    const visibleChildren = React.Children.toArray(children);\n\n    let hiddenChildren = null;\n    if (this.hiddenStartIndex >= 0) {\n      hiddenChildren = visibleChildren.splice(this.hiddenStartIndex);\n    }\n\n    const collapsibleMenuViewClassName = cx([\n      'collapsible-menu-view',\n      { 'is-calculating': this.isCalculating },\n      customProps.className,\n    ]);\n    const menuButtonClassName = cx([\n      'menu-button',\n      { hidden: this.menuHidden },\n    ]);\n\n    return (\n      <div {...customProps} className={collapsibleMenuViewClassName} ref={this.setContainer}>\n        {visibleChildren}\n        <div className={menuButtonClassName} ref={this.setMenuButton}>\n          <CollapsibleMenuViewItem\n            data-collapsible-menu-toggle\n            icon={<span className={cx('menu-button-icon')} />}\n            subMenuItems={hiddenChildren}\n            boundingRef={boundingRef}\n            menuWidth={menuWidth}\n            isIconOnly\n            text={ellipsesText}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nCollapsibleMenuView.Item = CollapsibleMenuViewItem;\nCollapsibleMenuView.ItemGroup = CollapsibleMenuViewItemGroup;\nCollapsibleMenuView.Toggle = CollapsibleMenuViewToggle;\nCollapsibleMenuView.Divider = CollapsibleMenuViewDivider;\n\nCollapsibleMenuView.propTypes = propTypes;\nCollapsibleMenuView.contextTypes = contextTypes;\n\nexport default CollapsibleMenuView;\n"},2206:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Button from 'terra-button';\nimport ButtonGroup from 'terra-button-group';\nimport Menu from './_CollapsibleMenu';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Sets the item's text\n   */\n  text: PropTypes.string.isRequired,\n\n  /**\n   * Bounding container for the menu, will use window if no value provided.\n   */\n  boundingRef: PropTypes.func,\n\n  /**\n  * An optional icon. Nested inline with the text when provided\n  */\n  icon: PropTypes.element,\n\n  /**\n   * Indicates if only the icon should display when item is face-up. (Text should still be given to be displayed when item is in the menu)\n   */\n  isIconOnly: PropTypes.bool,\n\n  /**\n  * Reverses the position of the icon and text\n  */\n  isReversed: PropTypes.bool,\n\n  /**\n   * Indicates if the item start as selected when placed in a button group\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Indicates if the item should be disabled.\n   */\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Indicates that clicking on this item while displayed inside a menu should close the menu.\n   */\n  shouldCloseOnClick: PropTypes.bool,\n\n  /**\n   * List of Menu.Items to display in a submenu when this item is selected.\n   */\n  subMenuItems: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * Callback function for when the item is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * A string representation of the width in px, limited to:\n   * 160, 240, 320, 640, 960, 1280, 1760, or auto\n   */\n  menuWidth: PropTypes.oneOf(Object.keys(Menu.Opts.widths)),\n};\n\nconst contextTypes = {\n  isCollapsibleGroupItem: PropTypes.bool,\n  isCollapsibleMenuItem: PropTypes.bool,\n};\n\nconst defaultProps = {\n  isSelected: false,\n  isReversed: false,\n  shouldCloseOnClick: true,\n  isIconOnly: false,\n};\n\nclass CollapsibleMenuViewItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setButtonNode = this.setButtonNode.bind(this);\n    this.getButtonNode = this.getButtonNode.bind(this);\n  }\n\n  setButtonNode(node) {\n    this.buttonNode = node;\n  }\n\n  getButtonNode() {\n    return this.buttonNode;\n  }\n\n  render() {\n    const {\n      icon,\n      isIconOnly,\n      isReversed,\n      text,\n      isSelected,\n      isDisabled,\n      subMenuItems,\n      shouldCloseOnClick,\n      boundingRef,\n      menuWidth,\n      ...customProps\n    } = this.props;\n\n    const { isCollapsibleGroupItem, isCollapsibleMenuItem } = this.context;\n    const attributes = Object.assign({}, customProps);\n    let item;\n\n    if (isCollapsibleMenuItem) {\n      item = (\n        <Menu.Item\n          {...attributes}\n          text={text}\n          isSelected={isSelected && isCollapsibleGroupItem}\n          isDisabled={isDisabled}\n          subMenuItems={subMenuItems}\n        />\n      );\n    } else if (isCollapsibleGroupItem) {\n      item = (\n        <ButtonGroup.Button\n          {...attributes}\n          icon={icon}\n          text={text}\n          isDisabled={isDisabled}\n        />\n      );\n    } else if (subMenuItems && subMenuItems.length > 0) {\n      item = (\n        <Menu\n          contentWidth={menuWidth}\n          boundingRef={boundingRef}\n          button={(\n            <Button\n              {...attributes}\n              icon={icon}\n              text={text}\n              isReversed={isReversed}\n              isDisabled={isDisabled}\n              onClick={this.handleButtonClick}\n              isIconOnly={isIconOnly}\n            />\n)}\n        >\n          {subMenuItems}\n        </Menu>\n      );\n    } else {\n      item = (\n        <div className={cx('face-up-item')}>\n          <Button\n            {...attributes}\n            icon={icon}\n            text={text}\n            isReversed={isReversed}\n            isDisabled={isDisabled}\n            isIconOnly={isIconOnly}\n          />\n        </div>\n      );\n    }\n\n    return item;\n  }\n}\n\nCollapsibleMenuViewItem.propTypes = propTypes;\nCollapsibleMenuViewItem.defaultProps = defaultProps;\nCollapsibleMenuViewItem.contextTypes = contextTypes;\nCollapsibleMenuViewItem.Opts = {\n  widths: Menu.Opts.widths,\n};\n\nexport default CollapsibleMenuViewItem;\n"},2207:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ButtonGroup from 'terra-button-group';\nimport List from 'terra-list';\nimport Menu from './_CollapsibleMenu';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Callback function that is called when the group's selection state changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * CollapsibleMenuView.Items to be grouped together\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * A list of keys of the CollapsibleMenuView.Items that should be selected.\n   */\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  selectedKeys: [],\n};\n\nconst childContextTypes = {\n  isCollapsibleGroupItem: PropTypes.bool,\n};\n\nconst contextTypes = {\n  isCollapsibleMenuItem: PropTypes.bool,\n};\n\n\nclass CollapsibleMenuViewItemGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  getChildContext() {\n    return { isCollapsibleGroupItem: true };\n  }\n\n  handleOnChange(event, selectedIndex) {\n    if (this.props.onChange) {\n      let selectedKey = selectedIndex;\n      React.Children.forEach(this.props.children, (child, index) => {\n        if (selectedIndex === index) {\n          selectedKey = child.key;\n        }\n      });\n\n      this.props.onChange(event, selectedKey);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      onChange,\n      selectedKeys,\n      ...customProps\n    } = this.props;\n\n    const { isCollapsibleMenuItem } = this.context;\n\n    if (isCollapsibleMenuItem && selectedKeys.length) {\n      return (\n        <li role=\"none\">\n          <Menu.ItemGroup {...customProps} onChange={this.handleOnChange}>\n            {children}\n          </Menu.ItemGroup>\n        </li>\n      );\n    } if (isCollapsibleMenuItem) {\n      return (\n        <li role=\"none\">\n          <List {...customProps} role=\"listbox\">\n            {children}\n          </List>\n        </li>\n      );\n    }\n\n    const buttonGroupClassNames = cx([\n      'face-up-item',\n      customProps.className,\n    ]);\n\n    return (\n      <ButtonGroup {...customProps} onChange={onChange} className={buttonGroupClassNames} selectedKeys={selectedKeys}>\n        {children}\n      </ButtonGroup>\n    );\n  }\n}\n\nCollapsibleMenuViewItemGroup.propTypes = propTypes;\nCollapsibleMenuViewItemGroup.defaultProps = defaultProps;\nCollapsibleMenuViewItemGroup.childContextTypes = childContextTypes;\nCollapsibleMenuViewItemGroup.contextTypes = contextTypes;\n\nexport default CollapsibleMenuViewItemGroup;\n"},2208:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Checkbox from 'terra-form-checkbox';\nimport Menu from './_CollapsibleMenu';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Sets the item's text\n   */\n  text: PropTypes.string.isRequired,\n  /**\n   * Indicates if the item is selected.\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * Callback function for when selection state changes. Is called with event and isSelected parameters\n   */\n  onChange: PropTypes.func,\n  /**\n   *  Indicates that the toggle should be selectable\n   */\n  isSelectable: PropTypes.bool,\n  /**\n   * Indicates if the toggle should be disabled.\n   */\n  isDisabled: PropTypes.bool,\n  /**\n   * Indicates that clicking on this item while displayed inside a menu should close the menu\n   */\n  shouldCloseOnClick: PropTypes.bool,\n};\n\nconst contextTypes = {\n  isCollapsibleMenuItem: PropTypes.bool,\n};\n\nconst defaultProps = {\n  isSelected: false,\n  isSelectable: true,\n  shouldCloseOnClick: true,\n};\n\nclass CollapsibleMenuViewToggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.wrappedOnChange = this.wrappedOnChange.bind(this);\n  }\n\n\n  // Wrapping onChange event so that the same parameters will be given when the display is a checkbox and a menu.item\n  wrappedOnChange(event) {\n    if (this.props.onChange) {\n      this.props.onChange(event, event.target.checked);\n    }\n  }\n\n  render() {\n    const {\n      text,\n      isSelected,\n      isSelectable,\n      isDisabled,\n      onChange,\n      shouldCloseOnClick,\n      ...customProps\n    } = this.props;\n\n    const { isCollapsibleMenuItem } = this.context;\n    const controllClassName = cx([\n      'control',\n      { 'is-disabled': isDisabled || !isSelectable },\n      customProps.className,\n    ]);\n\n    if (isCollapsibleMenuItem) {\n      return (\n        <Menu.Item\n          {...customProps}\n          text={text}\n          isSelected={isSelected}\n          isSelectable={isSelectable}\n          isDisabled={isDisabled}\n          onChange={onChange}\n        />\n      );\n    }\n\n    return (\n      <div className={cx(['face-up-item'])}>\n        <Checkbox\n          {...customProps}\n          className={controllClassName}\n          labelText={text}\n          defaultChecked={isSelected}\n          onChange={this.wrappedOnChange}\n          disabled={isDisabled || !isSelectable}\n        />\n      </div>\n    );\n  }\n}\n\nCollapsibleMenuViewToggle.propTypes = propTypes;\nCollapsibleMenuViewToggle.defaultProps = defaultProps;\nCollapsibleMenuViewToggle.contextTypes = contextTypes;\n\nexport default CollapsibleMenuViewToggle;\n"},2209:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(20)),s=l(t(24)),o=l(t(25)),a=l(t(26)),u=l(t(31)),r=l(t(27)),d=l(t(0)),c=l(t(1335)),p=l(t(1336)),h=l(t(1194)),m=l(t(1337)),f=l(t(1150)),b=l(t(1149)),C=l(t(1148)),g=l(t(2210)),y=function(e){function n(e){var t;return(0,i.default)(this,n),(t=(0,o.default)(this,(0,a.default)(n).call(this,e))).handleDisplayTypeChange=t.handleDisplayTypeChange.bind((0,u.default)(t)),t.handleToggleOneOnChange=t.handleToggleOneOnChange.bind((0,u.default)(t)),t.handleToggleTwoOnChange=t.handleToggleTwoOnChange.bind((0,u.default)(t)),t.state={toggle1Selection:!1,toggle2Selection:!1,displayType:"tableView"},t}return(0,r.default)(n,e),(0,s.default)(n,[{key:"handleToggleOneOnChange",value:function(e,n){this.setState({toggle1Selection:n})}},{key:"handleToggleTwoOnChange",value:function(e,n){this.setState({toggle2Selection:n})}},{key:"handleDisplayTypeChange",value:function(e,n){this.setState({displayType:n})}},{key:"render",value:function(){return d.default.createElement(g.default,null,d.default.createElement(g.default.Toggle,{text:"Toggle Item 1",key:"toggle1",shouldCloseOnClick:!1,onChange:this.handleToggleOneOnChange,isSelected:this.state.toggle1Selection,isSelectable:!1}),d.default.createElement(g.default.Toggle,{text:"Toggle Item 2",key:"toggle2",shouldCloseOnClick:!1,onChange:this.handleToggleTwoOnChange,isSelected:this.state.toggle2Selection,isDisabled:!0}),d.default.createElement(g.default.Divider,{key:"Divider1"}),d.default.createElement(g.default.Item,{text:"Menu Button 1",key:"MenuButton1",shouldCloseOnClick:!1,subMenuItems:[d.default.createElement(g.default.Item,{text:"Default Item 1",key:"defaultItem1"}),d.default.createElement(g.default.Item,{text:"Default Item 2",key:"defaultItem2"})]}),d.default.createElement(g.default.Item,{text:"Menu Button 2",key:"MenuButton 2",isDisabled:!0,shouldCloseOnClick:!1,subMenuItems:[d.default.createElement(g.default.Item,{text:"Default Item 1",key:"defaultItem1"}),d.default.createElement(g.default.Item,{text:"Default Item 2",key:"defaultItem2",isDisabled:!0})]}),d.default.createElement(g.default.Divider,{key:"Divider2"}),d.default.createElement(g.default.ItemGroup,{key:"ViewTypeSelection",selectedKeys:[this.state.displayType],onChange:this.handleDisplayTypeChange},d.default.createElement(g.default.Item,{icon:d.default.createElement(c.default,null),text:"Table View",key:"tableView",isIconOnly:!0,shouldCloseOnClick:!1,isSelected:"tableView"===this.state.displayType}),d.default.createElement(g.default.Item,{icon:d.default.createElement(p.default,null),text:"Expanded View",key:"expandedView",isIconOnly:!0,shouldCloseOnClick:!1,isSelected:"expandedView"===this.state.displayType}),d.default.createElement(g.default.Item,{icon:d.default.createElement(h.default,null),text:"Trending View",key:"trendingView",isIconOnly:!0,shouldCloseOnClick:!1,isSelected:"trendingView"===this.state.displayType,isDisabled:!0})),d.default.createElement(g.default.Divider,{key:"Divider3"}),d.default.createElement(g.default.Item,{icon:d.default.createElement(m.default,null),text:"Send Message",key:"send",isIconOnly:!0}),d.default.createElement(g.default.ItemGroup,{key:"messageActionGroup"},d.default.createElement(g.default.Item,{icon:d.default.createElement(f.default,null),text:"Print Message",key:"print",isIconOnly:!0}),d.default.createElement(g.default.Item,{icon:d.default.createElement(b.default,null),text:"Move Message to Folder...",key:"move",isIconOnly:!0,isDisabled:!0}),d.default.createElement(g.default.Item,{icon:d.default.createElement(C.default,null),text:"Trash Message",key:"trash",isIconOnly:!0})),d.default.createElement(g.default.Divider,{key:"Divider4"}),d.default.createElement(g.default.Item,{text:"Button 1",key:"button1"}),d.default.createElement(g.default.Item,{text:"Button 2",key:"button2",isDisabled:!0}),d.default.createElement(g.default.Item,{text:"Button 3",key:"button3"}),d.default.createElement(g.default.Item,{text:"Button 4",key:"button4"}))}}]),n}(d.default.Component);n.default=y},2210:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(17)),s=l(t(34)),o=l(t(20)),a=l(t(24)),u=l(t(25)),r=l(t(26)),d=l(t(31)),c=l(t(27)),p=l(t(0)),h=l(t(155)),m=l(t(2)),f=l(t(4)),b=l(t(2211)),C=l(t(2212)),g=l(t(2213)),y=l(t(2214)),w=l(t(1155)),v=f.default.bind(w.default),I={children:m.default.node.isRequired,menuWidth:m.default.oneOf(Object.keys(b.default.Opts.widths)),boundingRef:m.default.func},M={intl:function(e){if(void 0===e.intl)return new Error("Component is internationalized, and must be wrapped in terra-base")}},x=function(e){function n(e){var t;return(0,o.default)(this,n),(t=(0,u.default)(this,(0,r.default)(n).call(this,e))).setContainer=t.setContainer.bind((0,d.default)(t)),t.setMenuButton=t.setMenuButton.bind((0,d.default)(t)),t.resetCache=t.resetCache.bind((0,d.default)(t)),t.handleResize=t.handleResize.bind((0,d.default)(t)),t.resetCache(),t}return(0,c.default)(n,e),(0,a.default)(n,[{key:"componentDidMount",value:function(){var e=this;this.resizeObserver=new h.default(function(n){e.contentWidth=n[0].contentRect.width,e.isCalculating||(e.animationFrameID=window.requestAnimationFrame(function(){e.resetCache(),e.forceUpdate()}))}),this.handleResize(this.contentWidth),this.resizeObserver.observe(this.container)}},{key:"componentDidUpdate",value:function(){this.isCalculating&&(this.isCalculating=!1,this.handleResize(this.contentWidth))}},{key:"componentWillUnmount",value:function(){window.cancelAnimationFrame(this.animationFrameID),this.resizeObserver.disconnect(this.container),this.container=null}},{key:"setContainer",value:function(e){null!==e&&(this.container=e)}},{key:"setMenuButton",value:function(e){null!==e&&(this.menuButton=e)}},{key:"resetCache",value:function(){this.animationFrameID=null,this.hiddenStartIndex=-1,this.isCalculating=!0,this.menuHidden=!1}},{key:"handleResize",value:function(e){for(var n=e-this.menuButton.getBoundingClientRect().width,t=-1,l=0,i=!0,s=0;s<p.default.Children.count(this.props.children);s+=1){if((l+=this.container.children[s].getBoundingClientRect().width)>n){if(s===this.props.children.length-1&&l<=e)break;t=s,i=!1;break}}this.menuHidden===i&&this.hiddenStartIndex===t||(this.menuHidden=i,this.hiddenStartIndex=t,this.forceUpdate())}},{key:"render",value:function(){var e=this.props,n=e.children,t=e.boundingRef,l=e.menuWidth,o=(0,s.default)(e,["children","boundingRef","menuWidth"]),a=this.context.intl.formatMessage({id:"Terra.collapsibleMenuView.more"}),u=p.default.Children.toArray(n),r=null;this.hiddenStartIndex>=0&&(r=u.splice(this.hiddenStartIndex));var d=v(["collapsible-menu-view",{"is-calculating":this.isCalculating},o.className]),c=v(["menu-button",{hidden:this.menuHidden}]);return p.default.createElement("div",(0,i.default)({},o,{className:d,ref:this.setContainer}),u,p.default.createElement("div",{className:c,ref:this.setMenuButton},p.default.createElement(b.default,{"data-collapsible-menu-toggle":!0,icon:p.default.createElement("span",{className:v("menu-button-icon")}),subMenuItems:r,boundingRef:t,menuWidth:l,isIconOnly:!0,text:a})))}}]),n}(p.default.Component);x.Item=b.default,x.ItemGroup=C.default,x.Toggle=g.default,x.Divider=y.default,x.propTypes=I,x.contextTypes=M;var k=x;n.default=k},2211:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(17)),s=l(t(34)),o=l(t(20)),a=l(t(24)),u=l(t(25)),r=l(t(26)),d=l(t(31)),c=l(t(27)),p=l(t(0)),h=l(t(2)),m=l(t(4)),f=l(t(61)),b=l(t(339)),C=l(t(1338)),g=l(t(1155)),y=m.default.bind(g.default),w={text:h.default.string.isRequired,boundingRef:h.default.func,icon:h.default.element,isIconOnly:h.default.bool,isReversed:h.default.bool,isSelected:h.default.bool,isDisabled:h.default.bool,shouldCloseOnClick:h.default.bool,subMenuItems:h.default.arrayOf(h.default.element),onClick:h.default.func,menuWidth:h.default.oneOf(Object.keys(C.default.Opts.widths))},v={isCollapsibleGroupItem:h.default.bool,isCollapsibleMenuItem:h.default.bool},I=function(e){function n(e){var t;return(0,o.default)(this,n),(t=(0,u.default)(this,(0,r.default)(n).call(this,e))).setButtonNode=t.setButtonNode.bind((0,d.default)(t)),t.getButtonNode=t.getButtonNode.bind((0,d.default)(t)),t}return(0,c.default)(n,e),(0,a.default)(n,[{key:"setButtonNode",value:function(e){this.buttonNode=e}},{key:"getButtonNode",value:function(){return this.buttonNode}},{key:"render",value:function(){var e=this.props,n=e.icon,t=e.isIconOnly,l=e.isReversed,o=e.text,a=e.isSelected,u=e.isDisabled,r=e.subMenuItems,d=(e.shouldCloseOnClick,e.boundingRef),c=e.menuWidth,h=(0,s.default)(e,["icon","isIconOnly","isReversed","text","isSelected","isDisabled","subMenuItems","shouldCloseOnClick","boundingRef","menuWidth"]),m=this.context,g=m.isCollapsibleGroupItem,w=m.isCollapsibleMenuItem,v=(0,i.default)({},h);return w?p.default.createElement(C.default.Item,(0,i.default)({},v,{text:o,isSelected:a&&g,isDisabled:u,subMenuItems:r})):g?p.default.createElement(b.default.Button,(0,i.default)({},v,{icon:n,text:o,isDisabled:u})):r&&r.length>0?p.default.createElement(C.default,{contentWidth:c,boundingRef:d,button:p.default.createElement(f.default,(0,i.default)({},v,{icon:n,text:o,isReversed:l,isDisabled:u,onClick:this.handleButtonClick,isIconOnly:t}))},r):p.default.createElement("div",{className:y("face-up-item")},p.default.createElement(f.default,(0,i.default)({},v,{icon:n,text:o,isReversed:l,isDisabled:u,isIconOnly:t})))}}]),n}(p.default.Component);I.propTypes=w,I.defaultProps={isSelected:!1,isReversed:!1,shouldCloseOnClick:!0,isIconOnly:!1},I.contextTypes=v,I.Opts={widths:C.default.Opts.widths};var M=I;n.default=M},2212:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(17)),s=l(t(34)),o=l(t(20)),a=l(t(24)),u=l(t(25)),r=l(t(26)),d=l(t(31)),c=l(t(27)),p=l(t(0)),h=l(t(2)),m=l(t(4)),f=l(t(339)),b=l(t(123)),C=l(t(1338)),g=l(t(1155)),y=m.default.bind(g.default),w={onChange:h.default.func,children:h.default.node.isRequired,selectedKeys:h.default.arrayOf(h.default.string)},v={isCollapsibleGroupItem:h.default.bool},I={isCollapsibleMenuItem:h.default.bool},M=function(e){function n(e){var t;return(0,o.default)(this,n),(t=(0,u.default)(this,(0,r.default)(n).call(this,e))).handleOnChange=t.handleOnChange.bind((0,d.default)(t)),t}return(0,c.default)(n,e),(0,a.default)(n,[{key:"getChildContext",value:function(){return{isCollapsibleGroupItem:!0}}},{key:"handleOnChange",value:function(e,n){if(this.props.onChange){var t=n;p.default.Children.forEach(this.props.children,function(e,l){n===l&&(t=e.key)}),this.props.onChange(e,t)}}},{key:"render",value:function(){var e=this.props,n=e.children,t=e.onChange,l=e.selectedKeys,o=(0,s.default)(e,["children","onChange","selectedKeys"]),a=this.context.isCollapsibleMenuItem;if(a&&l.length)return p.default.createElement("li",{role:"none"},p.default.createElement(C.default.ItemGroup,(0,i.default)({},o,{onChange:this.handleOnChange}),n));if(a)return p.default.createElement("li",{role:"none"},p.default.createElement(b.default,(0,i.default)({},o,{role:"listbox"}),n));var u=y(["face-up-item",o.className]);return p.default.createElement(f.default,(0,i.default)({},o,{onChange:t,className:u,selectedKeys:l}),n)}}]),n}(p.default.Component);M.propTypes=w,M.defaultProps={selectedKeys:[]},M.childContextTypes=v,M.contextTypes=I;var x=M;n.default=x},2213:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(17)),s=l(t(34)),o=l(t(20)),a=l(t(24)),u=l(t(25)),r=l(t(26)),d=l(t(31)),c=l(t(27)),p=l(t(0)),h=l(t(2)),m=l(t(4)),f=l(t(923)),b=l(t(1338)),C=l(t(1155)),g=m.default.bind(C.default),y={text:h.default.string.isRequired,isSelected:h.default.bool,onChange:h.default.func,isSelectable:h.default.bool,isDisabled:h.default.bool,shouldCloseOnClick:h.default.bool},w={isCollapsibleMenuItem:h.default.bool},v=function(e){function n(e){var t;return(0,o.default)(this,n),(t=(0,u.default)(this,(0,r.default)(n).call(this,e))).wrappedOnChange=t.wrappedOnChange.bind((0,d.default)(t)),t}return(0,c.default)(n,e),(0,a.default)(n,[{key:"wrappedOnChange",value:function(e){this.props.onChange&&this.props.onChange(e,e.target.checked)}},{key:"render",value:function(){var e=this.props,n=e.text,t=e.isSelected,l=e.isSelectable,o=e.isDisabled,a=e.onChange,u=(e.shouldCloseOnClick,(0,s.default)(e,["text","isSelected","isSelectable","isDisabled","onChange","shouldCloseOnClick"])),r=this.context.isCollapsibleMenuItem,d=g(["control",{"is-disabled":o||!l},u.className]);return r?p.default.createElement(b.default.Item,(0,i.default)({},u,{text:n,isSelected:t,isSelectable:l,isDisabled:o,onChange:a})):p.default.createElement("div",{className:g(["face-up-item"])},p.default.createElement(f.default,(0,i.default)({},u,{className:d,labelText:n,defaultChecked:t,onChange:this.wrappedOnChange,disabled:o||!l})))}}]),n}(p.default.Component);v.propTypes=y,v.defaultProps={isSelected:!1,isSelectable:!0,shouldCloseOnClick:!0},v.contextTypes=w;var I=v;n.default=I},2214:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(0)),s=l(t(2)),o=l(t(4)),a=l(t(348)),u=l(t(1155)),r=o.default.bind(u.default),d={isCollapsibleMenuItem:s.default.bool},c=function(e,n){return n.isCollapsibleMenuItem?i.default.createElement(a.default.Divider,null):i.default.createElement("div",{className:r(["divider","face-up-item"])})};c.contextTypes=d;var p=c;n.default=p},2215:function(e,n,t){"use strict";t.r(n),n.default='import React from \'react\';\nimport IconTable from \'terra-icon/lib/icon/IconTable\';\nimport IconFlowsheet from \'terra-icon/lib/icon/IconFlowsheet\';\nimport IconVisualization from \'terra-icon/lib/icon/IconVisualization\';\nimport IconSend from \'terra-icon/lib/icon/IconSend\';\nimport IconPrinter from \'terra-icon/lib/icon/IconPrinter\';\nimport IconFolder from \'terra-icon/lib/icon/IconFolder\';\nimport IconTrash from \'terra-icon/lib/icon/IconTrash\';\n// eslint-disable-next-line import/no-unresolved, import/extensions\nimport CollapsibleMenuView from \'terra-collapsible-menu-view/lib/CollapsibleMenuView\';\n\nclass CollapsibleMenuViewDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDisplayTypeChange = this.handleDisplayTypeChange.bind(this);\n    this.handleToggleOneOnChange = this.handleToggleOneOnChange.bind(this);\n    this.handleToggleTwoOnChange = this.handleToggleTwoOnChange.bind(this);\n    this.state = {\n      toggle1Selection: false,\n      toggle2Selection: false,\n      displayType: \'tableView\',\n    };\n  }\n\n  handleToggleOneOnChange(event, isSelected) {\n    this.setState({ toggle1Selection: isSelected });\n  }\n\n  handleToggleTwoOnChange(event, isSelected) {\n    this.setState({ toggle2Selection: isSelected });\n  }\n\n  handleDisplayTypeChange(event, selectedKey) {\n    this.setState({ displayType: selectedKey });\n  }\n\n  render() {\n    return (\n      <CollapsibleMenuView>\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 1"\n          key="toggle1"\n          shouldCloseOnClick={false}\n          onChange={this.handleToggleOneOnChange}\n          isSelected={this.state.toggle1Selection}\n          isSelectable={false}\n        />\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 2"\n          key="toggle2"\n          shouldCloseOnClick={false}\n          onChange={this.handleToggleTwoOnChange}\n          isSelected={this.state.toggle2Selection}\n          isDisabled\n        />\n        <CollapsibleMenuView.Divider key="Divider1" />\n        <CollapsibleMenuView.Item\n          text="Menu Button 1"\n          key="MenuButton1"\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" />,\n          ]}\n        />\n        <CollapsibleMenuView.Item\n          text="Menu Button 2"\n          key="MenuButton 2"\n          isDisabled\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" isDisabled />,\n          ]}\n        />\n        <CollapsibleMenuView.Divider key="Divider2" />\n        <CollapsibleMenuView.ItemGroup key="ViewTypeSelection" selectedKeys={[this.state.displayType]} onChange={this.handleDisplayTypeChange}>\n          <CollapsibleMenuView.Item\n            icon={<IconTable />}\n            text="Table View"\n            key="tableView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'tableView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconFlowsheet />}\n            text="Expanded View"\n            key="expandedView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'expandedView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconVisualization />}\n            text="Trending View"\n            key="trendingView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'trendingView\'}\n            isDisabled\n          />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider3" />\n        <CollapsibleMenuView.Item icon={<IconSend />} text="Send Message" key="send" isIconOnly />\n        <CollapsibleMenuView.ItemGroup key="messageActionGroup">\n          <CollapsibleMenuView.Item icon={<IconPrinter />} text="Print Message" key="print" isIconOnly />\n          <CollapsibleMenuView.Item icon={<IconFolder />} text="Move Message to Folder..." key="move" isIconOnly isDisabled />\n          <CollapsibleMenuView.Item icon={<IconTrash />} text="Trash Message" key="trash" isIconOnly />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider4" />\n        <CollapsibleMenuView.Item text="Button 1" key="button1" />\n        <CollapsibleMenuView.Item text="Button 2" key="button2" isDisabled />\n        <CollapsibleMenuView.Item text="Button 3" key="button3" />\n        <CollapsibleMenuView.Item text="Button 4" key="button4" />\n      </CollapsibleMenuView>\n    );\n  }\n}\n\nexport default CollapsibleMenuViewDemo;\n'},3657:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(0)),s=l(t(911)),o=l(t(2203)),a=t(2204),u=l(t(2205)),r=l(t(2206)),d=l(t(2207)),c=l(t(2208)),p=l(t(2209)),h=l(t(2215)),m=function(){return i.default.createElement(s.default,{packageName:a.name,readme:o.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(a.name),examples:[{title:"CollapsibleMenuView Example",example:i.default.createElement(p.default,null),source:h.default}],propsTables:[{componentName:"CollapsibleMenuView",componentSrc:u.default},{componentName:"CollapsibleMenuView.Item",componentSrc:r.default},{componentName:"CollapsibleMenuView.ItemGroup",componentSrc:d.default},{componentName:"CollapsibleMenuView.Toggle",componentSrc:c.default}]})};n.default=m},923:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=u(t(0)),i=u(t(2)),s=u(t(4)),o=u(t(1092)),a=u(t(1093));function u(e){return e&&e.__esModule?e:{default:e}}function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}function d(e,n){if(null==e)return{};var t,l,i=function(e,n){if(null==e)return{};var t,l,i={},s=Object.keys(e);for(l=0;l<s.length;l++)t=s[l],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)t=s[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=s.default.bind(o.default),p={checked:i.default.bool,defaultChecked:i.default.bool,id:i.default.string,inputAttrs:i.default.object,disabled:i.default.bool,isInline:i.default.bool,isLabelHidden:i.default.bool,labelText:i.default.node.isRequired,labelTextAttrs:i.default.object,name:i.default.string,onBlur:i.default.func,onChange:i.default.func,onFocus:i.default.func,value:i.default.string},h={checked:void 0,defaultChecked:void 0,id:void 0,inputAttrs:{},disabled:!1,isInline:!1,isLabelHidden:!1,labelTextAttrs:{},name:null,onBlur:void 0,onChange:void 0,onFocus:void 0,value:void 0},m=function(e){var n=e.checked,t=e.defaultChecked,i=e.inputAttrs,s=e.id,o=e.disabled,u=e.isInline,p=e.isLabelHidden,h=e.labelText,m=e.labelTextAttrs,f=e.name,b=e.onBlur,C=e.onChange,g=e.onFocus,y=e.value,w=d(e,["checked","defaultChecked","inputAttrs","id","disabled","isInline","isLabelHidden","labelText","labelTextAttrs","name","onBlur","onChange","onFocus","value"]),v=r({},i);void 0!==n?v.checked=n:v.defaultChecked=t;var I=c(["checkbox",{"is-inline":u},w.className]),M=c(["label",{"is-disabled":o},{"is-mobile":a.default.isConsideredMobileDevice()},m.className]),x=c(["native-input",i.className]),k=c(["label-text",{"is-hidden":p},{"is-mobile":a.default.isConsideredMobileDevice()}]),O=null;return p?(v["aria-label"]=h,O=l.default.createElement("span",r({},m,{className:k}))):O=l.default.createElement("span",r({},m,{className:k}),h),l.default.createElement("div",r({},w,{className:I}),l.default.createElement("label",{htmlFor:s,className:M},l.default.createElement("input",r({},v,{type:"checkbox",id:s,disabled:o,name:f,value:y,onChange:C,onFocus:g,onBlur:b,className:x})),O))};m.propTypes=p,m.defaultProps=h,m.isCheckbox=!0;var f=m;n.default=f}}]);
//# sourceMappingURL=73-9e089155dba2f0c36232.js.map