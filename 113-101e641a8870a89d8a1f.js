(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{1331:function(e){e.exports=JSON.parse('{"_from":"terra-clinical-onset-picker@^4.0.0","_id":"terra-clinical-onset-picker@4.4.0","_inBundle":false,"_integrity":"sha512-5BAdgOxWuiSsw7+JczVbbczyqxXa26XWuQBn+I+o6e9LjAuMXHFyh/vGPCjfIjINbTSZb6Q5Cdn3dPB9Byjt7w==","_location":"/terra-clinical-onset-picker","_phantomChildren":{"classnames":"2.2.6","commander":"2.20.0","fs-extra":"7.0.1","glob":"7.1.4","intl":"1.2.5","lodash.startcase":"4.4.0","moment":"2.24.0","prop-types":"15.7.2","react-intl":"2.9.0","react-onclickoutside":"6.8.0","react-portal":"4.2.0","resize-observer-polyfill":"1.5.1","terra-button":"3.19.0","terra-doc-template":"2.15.0","terra-form-input":"2.21.0","terra-hookshot":"5.13.0","terra-icon":"3.16.0"},"_requested":{"type":"range","registry":true,"raw":"terra-clinical-onset-picker@^4.0.0","name":"terra-clinical-onset-picker","escapedName":"terra-clinical-onset-picker","rawSpec":"^4.0.0","saveSpec":null,"fetchSpec":"^4.0.0"},"_requiredBy":["/"],"_resolved":"https://registry.npmjs.org/terra-clinical-onset-picker/-/terra-clinical-onset-picker-4.4.0.tgz","_shasum":"c90c63a4c33ce5f33440a8f6bf9c24e8b77c8f01","_spec":"terra-clinical-onset-picker@^4.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-clinical/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","mockdate":"^2.0.2","moment":"^2.22.2","prop-types":"^15.5.8","terra-breakpoints":"^2.0.0","terra-date-picker":"^3.0.0","terra-doc-template":"^2.0.0","terra-form-field":"^3.0.0","terra-form-fieldset":"^2.0.0","terra-form-input":"^2.0.0","terra-form-select":"^5.0.0","terra-i18n":"^3.0.0"},"deprecated":false,"description":"The terra-clinical-onset-picker component provides users a way to enter or select an approximate date for use in onset scenarios.","homepage":"https://github.com/cerner/terra-clinical#readme","keywords":["Cerner","Terra","Clinical","Form","UI","terra-clinical-onset-picker","Date","onset"],"license":"Apache-2.0","main":"lib/OnsetPicker.js","name":"terra-clinical-onset-picker","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-clinical.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"4.4.0"}')},1332:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PrecisionOptions=t.GranularityOptions=t.AgeUnits=t.default=void 0;var a=h(n(0)),i=h(n(2)),r=h(n(913)),s=h(n(4)),l=h(n(1065)),o=h(n(330)),d=h(n(1333)),u=h(n(918)),c=h(n(349)),p=h(n(2196)),f=h(n(2197));function h(e){return e&&e.__esModule?e:{default:e}}function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function y(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var D=s.default.bind(f.default),P={WEEKS:"weeks",MONTHS:"months",YEARS:"years"};t.AgeUnits=P;var S={AGE:"age",YEAR:"year",MONTH:"month",DATE:"date"};t.GranularityOptions=S;var T=p.default.PrecisionOptions;t.PrecisionOptions=T;var M={ageUnit:i.default.oneOf(Object.values(P)),birthdate:i.default.string.isRequired,granularity:i.default.oneOf(Object.values(S)),id:i.default.string.isRequired,precision:i.default.oneOf(Object.values(T)),precisionSet:i.default.arrayOf(i.default.oneOf(Object.values(T))),onsetDate:i.default.string,onsetOnChange:i.default.func,legend:i.default.string,isLegendHidden:i.default.bool},A={intl:function(e){if(void 0===e.intl)return new Error("Please add locale prop to Base component to load translations")}},_=function(e){function t(e){var n,a,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(i=v(t).call(this,e))||"object"!==g(i)&&"function"!=typeof i?O(a):i).changeGranularity=n.changeGranularity.bind(O(n)),n.changePrecision=n.changePrecision.bind(O(n)),n.changeAge=n.changeAge.bind(O(n)),n.changeAgeUnit=n.changeAgeUnit.bind(O(n)),n.changeYear=n.changeYear.bind(O(n)),n.changeMonth=n.changeMonth.bind(O(n)),n.changeDate=n.changeDate.bind(O(n)),n.handleOnsetUpdate=n.handleOnsetUpdate.bind(O(n)),s=n.props.ageUnit?{age:n.props.onsetDate?(0,r.default)(n.props.onsetDate).diff((0,r.default)(n.props.birthdate),n.props.ageUnit):void 0,ageUnit:n.props.ageUnit}:p.default.onsetToAge(n.props.birthdate,(0,r.default)(n.props.onsetDate)),n.state={granularity:n.props.granularity,precision:n.props.precision,onsetDate:n.props.onsetDate?(0,r.default)(n.props.onsetDate):void 0,age:s.age,ageUnit:s.ageUnit},n}var n,i,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,a.default.Component),n=t,(i=[{key:"changeGranularity",value:function(e){var t=this;e===S.AGE?this.setState(function(n){var a=p.default.onsetToAge(t.props.birthdate,n.onsetDate);return{granularity:e,age:a.age,ageUnit:a.ageUnit,onsetDate:(0,r.default)(t.props.birthdate).add(a.age,a.ageUnit)}},this.handleOnsetUpdate):this.setState({granularity:e},this.handleOnsetUpdate)}},{key:"changePrecision",value:function(e){this.setState({precision:e},this.handleOnsetUpdate)}},{key:"changeAge",value:function(e){var t=this,n=Number(e.target.value);this.setState(function(e){var a=Number.isInteger(n)&&e.ageUnit?(0,r.default)(t.props.birthdate).add(n,e.ageUnit):void 0,i=a&&a>=(0,r.default)(t.props.birthdate)&&a<=(0,r.default)();return{age:n,onsetDate:i?a:void 0}},this.handleOnsetUpdate)}},{key:"changeAgeUnit",value:function(e){var t=this;this.setState(function(n){var a=Number.isInteger(n.age)&&e?(0,r.default)(t.props.birthdate).add(n.age,e):void 0,i=a&&a>=(0,r.default)(t.props.birthdate)&&a<=(0,r.default)();return{ageUnit:e,onsetDate:i?a:void 0}},this.handleOnsetUpdate)}},{key:"changeYear",value:function(e){var t=this;this.setState(function(n){var a=n.onsetDate?n.onsetDate.year(e):(0,r.default)().year(e),i=p.default.allowedMonths(t.context.intl,t.props.birthdate,a);return 0===i.filter(function(e){return parseInt(e.value,10)===a.month()}).length&&(a=(0,r.default)(a).month(i[0].value)),{onsetDate:a}},this.handleOnsetUpdate)}},{key:"changeMonth",value:function(e){this.setState(function(t){return{onsetDate:t.onsetDate?t.onsetDate.month(e):(0,r.default)().month(e)}},this.handleOnsetUpdate)}},{key:"changeDate",value:function(e,t){""===t?this.setState({onsetDate:void 0},this.handleOnsetUpdate):this.setState({onsetDate:(0,r.default)(t)},this.handleOnsetUpdate)}},{key:"handleOnsetUpdate",value:function(){if(void 0!==this.props.onsetOnChange){var e={precision:this.state.precision,granularity:this.state.granularity,onsetDate:this.state.onsetDate?this.state.onsetDate.format("YYYY-MM-DD"):""};this.state.granularity===S.AGE&&(e.ageUnit=this.state.ageUnit),this.props.onsetOnChange(e)}}},{key:"render",value:function(){var e=this.props,t=(e.ageUnit,e.birthdate,e.granularity,e.precision,e.precisionSet,e.onsetDate,e.onsetOnChange,e.legend),n=e.isLegendHidden,i=b(e,["ageUnit","birthdate","granularity","precision","precisionSet","onsetDate","onsetOnChange","legend","isLegendHidden"]),s=this.context.intl,f=null;this.state.precision!==T.UNKNOWN&&(f=a.default.createElement(c.default,{className:D("field-inline","granularity"),defaultValue:this.state.granularity,isLabelHidden:!0,label:s.formatMessage({id:"Terra.onsetPicker.granularityLabel"}),labelAttrs:{id:"".concat(this.props.id,"-granularity-select-label")},onChange:this.changeGranularity,placeholder:s.formatMessage({id:"Terra.onsetPicker.granularity"}),selectAttrs:{"aria-labelledby":"".concat(this.props.id,"-granularity-select-label")},selectId:"".concat(this.props.id,"-granularity-select")},a.default.createElement(c.default.Option,{value:S.AGE,display:s.formatMessage({id:"Terra.onsetPicker.age"}),key:S.AGE}),a.default.createElement(c.default.Option,{value:S.YEAR,display:s.formatMessage({id:"Terra.onsetPicker.year"}),key:S.YEAR}),a.default.createElement(c.default.Option,{value:S.MONTH,display:s.formatMessage({id:"Terra.onsetPicker.month"}),key:S.MONTH}),a.default.createElement(c.default.Option,{value:S.DATE,display:s.formatMessage({id:"Terra.onsetPicker.date"}),key:S.DATE})));var h=null,g=null;this.state.granularity===S.AGE&&(h=a.default.createElement(u.default,{className:D("field-inline","age"),defaultValue:this.state.age,inputAttrs:{type:"number",min:0,max:p.default.allowedAge(this.props.birthdate,this.state.ageUnit),step:1,"aria-labelledby":"".concat(this.props.id,"-age-input-label")},inputId:"".concat(this.props.id,"-age-input"),isLabelHidden:!0,label:s.formatMessage({id:"Terra.onsetPicker.ageLabel"}),labelAttrs:{id:"".concat(this.props.id,"-age-input-label")},onChange:this.changeAge}),g=a.default.createElement(c.default,{className:D("field-inline","age-unit"),defaultValue:this.state.ageUnit,isLabelHidden:!0,label:s.formatMessage({id:"Terra.onsetPicker.agePrecisionLabel"}),labelAttrs:{id:"".concat(this.props.id,"-age-unit-select-label")},onChange:this.changeAgeUnit,placeholder:s.formatMessage({id:"Terra.onsetPicker.agePrecision"}),selectAttrs:{"aria-labelledby":"".concat(this.props.id,"-age-unit-select-label")},selectId:"".concat(this.props.id,"-age-unit-select")},p.default.allowedAgeUnits(this.props.birthdate,s).map(function(e){return a.default.createElement(c.default.Option,{value:e.value,display:e.display,key:e.value})})));var y=null;this.state.granularity===S.MONTH&&(y=a.default.createElement(c.default,{className:D("field-inline","month"),value:this.state.onsetDate?this.state.onsetDate.month().toString():void 0,label:s.formatMessage({id:"Terra.onsetPicker.monthLabel"}),labelAttrs:{id:"".concat(this.props.id,"-month-select-label")},isLabelHidden:!0,onChange:this.changeMonth,placeholder:s.formatMessage({id:"Terra.onsetPicker.month"}),selectAttrs:{"aria-labelledby":"".concat(this.props.id,"-month-select-label")},selectId:"".concat(this.props.id,"-month-select")},p.default.allowedMonths(s,this.props.birthdate,this.state.onsetDate).map(function(e){return a.default.createElement(c.default.Option,{value:e.value,display:e.display,key:e.value})})));var v=null;this.state.granularity!==S.YEAR&&this.state.granularity!==S.MONTH||(v=a.default.createElement(c.default,{className:D("field-inline","year"),value:this.state.onsetDate?this.state.onsetDate.year().toString():void 0,label:s.formatMessage({id:"Terra.onsetPicker.yearLabel"}),labelAttrs:{id:"".concat(this.props.id,"-year-select-label")},isLabelHidden:!0,onChange:this.changeYear,placeholder:s.formatMessage({id:"Terra.onsetPicker.year"}),selectAttrs:{"aria-labelledby":"".concat(this.props.id,"-year-select-label")},selectId:"".concat(this.props.id,"-year-select")},p.default.allowedYears(this.props.birthdate).map(function(e){return a.default.createElement(c.default.Option,{value:e.value,display:e.display,key:e.value})})));var O=null;return this.state.granularity===S.DATE&&(O=a.default.createElement(o.default,{className:D("field-inline"),isLabelHidden:!0,label:s.formatMessage({id:"Terra.onsetPicker.dateLabel"}),labelAttrs:{id:"".concat(this.props.id,"-date-input-label")}},a.default.createElement(l.default,{inputAttributes:{"aria-labelledby":"".concat(this.props.id,"-date-input-label")},onChange:this.changeDate,minDate:this.props.birthdate,maxDate:(0,r.default)().format("YYYY-MM-DD"),selectedDate:this.state.onsetDate?this.state.onsetDate.format("YYYY-MM-DD"):void 0,name:"".concat(this.props.id,"-date-input")}))),a.default.createElement("div",m({id:this.props.id},i),a.default.createElement(d.default,{className:D("fieldset"),legend:t,isLegendHidden:n},a.default.createElement(c.default,{className:D("field-inline","precision"),defaultValue:this.state.precision,label:s.formatMessage({id:"Terra.onsetPicker.precisionLabel"}),labelAttrs:{id:"".concat(this.props.id,"-precision-select-label")},isLabelHidden:!0,onChange:this.changePrecision,placeholder:s.formatMessage({id:"Terra.onsetPicker.precision"}),selectAttrs:{"aria-labelledby":"".concat(this.props.id,"-precision-select-label")},selectId:"".concat(this.props.id,"-precision-select")},p.default.allowedPrecisions(s,this.props.precisionSet).map(function(e){return a.default.createElement(c.default.Option,{value:e.value,display:e.display,key:e.value})})),f,this.state.precision!==T.UNKNOWN&&a.default.createElement("div",null,h,g,y,v,O)))}}])&&y(n.prototype,i),s&&y(n,s),t}();_.propTypes=M,_.defaultProps={precisionSet:["on/at","about","before","after","unknown"],isLegendHidden:!1},_.contextTypes=A;var w=_;t.default=w},1333:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=l(n(0)),i=l(n(2)),r=l(n(4)),s=l(n(1334));function l(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.default.bind(s.default),c={children:i.default.node,help:i.default.node,legend:i.default.string,legendAttrs:i.default.object,required:i.default.bool,isLegendHidden:i.default.bool},p=function(e){var t=e.children,n=e.help,i=e.legend,r=e.legendAttrs,s=e.isLegendHidden,l=e.required,c=d(e,["children","help","legend","legendAttrs","isLegendHidden","required"]),p=u(["fieldset",{"fieldset-required":l},c.className]),f=u(["legend",r.className,{"legend-visually-hidden":s}]);return a.default.createElement("fieldset",o({},c,{className:p}),i&&a.default.createElement("legend",o({},r,{className:f}),i),n&&a.default.createElement("small",{className:u("help-text"),tabIndex:"-1"},n),a.default.createElement("div",{className:u("fieldset-children")},t))};p.propTypes=c,p.defaultProps={legendAttrs:{},required:!1,isLegendHidden:!1};var f=p;t.default=f},1334:function(e,t,n){e.exports={fieldset:"Fieldset-module__fieldset___3yrCn","fieldset-required":"Fieldset-module__fieldset-required___1IAiP",legend:"Fieldset-module__legend___2Uasm","legend-visually-hidden":"Fieldset-module__legend-visually-hidden___1ssH9","help-text":"Fieldset-module__help-text___2Bc3P","fieldset-children":"Fieldset-module__fieldset-children___3Z4XY"}},2179:function(e,t,n){"use strict";n.r(t),t.default="# Terra Clinical Onset Picker\n\nThe terra-clinical-onset-picker component provides users a way to enter or select an approximate date for use in onset scenarios. The onset date is limited to occurring after the birth date supplied. For `AGE` granularity, the age input has a maximum of `8` for `Week(s)` unit, and `24` for `Month(s)` unit. The user is expected to use `Month(s)` and `Year(s)` respectively for larger values.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-clinical-onset-picker`\n\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n* [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)**\n* [Localization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n\n** This component does not support Arabic translations\n"},2180:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport classNames from 'classnames/bind';\nimport DatePicker from 'terra-date-picker';\nimport Field from 'terra-form-field';\nimport FieldSet from 'terra-form-fieldset';\nimport InputField from 'terra-form-input/lib/InputField';\nimport SelectField from 'terra-form-select/lib/SelectField';\nimport OnsetUtils from './OnsetUtils';\nimport styles from './OnsetPicker.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst AgeUnits = {\n  WEEKS: 'weeks',\n  MONTHS: 'months',\n  YEARS: 'years',\n};\n\nconst GranularityOptions = {\n  AGE: 'age',\n  YEAR: 'year',\n  MONTH: 'month',\n  DATE: 'date',\n};\n\nconst { PrecisionOptions } = OnsetUtils;\n\nconst DATE_FORMAT = 'YYYY-MM-DD';\n\nconst propTypes = {\n  /**\n   * The date unit of the age value. One of `weeks`, `months`, or `years`.\n   */\n  ageUnit: PropTypes.oneOf(Object.values(AgeUnits)),\n\n  /**\n   * The ISO 8601 **DATE ONLY** string representation of the birth date to calculate an onset date for the `age` precision.\n   * Also limits the earliest possible date that can be selected for an onset date for `year`, `month`, and `date` precision.\n   */\n  birthdate: PropTypes.string.isRequired,\n\n  /**\n   * The granularity of the onset date. One of `age`, `year`, `month`, or `date` is accepted.\n   */\n  granularity: PropTypes.oneOf(Object.values(GranularityOptions)),\n\n  /**\n   * The id of the onset picker. Used as the base for other required id/name in sub-components.\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * The precision of the onset date. This should be one of precisions passed to the precisionSet prop.\n   * One of `on/at`, `about`, `before`, `after`, or `unknown`.\n   */\n  precision: PropTypes.oneOf(Object.values(PrecisionOptions)),\n\n  /**\n   * The set of precisions that can be used with the onset picker.\n   * Combination of `on/at`, `about`, `before`, `after`, and `unknown`.\n   * Order of precisions determines order in precision select.\n   */\n  precisionSet: PropTypes.arrayOf(PropTypes.oneOf(Object.values(PrecisionOptions))),\n\n  /**\n   * The ISO 8601 **DATE ONLY** string representation of the onset date to view/modify.\n   */\n  onsetDate: PropTypes.string,\n\n  /**\n   * A callback function to execute when any value of the onsetDate is changed.\n   * The first parameter is a Object that contains `precision`, `granularity`, `onsetDate`, and `ageUnit`.\n   * `ageUnit` is only present if the granularity is 'age'.\n   */\n  onsetOnChange: PropTypes.func,\n\n  /**\n   * Legend for the Onset Picker field group.\n   */\n  legend: PropTypes.string,\n\n  /**\n   * Whether or not the legend is visible. Use this props to hide a legend while still creating it on the DOM for accessibility.\n   */\n  isLegendHidden: PropTypes.bool,\n};\n\nconst defaultProps = {\n  precisionSet: [\n    'on/at',\n    'about',\n    'before',\n    'after',\n    'unknown',\n  ],\n  isLegendHidden: false,\n};\n\nconst contextTypes = {\n  /* eslint-disable consistent-return */\n  intl: (context) => {\n    if (context.intl === undefined) {\n      return new Error('Please add locale prop to Base component to load translations');\n    }\n  },\n};\n\nclass OnsetPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeGranularity = this.changeGranularity.bind(this);\n    this.changePrecision = this.changePrecision.bind(this);\n    this.changeAge = this.changeAge.bind(this);\n    this.changeAgeUnit = this.changeAgeUnit.bind(this);\n    this.changeYear = this.changeYear.bind(this);\n    this.changeMonth = this.changeMonth.bind(this);\n    this.changeDate = this.changeDate.bind(this);\n    this.handleOnsetUpdate = this.handleOnsetUpdate.bind(this);\n\n    let ageValues;\n    if (this.props.ageUnit) {\n      ageValues = {\n        age: this.props.onsetDate ? moment(this.props.onsetDate).diff(moment(this.props.birthdate), this.props.ageUnit) : undefined,\n        ageUnit: this.props.ageUnit,\n      };\n    } else {\n      ageValues = OnsetUtils.onsetToAge(this.props.birthdate, moment(this.props.onsetDate));\n    }\n\n    this.state = {\n      granularity: this.props.granularity,\n      precision: this.props.precision,\n      onsetDate: this.props.onsetDate ? moment(this.props.onsetDate) : undefined,\n      age: ageValues.age,\n      ageUnit: ageValues.ageUnit,\n    };\n  }\n\n  /**\n   * Change state for granularity\n   *\n   * @param {granularity} - New granularity value\n   */\n  changeGranularity(granularity) {\n    if (granularity === GranularityOptions.AGE) { // Calculate age values and update onsetDate to match age calculation\n      this.setState((prevState) => {\n        const ageValues = OnsetUtils.onsetToAge(this.props.birthdate, prevState.onsetDate);\n\n        return {\n          granularity,\n          age: ageValues.age,\n          ageUnit: ageValues.ageUnit,\n          onsetDate: moment(this.props.birthdate).add(ageValues.age, ageValues.ageUnit),\n        };\n      }, this.handleOnsetUpdate);\n    } else {\n      this.setState({ granularity }, this.handleOnsetUpdate);\n    }\n  }\n\n  /**\n   * Change state for precision\n   *\n   * @param {precision} - New precision value\n   */\n  changePrecision(precision) {\n    this.setState({ precision }, this.handleOnsetUpdate);\n  }\n\n  /**\n   * Change state for the age when using AGE granularity, and update onset date\n   *\n   * @param {event} - Triggered change event\n   */\n  changeAge(event) {\n    const age = Number(event.target.value);\n\n    this.setState((prevState) => {\n      // Check if date can be calculated\n      const ageDate = Number.isInteger(age) && prevState.ageUnit\n        ? moment(this.props.birthdate).add(age, prevState.ageUnit) : undefined;\n      // Check if date is valid\n      const validDate = ageDate && ageDate >= moment(this.props.birthdate) && ageDate <= moment();\n\n      return {\n        age,\n        onsetDate: validDate ? ageDate : undefined,\n      };\n    }, this.handleOnsetUpdate);\n  }\n\n  /**\n   * Change state for age unit when using AGE granularity, and update onset date\n   *\n   * @param {ageUnit} - New ageUnit\n   */\n  changeAgeUnit(ageUnit) {\n    this.setState((prevState) => {\n      // Check if date can be calculated\n      const ageDate = Number.isInteger(prevState.age) && ageUnit\n        ? moment(this.props.birthdate).add(prevState.age, ageUnit) : undefined;\n      // Check if date is valid\n      const validDate = ageDate && ageDate >= moment(this.props.birthdate) && ageDate <= moment();\n\n      return {\n        ageUnit,\n        onsetDate: validDate ? ageDate : undefined,\n      };\n    }, this.handleOnsetUpdate);\n  }\n\n  /**\n   * Update onset date when year changes\n   *\n   * @param {year} - New year value\n   */\n  changeYear(year) {\n    this.setState((prevState) => {\n      let newDate = prevState.onsetDate ? prevState.onsetDate.year(year) : moment().year(year);\n      const newMonths = OnsetUtils.allowedMonths(this.context.intl, this.props.birthdate, newDate);\n\n      // Check if new onset month is available, otherwise change month to first possible month\n      if (newMonths.filter(month => parseInt(month.value, 10) === newDate.month()).length === 0) {\n        newDate = moment(newDate).month(newMonths[0].value);\n      }\n\n      return { onsetDate: newDate };\n    }, this.handleOnsetUpdate);\n  }\n\n  /**\n   * Update onset date when month changes\n   *\n   * @param {month} - New month value\n   */\n  changeMonth(month) {\n    this.setState(prevState => ({\n      onsetDate: prevState.onsetDate ? prevState.onsetDate.month(month) : moment().month(month),\n    }), this.handleOnsetUpdate);\n  }\n\n  /**\n   * Update onset date when date changes\n   *\n   * @param {event} - Triggered change event\n   * @param {date} - New date value\n   */\n  changeDate(event, date) {\n    if (date === '') {\n      this.setState({ onsetDate: undefined }, this.handleOnsetUpdate);\n    } else {\n      this.setState({ onsetDate: moment(date) }, this.handleOnsetUpdate);\n    }\n  }\n\n  /**\n   * Trigger supplied callback function with an object of the current state data\n   */\n  handleOnsetUpdate() {\n    if (this.props.onsetOnChange === undefined) {\n      return;\n    }\n\n    const onsetObject = {\n      precision: this.state.precision,\n      granularity: this.state.granularity,\n      onsetDate: this.state.onsetDate ? this.state.onsetDate.format(DATE_FORMAT) : '',\n    };\n\n    if (this.state.granularity === GranularityOptions.AGE) {\n      onsetObject.ageUnit = this.state.ageUnit;\n    }\n\n    this.props.onsetOnChange(onsetObject);\n  }\n\n  render() {\n    const {\n      ageUnit,\n      birthdate,\n      granularity,\n      precision,\n      precisionSet,\n      onsetDate,\n      onsetOnChange,\n      legend,\n      isLegendHidden,\n      ...customProps\n    } = this.props;\n\n    const { intl } = this.context;\n\n    let granularitySelect = null;\n    if (this.state.precision !== PrecisionOptions.UNKNOWN) {\n      granularitySelect = (\n        <SelectField\n          className={cx('field-inline', 'granularity')}\n          defaultValue={this.state.granularity}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.granularityLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-granularity-select-label`,\n          }}\n          onChange={this.changeGranularity}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.granularity' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-granularity-select-label`,\n          }}\n          selectId={`${this.props.id}-granularity-select`}\n        >\n          <SelectField.Option\n            value={GranularityOptions.AGE}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.age' })}\n            key={GranularityOptions.AGE}\n          />\n          <SelectField.Option\n            value={GranularityOptions.YEAR}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.year' })}\n            key={GranularityOptions.YEAR}\n          />\n          <SelectField.Option\n            value={GranularityOptions.MONTH}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.month' })}\n            key={GranularityOptions.MONTH}\n          />\n          <SelectField.Option\n            value={GranularityOptions.DATE}\n            display={intl.formatMessage({ id: 'Terra.onsetPicker.date' })}\n            key={GranularityOptions.DATE}\n          />\n        </SelectField>\n      );\n    }\n\n    let ageInput = null;\n    let ageUnitSelect = null;\n    if (this.state.granularity === GranularityOptions.AGE) {\n      ageInput = (\n        <InputField\n          className={cx('field-inline', 'age')}\n          defaultValue={this.state.age}\n          inputAttrs={{\n            type: 'number',\n            min: 0,\n            max: OnsetUtils.allowedAge(this.props.birthdate, this.state.ageUnit),\n            step: 1,\n            'aria-labelledby': `${this.props.id}-age-input-label`,\n          }}\n          inputId={`${this.props.id}-age-input`}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.ageLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-age-input-label`,\n          }}\n          onChange={this.changeAge}\n        />\n      );\n\n      ageUnitSelect = (\n        <SelectField\n          className={cx('field-inline', 'age-unit')}\n          defaultValue={this.state.ageUnit}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.agePrecisionLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-age-unit-select-label`,\n          }}\n          onChange={this.changeAgeUnit}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.agePrecision' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-age-unit-select-label`,\n          }}\n          selectId={`${this.props.id}-age-unit-select`}\n        >\n          {OnsetUtils.allowedAgeUnits(this.props.birthdate, intl)\n            .map(unit => <SelectField.Option value={unit.value} display={unit.display} key={unit.value} />)}\n        </SelectField>\n      );\n    }\n\n    let monthSelect = null;\n    if (this.state.granularity === GranularityOptions.MONTH) {\n      monthSelect = (\n        <SelectField\n          className={cx('field-inline', 'month')}\n          value={this.state.onsetDate ? this.state.onsetDate.month().toString() : undefined}\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.monthLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-month-select-label`,\n          }}\n          isLabelHidden\n          onChange={this.changeMonth}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.month' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-month-select-label`,\n          }}\n          selectId={`${this.props.id}-month-select`}\n        >\n          {OnsetUtils.allowedMonths(intl, this.props.birthdate, this.state.onsetDate)\n            .map(month => <SelectField.Option value={month.value} display={month.display} key={month.value} />)}\n        </SelectField>\n      );\n    }\n\n    let yearSelect = null;\n    if (this.state.granularity === GranularityOptions.YEAR || this.state.granularity === GranularityOptions.MONTH) {\n      yearSelect = (\n        <SelectField\n          className={cx('field-inline', 'year')}\n          value={this.state.onsetDate ? this.state.onsetDate.year().toString() : undefined}\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.yearLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-year-select-label`,\n          }}\n          isLabelHidden\n          onChange={this.changeYear}\n          placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.year' })}\n          selectAttrs={{\n            'aria-labelledby': `${this.props.id}-year-select-label`,\n          }}\n          selectId={`${this.props.id}-year-select`}\n        >\n          {OnsetUtils.allowedYears(this.props.birthdate)\n            .map(year => <SelectField.Option value={year.value} display={year.display} key={year.value} />)}\n        </SelectField>\n      );\n    }\n\n    let dateSelect = null;\n    if (this.state.granularity === GranularityOptions.DATE) {\n      dateSelect = (\n        <Field\n          className={cx('field-inline')}\n          isLabelHidden\n          label={intl.formatMessage({ id: 'Terra.onsetPicker.dateLabel' })}\n          labelAttrs={{\n            id: `${this.props.id}-date-input-label`,\n          }}\n        >\n          <DatePicker\n            inputAttributes={{\n              'aria-labelledby': `${this.props.id}-date-input-label`,\n            }}\n            onChange={this.changeDate}\n            minDate={this.props.birthdate}\n            maxDate={moment().format(DATE_FORMAT)}\n            selectedDate={this.state.onsetDate ? this.state.onsetDate.format(DATE_FORMAT) : undefined}\n            name={`${this.props.id}-date-input`}\n          />\n        </Field>\n      );\n    }\n\n    return (\n      <div id={this.props.id} {...customProps}>\n        <FieldSet className={cx('fieldset')} legend={legend} isLegendHidden={isLegendHidden}>\n          {/* Precision */}\n          <SelectField\n            className={cx('field-inline', 'precision')}\n            defaultValue={this.state.precision}\n            label={intl.formatMessage({ id: 'Terra.onsetPicker.precisionLabel' })}\n            labelAttrs={{\n              id: `${this.props.id}-precision-select-label`,\n            }}\n            isLabelHidden\n            onChange={this.changePrecision}\n            placeholder={intl.formatMessage({ id: 'Terra.onsetPicker.precision' })}\n            selectAttrs={{\n              'aria-labelledby': `${this.props.id}-precision-select-label`,\n            }}\n            selectId={`${this.props.id}-precision-select`}\n          >\n            {OnsetUtils.allowedPrecisions(intl, this.props.precisionSet)\n              .map(prec => <SelectField.Option value={prec.value} display={prec.display} key={prec.value} />)}\n          </SelectField>\n\n          {granularitySelect}\n\n          {(this.state.precision !== PrecisionOptions.UNKNOWN) && (\n            <div>\n              {ageInput}\n              {ageUnitSelect}\n              {monthSelect}\n              {yearSelect}\n              {dateSelect}\n            </div>\n          )}\n        </FieldSet>\n      </div>\n    );\n  }\n}\n\nOnsetPicker.propTypes = propTypes;\nOnsetPicker.defaultProps = defaultProps;\nOnsetPicker.contextTypes = contextTypes;\n\nexport default OnsetPicker;\nexport {\n  AgeUnits,\n  GranularityOptions,\n  PrecisionOptions,\n};\n"},2181:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(n(0)),i=s(n(913)),r=s(n(1332));function s(e){return e&&e.__esModule?e:{default:e}}var l=(0,i.default)().subtract(6,"years"),o=function(){return a.default.createElement("div",null,a.default.createElement("p",null,"Birthdate: ".concat(l.format("MM-DD-YYYY"))),a.default.createElement(r.default,{legend:"Onset of symptoms",birthdate:l.format("YYYY-MM-DD"),id:"doogs"}))};t.default=o},2196:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a,i=(a=n(913))&&a.__esModule?a:{default:a};function r(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s={ONAT:"on/at",ABOUT:"about",BEFORE:"before",AFTER:"after",UNKNOWN:"unknown"},l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,a;return t=e,a=[{key:"allowedMonths",value:function(e,t,n){var a=(0,i.default)(t),r=(0,i.default)(),s=n?n.year():(0,i.default)().year(),l=[{value:"0",display:e.formatMessage({id:"Terra.onsetPicker.january"})},{value:"1",display:e.formatMessage({id:"Terra.onsetPicker.february"})},{value:"2",display:e.formatMessage({id:"Terra.onsetPicker.march"})},{value:"3",display:e.formatMessage({id:"Terra.onsetPicker.april"})},{value:"4",display:e.formatMessage({id:"Terra.onsetPicker.may"})},{value:"5",display:e.formatMessage({id:"Terra.onsetPicker.june"})},{value:"6",display:e.formatMessage({id:"Terra.onsetPicker.july"})},{value:"7",display:e.formatMessage({id:"Terra.onsetPicker.august"})},{value:"8",display:e.formatMessage({id:"Terra.onsetPicker.september"})},{value:"9",display:e.formatMessage({id:"Terra.onsetPicker.october"})},{value:"10",display:e.formatMessage({id:"Terra.onsetPicker.november"})},{value:"11",display:e.formatMessage({id:"Terra.onsetPicker.december"})}];return a.year()===s&&(l=l.filter(function(e){return e.value>=a.month()})),r.year()===s&&(l=l.filter(function(e){return e.value<=r.month()})),l}},{key:"allowedYears",value:function(e){var t=(0,i.default)(e).year(),n=(0,i.default)().year();return Array(n-t+1).fill(void 0).map(function(e,n){var a=t+n;return{value:a.toString(),display:a.toString()}})}},{key:"allowedAge",value:function(e,t){var n=(0,i.default)(e).startOf("day"),a=(0,i.default)().startOf("day");switch(t){case"years":return a.diff(n,"years");case"months":var r=a.diff(n,"months");return r>24?24:r;default:var s=a.diff(n,"weeks");return s>8?8:s}}},{key:"allowedAgeUnits",value:function(e,t){var n=(0,i.default)(e).startOf("day"),a=(0,i.default)().startOf("day");if(0===a.diff(n,"weeks"))return null;var r=[{value:"weeks",display:t.formatMessage({id:"Terra.onsetPicker.agePrecisionWeek"})}];return a.diff(n,"months")>0&&r.push({value:"months",display:t.formatMessage({id:"Terra.onsetPicker.agePrecisionMonth"})}),a.diff(n,"years")>0&&r.push({value:"years",display:t.formatMessage({id:"Terra.onsetPicker.agePrecisionYear"})}),r}},{key:"onsetToAge",value:function(e,t){if(void 0===t)return{age:void 0,ageUnit:void 0};var n=(0,i.default)(e).startOf("day"),a=t.startOf("day"),r=a.diff(n,"weeks");return r>8?(r=a.diff(n,"months"))>24?{age:a.diff(n,"years"),ageUnit:"years"}:{age:r,ageUnit:"months"}:{age:r,ageUnit:"weeks"}}},{key:"allowedPrecisions",value:function(e,t){for(var n=[],a=0;a<t.length;a+=1)switch(t[a]){case s.ONAT:n.push({value:s.ONAT,display:e.formatMessage({id:"Terra.onsetPicker.precisionOnAt"})});break;case s.ABOUT:n.push({value:s.ABOUT,display:e.formatMessage({id:"Terra.onsetPicker.precisionAbout"})});break;case s.BEFORE:n.push({value:s.BEFORE,display:e.formatMessage({id:"Terra.onsetPicker.precisionBefore"})});break;case s.AFTER:n.push({value:s.AFTER,display:e.formatMessage({id:"Terra.onsetPicker.precisionAfter"})});break;case s.UNKNOWN:n.push({value:s.UNKNOWN,display:e.formatMessage({id:"Terra.onsetPicker.precisionUnknown"})})}return n}}],(n=null)&&r(t.prototype,n),a&&r(t,a),e}();l.PrecisionOptions=s;var o=l;t.default=o},2197:function(e,t,n){e.exports={age:"OnsetPicker-module__age___aFqPg","field-inline":"OnsetPicker-module__field-inline___QfHYM",fieldset:"OnsetPicker-module__fieldset___1RCi7",precision:"OnsetPicker-module__precision___1nWIm",granularity:"OnsetPicker-module__granularity___1JrO2","age-unit":"OnsetPicker-module__age-unit___Rr1El",month:"OnsetPicker-module__month___pVaYo",year:"OnsetPicker-module__year___3KfTM"}},2198:function(e,t,n){"use strict";n.r(t),t.default="/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport moment from 'moment';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport OnsetPicker from 'terra-clinical-onset-picker/lib/OnsetPicker';\n\nconst birthdate = moment().subtract(6, 'years');\nconst picker = () => (\n  <div>\n    <p>{`Birthdate: ${birthdate.format('MM-DD-YYYY')}`}</p>\n    <OnsetPicker\n      legend=\"Onset of symptoms\"\n      birthdate={birthdate.format('YYYY-MM-DD')}\n      id=\"doogs\"\n    />\n  </div>\n);\n\nexport default picker;\n"},2199:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(n(0)),i=s(n(913)),r=s(n(1332));function s(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(e){var n,a,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(r=d(t).call(this,e))||"object"!==l(r)&&"function"!=typeof r?u(a):r).state={precision:"before",granularity:"year",onsetDate:(0,i.default)().subtract(2,"years").format("YYYY-MM-DD")},n.handleOnset=n.handleOnset.bind(u(n)),n.handleSubmit=n.handleSubmit.bind(u(n)),n}var n,s,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,a.default.Component),n=t,(s=[{key:"handleOnset",value:function(e){this.setState({precision:e.precision,granularity:e.granularity,onsetDate:e.onsetDate,ageUnit:e.ageUnit})}},{key:"handleSubmit",value:function(e){e.preventDefault(),this.setState(function(e){return{submittedData:{precision:e.precision,granularity:e.granularity,onsetDate:e.onsetDate,ageUnit:e.ageUnit}}})}},{key:"render",value:function(){var e=(0,i.default)().subtract(6,"years");return a.default.createElement("form",{onSubmit:this.handleSubmit},a.default.createElement("p",null,"Birthdate: ".concat(e.format("MM-DD-YYYY"))),a.default.createElement(r.default,{birthdate:e.format("YYYY-MM-DD"),granularity:this.state.granularity,id:"doogs-supplied",precision:this.state.precision,precisionSet:["unknown","after","before","on/at"],onsetDate:this.state.onsetDate,legend:"Date of Birth",onsetOnChange:this.handleOnset}),a.default.createElement("button",{type:"submit"},"Submit"),this.state.submittedData&&a.default.createElement("div",null,a.default.createElement("hr",null),a.default.createElement("p",null,"Form was submitted with"),a.default.createElement("p",null,JSON.stringify(this.state.submittedData))))}}])&&o(n.prototype,s),p&&o(n,p),t}();t.default=p},2200:function(e,t,n){"use strict";n.r(t),t.default="/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport moment from 'moment';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport OnsetPicker from 'terra-clinical-onset-picker/lib/OnsetPicker';\n\nclass HandledOnsetExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      precision: 'before',\n      granularity: 'year',\n      onsetDate: moment().subtract(2, 'years').format('YYYY-MM-DD'),\n    };\n\n    this.handleOnset = this.handleOnset.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleOnset(onsetObject) {\n    this.setState({\n      precision: onsetObject.precision,\n      granularity: onsetObject.granularity,\n      onsetDate: onsetObject.onsetDate,\n      ageUnit: onsetObject.ageUnit,\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.setState(prevState => ({\n      submittedData: {\n        precision: prevState.precision,\n        granularity: prevState.granularity,\n        onsetDate: prevState.onsetDate,\n        ageUnit: prevState.ageUnit,\n      },\n    }));\n  }\n\n  render() {\n    const birthdate = moment().subtract(6, 'years');\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <p>{`Birthdate: ${birthdate.format('MM-DD-YYYY')}`}</p>\n        <OnsetPicker\n          birthdate={birthdate.format('YYYY-MM-DD')}\n          granularity={this.state.granularity}\n          id=\"doogs-supplied\"\n          precision={this.state.precision}\n          precisionSet={[\n            'unknown',\n            'after',\n            'before',\n            'on/at',\n          ]}\n          onsetDate={this.state.onsetDate}\n          legend=\"Date of Birth\"\n          onsetOnChange={this.handleOnset}\n        />\n        <button type=\"submit\">Submit</button>\n        {this.state.submittedData && (\n          <div>\n            <hr />\n            <p>Form was submitted with</p>\n            <p>{JSON.stringify(this.state.submittedData)}</p>\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default HandledOnsetExample;\n"},2201:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(n(0)),i=s(n(913)),r=s(n(1332));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){return a.default.createElement(r.default,{birthdate:(0,i.default)().subtract(6,"years").format("YYYY-MM-DD"),id:"onsetlegend",legend:"Date of Birth",isLegendHidden:!0})};t.default=l},3655:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=f(n(0)),i=f(n(911)),r=f(n(2179)),s=n(1331),l=f(n(2180)),o=f(n(2181)),d=f(n(2198)),u=f(n(2199)),c=f(n(2200)),p=f(n(2201));function f(e){return e&&e.__esModule?e:{default:e}}var h=function(){return a.default.createElement(i.default,{packageName:s.name,readme:r.default,srcPath:"https://github.com/cerner/terra-clinical/tree/master/packages/".concat(s.name),examples:[{title:"Default with initialization",example:a.default.createElement(o.default,null),source:d.default},{title:"Onset picker with supplied data and handlers",example:a.default.createElement(u.default,null),source:c.default},{title:"Onset picker with Hidden legend",example:a.default.createElement(p.default,null),source:p.default}],propsTables:[{componentName:"Onset Picker",componentSrc:l.default}]})};t.default=h},918:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n(0)),i=o(n(2)),r=o(n(330)),s=o(n(334)),l=o(n(332));function o(e){return e&&e.__esModule?e:{default:e}}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c={inputId:i.default.string.isRequired,label:i.default.node.isRequired,defaultValue:i.default.oneOfType([i.default.string,i.default.number]),disabled:i.default.bool,error:i.default.node,errorIcon:i.default.element,help:i.default.node,hideRequired:i.default.bool,inputAttrs:i.default.object,isInline:i.default.bool,isInvalid:i.default.bool,isLabelHidden:i.default.bool,labelAttrs:i.default.object,maxWidth:i.default.string,onChange:i.default.func,refCallback:i.default.func,required:i.default.bool,showOptional:i.default.bool,type:i.default.string,value:i.default.oneOfType([i.default.string,i.default.number])},p={defaultValue:void 0,disabled:!1,error:null,errorIcon:a.default.createElement(s.default,null),help:null,hideRequired:!1,inputAttrs:{},isInline:!1,isInvalid:!1,isLabelHidden:!1,labelAttrs:{},onChange:void 0,maxWidth:void 0,refCallback:void 0,required:!1,showOptional:!1,type:void 0,value:void 0},f=function(e){var t,n=e.defaultValue,i=e.disabled,s=e.error,o=e.errorIcon,c=e.help,p=e.hideRequired,f=e.inputAttrs,h=e.inputId,g=e.isInline,m=e.isInvalid,b=e.isLabelHidden,y=e.label,v=e.labelAttrs,O=e.maxWidth,k=e.onChange,D=e.refCallback,P=e.required,S=e.showOptional,T=e.type,M=e.value,A=u(e,["defaultValue","disabled","error","errorIcon","help","hideRequired","inputAttrs","inputId","isInline","isInvalid","isLabelHidden","label","labelAttrs","maxWidth","onChange","refCallback","required","showOptional","type","value"]);c&&s&&m?t="".concat(h,"-error ").concat(h,"-help"):(c&&(t="".concat(h,"-help")),s&&m&&(t="".concat(h,"-error")));var _=T||f.type;return a.default.createElement(r.default,d({label:y,labelAttrs:v,error:s,errorIcon:o,help:c,hideRequired:p,required:P,showOptional:S,isInvalid:m,isInline:g,isLabelHidden:b,htmlFor:h,maxWidth:O},A),a.default.createElement(l.default,d({},f,{disabled:f.disabled||i,id:h,type:_,onChange:k,value:M,defaultValue:n,refCallback:D,"aria-describedby":t})))};f.propTypes=c,f.defaultProps=p;var h=f;t.default=h}}]);
//# sourceMappingURL=113-101e641a8870a89d8a1f.js.map