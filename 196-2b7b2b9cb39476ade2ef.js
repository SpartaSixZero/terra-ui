(window.webpackJsonp=window.webpackJsonp||[]).push([[196,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{1215:function(e){e.exports=JSON.parse('{"_from":"terra-modal-manager@^6.0.0","_id":"terra-modal-manager@6.8.0","_inBundle":false,"_integrity":"sha512-IMLePsKRbt/AQTK9ZNo0UPlkT67jHqxtcq0NXf/eAv3QwjZypBBDmoC+qKobc/a5fhz9iBafMWquuHDOj4K0sg==","_location":"/terra-modal-manager","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-modal-manager@^6.0.0","name":"terra-modal-manager","escapedName":"terra-modal-manager","rawSpec":"^6.0.0","saveSpec":null,"fetchSpec":"^6.0.0"},"_requiredBy":["/","/terra-application","/terra-application-layout"],"_resolved":"https://registry.npmjs.org/terra-modal-manager/-/terra-modal-manager-6.8.0.tgz","_shasum":"d598df836e61c07fdeee990e1dba9a9bdd0b31c7","_spec":"terra-modal-manager@^6.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","terra-abstract-modal":"^3.8.0","terra-slide-group":"^4.6.0"},"deprecated":false,"description":"The ModalManager is a DisclosureManager implementation that presents disclosed content using an AbstractModal.","devDependencies":{"terra-action-header":"^2.0.0","terra-button":"^3.3.0","terra-content-container":"^3.0.0","terra-doc-template":"^2.2.0","terra-form-input":"^2.3.0","terra-form-select":"^5.0.0"},"gitHead":"f763d8f2d030d85d834554d5c2eca6f2917f2eac","homepage":"https://github.com/cerner/terra-framework#readme","keywords":["Cerner","Terra","terra-modal-manager","ModalManager","UI"],"license":"Apache-2.0","main":"lib/ModalManager.js","name":"terra-modal-manager","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","terra-disclosure-manager":"^4.9.0"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"6.8.0"}')},3046:function(e,n,r){"use strict";r.r(n),n.default="# Terra Modal Manager - About\n\nThe ModalManager is a DisclosureManager implementation that presents disclosed content using an AbstractModal.\n\nModalManager provides the ability to handle and navigate stacked disclosures.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-modal-manager`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\n<details>\n<summary>View information on this component's peer dependencies.</summary>\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n| terra-disclosure-manager | ^4.9.0 |\n\n\n</details>\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\n\n### Implementation Requirements\n\nThe ModalManager utilizes the DisclosureManager API to manage disclosure requests. The components provided as children to the ModalManager, and the components disclosed within it, must interface with the ModalManager's context using the `withDisclosureManager()` higher-order component generator provided by the `terra-disclosure-manager` package.\n\nThe ModalManager responds to the `\"modal\"` disclosure type. Components that wish to disclose content using the ModalManager should provide a preferred type of `\"modal\"`. This value is exported from the package as `disclosureType`. Please see the [DisclosureManager documentation](https://engineering.cerner.com/terra-ui/#/components/terra-disclosure-manager/disclosure-manager/about) for a full description of the ModalManager's capabilities.\n\n### Example\n\n```jsx\nimport React from 'react';\nimport Button from 'terra-button';\nimport ModalManager, { disclosureType } from 'terra-modal-manager';\nimport { withDisclosureManager } from 'terra-disclosure-manager';\n\nconst MyModalComponent = withDisclosureManager(({ disclosureManager }) => (\n  <div>\n    <p>I am in the modal!</p>\n    <Button\n      text=\"Dismiss\"\n      onClick={() => {\n        disclosureManager.dismiss();\n      }}\n    />\n  </div>\n));\n\nMyModalComponent.propTypes = {\n  disclosureManager: disclosureManagerShape,\n}\n\nconst MyContentComponent = withDisclosureManager(({ disclosureManager }) => (\n  <div>\n    <p>I am in the body!</p>\n    <Button\n      text=\"Open Modal\"\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: disclosureType,\n          size: 'large',\n          content: {\n            key: 'my-modal-component-instance',\n            component: <MyModalComponent />\n          }\n        });\n      }}\n    />\n  </div>\n));\n\nMyContentComponent.propTypes = {\n  disclosureManager: disclosureManagerShape,\n}\n\nlet MyModalManagerComponent = () => (\n  <ModalManager>\n    <MyContentComponent />\n  </ModalManager>\n);\n\n```\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n\n[1]: https://github.com/cerner/terra-core/tree/master/packages/terra-content-container/docs\n[2]: https://github.com/cerner/terra-core/tree/master/packages/terra-dialog/docs\n"},3047:function(e,n,r){"use strict";r.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport AbstractModal from 'terra-abstract-modal';\nimport SlideGroup from 'terra-slide-group';\nimport DisclosureManager, { availableDisclosureSizes } from 'terra-disclosure-manager';\nimport styles from './ModalManager.module.scss';\n\nconst disclosureType = 'modal';\nexport { disclosureType };\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The components to be rendered in the body of the ModalManager. These components will receive the\n   * disclosure capabilities through the DisclosureManger's context API.\n   */\n  children: PropTypes.node,\n};\n\nconst heightFromSize = {\n  tiny: 240,\n  small: 420,\n  medium: 600,\n  large: 870,\n  huge: 960,\n};\n\nconst widthFromSize = {\n  tiny: 320,\n  small: 640,\n  medium: 960,\n  large: 1280,\n  huge: 1600,\n};\n\nclass ModalManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderModal = this.renderModal.bind(this);\n  }\n\n  renderModal(manager) {\n    const { children, ...customProps } = this.props;\n\n    const containerClassNames = cx([\n      'container',\n      customProps.className,\n    ]);\n\n    const classArray = ['modal-manager'];\n    const isFullscreen = manager.disclosure.isMaximized || manager.disclosure.size === availableDisclosureSizes.FULLSCREEN;\n    if (!isFullscreen) {\n      if (manager.disclosure.dimensions) {\n        classArray.push(`height-${manager.disclosure.dimensions.height}`, `width-${manager.disclosure.dimensions.width}`);\n      } else if (manager.disclosure.size) {\n        classArray.push(`height-${heightFromSize[manager.disclosure.size]}`, `width-${widthFromSize[manager.disclosure.size]}`);\n      }\n    }\n\n    return (\n      <div {...customProps} className={containerClassNames}>\n        {manager.children.components}\n        <AbstractModal\n          isOpen={manager.disclosure.isOpen}\n          isFullscreen={isFullscreen}\n          classNameModal={cx(classArray)}\n          onRequestClose={() => {\n            manager.closeDisclosure();\n          }}\n          closeOnEsc\n          closeOnOutsideClick={false}\n          ariaLabel=\"Modal\"\n        >\n          <SlideGroup items={manager.disclosure.components} isAnimated={!isFullscreen} />\n        </AbstractModal>\n      </div>\n    );\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <DisclosureManager\n        supportedDisclosureTypes={[disclosureType]}\n        render={this.renderModal}\n        trapNestedDisclosureRequests\n      >\n        {children}\n      </DisclosureManager>\n    );\n  }\n}\n\nModalManager.propTypes = propTypes;\n\nexport default ModalManager;\n"},3766:function(e,n,r){"use strict";var a=r(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=a(r(0)),t=a(r(911)),o=r(1215),i=a(r(3046)),c=a(r(3047)),l=function(){return s.default.createElement(t.default,{packageName:o.name,readme:i.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(o.name),propsTables:[{componentSrc:c.default}]})};n.default=l},912:function(e,n){}}]);
//# sourceMappingURL=196-2b7b2b9cb39476ade2ef.js.map