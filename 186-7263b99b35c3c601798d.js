(window.webpackJsonp=window.webpackJsonp||[]).push([[186,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{2570:function(e,n,t){"use strict";t.r(n),n.default="# Validation Functions\n\n*react-final-form* gives you the ability to create your own validation functions. For custom validations, the idea is that a message will be returned if the function finds an error with the form input value, or returns undefined if no errors are detected for the given input value.\n\n**Example validation functions**\n\n```js\nconst required = value => (value ? undefined : 'Required')\n\nconst minLength = value => {\n  const MIN_LENGTH = 3;\n\n  if (value === undefined || value === null) {\n    return 'Empty Strings are not allowed'\n  }\n\n  if (value.length < MIN_LENGTH) {\n    return `String must be at least ${MIN_LENGTH} characters`;\n  }\n\n  return '';\n}\n```\n\nIn order to use them, you just need to provide the validation prop on the react-final-form Field component, and populate the desired input component with the onChange and value provided through the Field validation library, like in the example usage below:\n\n```jsx\nimport { Field } from 'react-final-form';\nimport InputField from 'terra-form-input/lib/InputField';\n\n<Field\n  type=\"text\"\n  name=\"user_name\"\n  validate={required}\n>\n  {({ input, meta, placeholder, ...rest }) => (\n    <InputField\n      {...rest}\n      inputId=\"description\"\n      label=\"Description\"\n      error={meta.error}\n      isInvalid={meta.submitFailed}\n      inputAttrs={{\n        placeholder: 'Description',\n        ...input,\n      }}\n      required\n\n      onChange={(e) => { input.onChange(e.target.value); }}\n      value={input.value}\n    />\n  )}\n</Field>\n```\n\n## Asynchronous Validations\n\nThere maybe times you need to do remote validations such as Unique Username checks. To best handle this scenario with wide browser support, an OnBlurValidation can be added to a component, where the function takes in two parameters: the value of the input, and a callback setError that sets the error status of the input.\n\n**Note**: If you need to run this in IE11, the [transform-async-to-generator](https://www.npmjs.com/package/babel-plugin-transform-async-to-generator) plugin needs to be added to your .babelrc file.\n\n**Example Asynchronous Validation**\n\n```jsx\nconst validateUniqueUser = async (name) => {\n  let response = new Promise((resolve, reject) => {\n    if (name !== 'Unique User') {\n      return resolve('');\n    } else {\n      return resolve('Name is Unavailable');\n    }\n  });\n\n  await response;\n  return response;\n}\n\n```\n\n*Note:* The promise can be any kind of promise, including calls with axios and other libraries.\n\n# Parsing\n\nForm inputs can be parsed to ensure input values follow specific formats. This could be useful when you want to restrict numeric inputs to only allow users to enter in digits, and force formating of phone numbers.\n\n```jsx\nconst normalizePhone = value => {\n  if (!value) {\n    return value\n  };\n\n  const onlyNums = value.replace(/[^\\d]/g, '');\n\n  if (onlyNums.length <= 3) {\n    return onlyNums;\n  }\n\n  else if (onlyNums.length <= 7) {\n    return `(${onlyNums.slice(0, 3)}) ${onlyNums.slice(3)}`;\n  } else {\n    return `(${onlyNums.slice(0, 3)}) ${onlyNums.slice(3, 6)}-${onlyNums.slice(6, 10)}`;\n  }\n}\n\n```\n\nConsult [react-final-form](https://github.com/final-form/react-final-form) for further functionality that can be used.\n\n## FormValidationUtil Class\n\nIn order to make creating form validation functions easier, we have a FormValidationUtil class in the `terra-form-validation` package. It contains the following functions.\n\n#### isUnderMaxLength\n\n```javascript\nFormValidationUtil.isUnderMaxValue(value, maximum)\n```\n\nChecks given value's length against maximum. Returns true if value's length is less than the maximum.\n* `value` is the value string\n* `maximum` is a nonnegative whole number.\n\n\n#### isOverMinLength\n\n```javascript\nFormValidationUtil.isOverMinLength(value, minimum)\n```\n\nChecks given value's length against minimum. Returns true if value's length is greater than the minimum.\n* `value` is the value string\n* `minimum` is a nonnegative whole number.\n\n#### hasNoWhitespace\n\n```javascript\nFormValidationUtil.hasNoWhitespace(value)\n```\n\nChecks given value for extraneous whitespace. return true if there is no whitespace.\n* `value` is the value string\n\n#### containsCharacters\n\n```javascript\nFormValidationUtil.containsCharacters(value, chars)\n```\n\nChecks given value for any string in given array. return true if value does not contain any of them.\n* `value` is the value string\n* `chars` is an array of strings\n\n#### isOverMinValue\n\n```javascript\nFormValidationUtil.isOverMinValue(value, minimum)\n```\n\nChecks given value against a minimum value. Returns true if value is greater then or equal to the minimum\n* `value` is the value string\n* `minimum` is the minimum numeric value\n\n#### isUnderMaxValue\n\n```javascript\nFormValidationUtil.isUnderMaxValue(value, maximum)\n```\n\nChecks given value against a maximum value. Returns true if value is less then or equal to the maximum\n* `value` is the value string\n* `maximum` is the maximum numeric value\n\n#### isPrecise\n\n```javascript\nFormValidationUtil.isPrecise(value, precision)\n```\n\nChecks given value for a specific level of precision. Returns true if value has less than or an equal amount of precision\n* `value` is the value string\n* `precision` is a nonnegative whole number\n\n#### isNonnegative\n\n```javascript\nFormValidationUtil.isNonnegative(value)\n```\n\nChecks given value for if it is a negative value. Returns true if it is nonnegative.\n* `value` is the value string\n"},2571:function(e,n,t){"use strict";var r=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=r(t(331)),i=r(t(20)),u=r(t(24)),l=r(t(25)),s=r(t(26)),o=r(t(31)),m=r(t(27)),d=r(t(1159)),c=r(t(1160)),f=r(t(0)),p=t(926),v=r(t(918)),h=r(t(61)),b=r(t(333));function g(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function y(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?g(t,!0).forEach(function(n){(0,a.default)(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):g(t).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}var F=function(){var e=(0,c.default)(d.default.mark(function e(n){var t;return d.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=new Promise(function(e){return e(n?"TerraUser"!==n?"":"Name is Unavailable":"Required")}),e.next=3,t;case 3:return e.abrupt("return",t);case 4:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}(),w=function(e){function n(e){var t;return(0,i.default)(this,n),(t=(0,l.default)(this,(0,s.default)(n).call(this,e))).state={},t.submitForm=t.submitForm.bind((0,o.default)(t)),t}return(0,m.default)(n,e),(0,u.default)(n,[{key:"submitForm",value:function(e){this.setState({submittedValues:e})}},{key:"renderForm",value:function(e){var n=e.handleSubmit;return f.default.createElement("form",{onSubmit:n},f.default.createElement(p.Field,{name:"user_name",validate:F},function(e){var n=e.input,t=e.meta;return f.default.createElement(v.default,{inputId:"user-name-async",label:"User Name",error:t.error,help:"TerraUser is unavailable. Use this name to test async",isInvalid:t.submitFailed&&void 0!==t.error,onChange:function(e){n.onChange(e.target.value)},inputAttrs:y({},n),value:n.value,required:!0})}),f.default.createElement(h.default,{text:"Submit",type:h.default.Opts.Types.SUBMIT}))}},{key:"render",value:function(){return f.default.createElement(b.default,{marginBottom:"small"},f.default.createElement(p.Form,{onSubmit:this.submitForm,render:this.renderForm,validateOnBlur:!0}),this.state.submittedValues&&f.default.createElement("div",null,f.default.createElement("p",null,"Form Submitted Successfully With"),f.default.createElement("pre",null,JSON.stringify(this.state.submittedValues,0,2))))}}]),n}(f.default.Component);n.default=w},2572:function(e,n,t){"use strict";t.r(n),n.default="/* eslint-disable class-methods-use-this */\n\nimport React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport InputField from 'terra-form-input/lib/InputField';\nimport Button from 'terra-button';\nimport Spacer from 'terra-spacer';\n\nconst validateUniqueUser = async (name) => {\n  const response = new Promise((resolve) => {\n    if (!name) {\n      return resolve('Required');\n    }\n    if (name !== 'TerraUser') {\n      return resolve('');\n    }\n\n    return resolve('Name is Unavailable');\n  });\n\n  await response;\n  return response;\n};\n\nexport default class MainEntry extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  submitForm(values) {\n    this.setState({\n      submittedValues: values,\n    });\n  }\n\n  renderForm({ handleSubmit }) {\n    return (\n      <form\n        onSubmit={handleSubmit}\n      >\n        <Field\n          name=\"user_name\"\n          validate={validateUniqueUser}\n        >\n          {({ input, meta }) => (\n            <InputField\n              inputId=\"user-name-async\"\n              label=\"User Name\"\n              error={meta.error}\n              help=\"TerraUser is unavailable. Use this name to test async\"\n              isInvalid={meta.submitFailed && meta.error !== undefined}\n              onChange={(e) => { input.onChange(e.target.value); }}\n              inputAttrs={{ ...input }}\n              value={input.value}\n              required\n            />\n          )}\n        </Field>\n        <Button text=\"Submit\" type={Button.Opts.Types.SUBMIT} />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <Spacer marginBottom=\"small\">\n        <Form\n          onSubmit={this.submitForm}\n          render={this.renderForm}\n          validateOnBlur\n        />\n        {this.state.submittedValues\n          && (\n          <div>\n            <p>Form Submitted Successfully With</p>\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\n          </div>\n          )\n        }\n      </Spacer>\n    );\n  }\n}\n"},2573:function(e,n,t){"use strict";var r=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=r(t(331)),i=r(t(20)),u=r(t(24)),l=r(t(25)),s=r(t(26)),o=r(t(31)),m=r(t(27)),d=r(t(0)),c=t(926),f=r(t(918)),p=r(t(61)),v=r(t(333));function h(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?h(t,!0).forEach(function(n){(0,a.default)(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):h(t).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}var g=function(e){return e?e.replace(/[^\d]/g,""):e},y=function(e){if(!e)return e;var n=e.replace(/[^\d]/g,"");return n.length<=3?n:n.length<=7?"(".concat(n.slice(0,3),") ").concat(n.slice(3)):"(".concat(n.slice(0,3),") ").concat(n.slice(3,6),"-").concat(n.slice(6,10))},F=function(e){return e?void 0:"Required"},w=function(e){function n(e){var t;return(0,i.default)(this,n),(t=(0,l.default)(this,(0,s.default)(n).call(this,e))).state={},t.submitForm=t.submitForm.bind((0,o.default)(t)),t}return(0,m.default)(n,e),(0,u.default)(n,[{key:"submitForm",value:function(e){this.setState({submittedValues:e})}},{key:"renderForm",value:function(e){var n=e.handleSubmit,t=e.pristine,r=e.invalid;return d.default.createElement("form",{onSubmit:n},d.default.createElement(c.Field,{name:"vacation_days",validate:F,parse:g},function(e){var n=e.input,t=e.meta;return d.default.createElement(f.default,{inputId:"vacation-days",label:"Vacation Days Remaining",error:t.error,isInvalid:t.submitFailed&&!t.valid,inputAttrs:b({placeholder:"# of Vacation Days remaining"},n),onChange:function(e){n.onChange(e.target.value)},value:n.value,required:!0})}),d.default.createElement(c.Field,{name:"phone_number",validate:F,parse:y},function(e){var n=e.input,t=e.meta;return d.default.createElement(f.default,{inputId:"phone-number",label:"Phone Number",error:t.error,isInvalid:t.submitFailed&&!t.valid,inputAttrs:b({placeholder:"(###) ###-####"},n),onChange:function(e){n.onChange(e.target.value)},value:n.value,required:!0})}),d.default.createElement(p.default,{text:"Submit",isDisabled:r||t,type:p.default.Opts.Types.SUBMIT}))}},{key:"render",value:function(){return d.default.createElement(v.default,{marginBottom:"small"},d.default.createElement(c.Form,{onSubmit:this.submitForm,render:this.renderForm}),this.state.submittedValues&&d.default.createElement("div",null,d.default.createElement("p",null,"Form Submitted Successfully With"),d.default.createElement("pre",null,JSON.stringify(this.state.submittedValues,0,2))))}}]),n}(d.default.Component);n.default=w},2574:function(e,n,t){"use strict";t.r(n),n.default="/* eslint-disable class-methods-use-this */\n\nimport React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport InputField from 'terra-form-input/lib/InputField';\nimport Button from 'terra-button';\nimport Spacer from 'terra-spacer';\n\nconst numericOnly = (value) => {\n  if (!value) return value;\n  const onlyNums = value.replace(/[^\\d]/g, '');\n  return onlyNums;\n};\n\nconst enforcePhoneNumber = (value) => {\n  if (!value) return value;\n  const onlyNums = value.replace(/[^\\d]/g, '');\n  if (onlyNums.length <= 3) return onlyNums;\n  if (onlyNums.length <= 7) return `(${onlyNums.slice(0, 3)}) ${onlyNums.slice(3)}`;\n\n  return `(${onlyNums.slice(0, 3)}) ${onlyNums.slice(3, 6)}-${onlyNums.slice(\n    6,\n    10,\n  )}`;\n};\n\nconst required = value => (value ? undefined : 'Required');\n\nexport default class MainEntry extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  submitForm(values) {\n    this.setState({\n      submittedValues: values,\n    });\n  }\n\n  renderForm({ handleSubmit, pristine, invalid }) {\n    return (\n      <form\n        onSubmit={handleSubmit}\n      >\n        <Field\n          name=\"vacation_days\"\n          validate={required}\n          parse={numericOnly}\n        >\n          {({ input, meta }) => (\n            <InputField\n              inputId=\"vacation-days\"\n              label=\"Vacation Days Remaining\"\n              error={meta.error}\n              isInvalid={meta.submitFailed && !meta.valid}\n              inputAttrs={{\n                placeholder: '# of Vacation Days remaining',\n                ...input,\n              }}\n              onChange={(e) => { input.onChange(e.target.value); }}\n              value={input.value}\n              required\n            />\n          )}\n        </Field>\n        <Field\n          name=\"phone_number\"\n          validate={required}\n          parse={enforcePhoneNumber}\n        >\n          {({ input, meta }) => (\n            <InputField\n              inputId=\"phone-number\"\n              label=\"Phone Number\"\n              error={meta.error}\n              isInvalid={meta.submitFailed && !meta.valid}\n              inputAttrs={{\n                placeholder: '(###) ###-####',\n                ...input,\n              }}\n              onChange={(e) => { input.onChange(e.target.value); }}\n              value={input.value}\n              required\n            />\n          )}\n        </Field>\n        <Button text=\"Submit\" isDisabled={invalid || pristine} type={Button.Opts.Types.SUBMIT} />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <Spacer marginBottom=\"small\">\n        <Form\n          onSubmit={this.submitForm}\n          render={this.renderForm}\n        />\n        {this.state.submittedValues\n          && (\n          <div>\n            <p>Form Submitted Successfully With</p>\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\n          </div>\n          )\n        }\n      </Spacer>\n    );\n  }\n}\n"},3719:function(e,n,t){"use strict";var r=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=r(t(0)),i=r(t(911)),u=r(t(2570)),l=r(t(2571)),s=r(t(2572)),o=r(t(2573)),m=r(t(2574)),d=function(){return a.default.createElement(i.default,{readme:u.default,examples:[{title:"Asynchronous Function",example:a.default.createElement(l.default,null),source:s.default},{title:"Parsing Function",example:a.default.createElement(o.default,null),source:m.default}]})};n.default=d},912:function(e,n){}}]);
//# sourceMappingURL=186-7263b99b35c3c601798d.js.map