(window.webpackJsonp=window.webpackJsonp||[]).push([[130,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{1364:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(0)),i=o(n(4)),a=o(n(23)),s=o(n(1365));function o(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=i.default.bind(s.default),d=function(e){var t=l({},e),n=u(["IconDiamond",e.className]);return r.default.createElement(a.default,l({className:n},t),r.default.createElement("path",{fill:"#78288C",d:"M24.8 47.7l22.9-22.9c.4-.4.4-1.1 0-1.6L24.8.3c-.4-.4-1.1-.4-1.6 0L.3 23.2c-.4.4-.4 1.1 0 1.6l22.9 22.9c.4.4 1.2.4 1.6 0z"}))};d.displayName="IconDiamond",d.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg"};var c=d;t.default=c},1365:function(e,t,n){e.exports={IconDiamond:"IconDiamond-module__IconDiamond___21vv7"}},3350:function(e,t,n){"use strict";n.r(t),t.default="# Terra Status View\n\nPresents an icon, title, message, and/or buttons based on a status type scenario. Scenarios include `no-data`, `no-matching-results`, `not-authorized`, `error`, or a custom scenario.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-status-view`\n  - `yarn add terra-status-view`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\n<details>\n<summary>View information on this component's peer dependencies.</summary>\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n| react-intl | ^2.8.0 |\n\n\n</details>\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Implementation Notes:\n\nThe Status-View component must be composed inside the [Base][1] component with a locale in order for it to load the correct translation strings.\n\n[1]: https://github.com/cerner/terra-core/tree/master/packages/terra-base/docs\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n"},3351:function(e){e.exports=JSON.parse('{"_from":"terra-status-view@^4.0.0","_id":"terra-status-view@4.4.0","_inBundle":false,"_integrity":"sha512-wtjFpS8aErh5wtbvVNuCzY8QMlEVpsHvlQRDGDbu2I7oyR2Nzn9oZJWfGv/wl4SVDf7eFgDmhw85uYXzQhS1OQ==","_location":"/terra-status-view","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-status-view@^4.0.0","name":"terra-status-view","escapedName":"terra-status-view","rawSpec":"^4.0.0","saveSpec":null,"fetchSpec":"^4.0.0"},"_requiredBy":["/","/terra-dev-site"],"_resolved":"https://registry.npmjs.org/terra-status-view/-/terra-status-view-4.4.0.tgz","_shasum":"34a0bc543d3030c5f1bc40a1e600163a3f2fdc93","_spec":"terra-status-view@^4.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-core/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","lodash.uniqueid":"^4.0.1","prop-types":"^15.5.8","terra-button":"^3.19.0","terra-divider":"^3.14.0","terra-doc-template":"^2.15.0","terra-icon":"^3.16.0","terra-mixins":"^1.33.0"},"deprecated":false,"description":"The status view component provides an icon, title, message, and buttons inside a view.","gitHead":"0b893dc4a80250c0b485a5f205f2defde7c38ecf","homepage":"https://github.com/cerner/terra-core#readme","keywords":["Cerner","Terra","terra-status-view","StatusView","UI"],"license":"Apache-2.0","main":"lib/StatusView.js","name":"terra-status-view","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-core.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"4.4.0"}')},3352:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'terra-button';\nimport Divider from 'terra-divider';\nimport styles from './StatusView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst StatusViewVariants = {\n  NODATA: 'no-data',\n  NOMATCHINGRESULTS: 'no-matching-results',\n  NOTAUTHORIZED: 'not-authorized',\n  ERROR: 'error',\n};\n\n/* eslint-disable react/forbid-foreign-prop-types */\nconst propTypes = {\n  /**\n   * An array of objects containing terra-button properties. A key attribute is required for each object.\n   * This array is used to render buttons in the bottom section.\n   * Example:`[{ text: 'Button 1', key: 1, size: 'medium', variant: 'action', onClick: onClickFunction}]`\n   */\n  buttonAttrs: PropTypes.arrayOf(PropTypes.shape(Button.propTypes)),\n\n  /**\n   * Display a custom glyph. Overrides a variant's default glyph.\n   */\n  customGlyph: PropTypes.node,\n\n  /**\n   *  Aligns the component at the top of the container rather than \"centered\"\n   */\n  isAlignedTop: PropTypes.bool,\n\n  /**\n   * Determines if the glyph should be displayed.\n   */\n  isGlyphHidden: PropTypes.bool,\n\n  /**\n   * The descriptive text, displayed under the title.\n   */\n  message: PropTypes.string,\n\n  /**\n   * The title displayed under the glyph. Variants contain default titles that can be overriden by this prop.\n   */\n  title: PropTypes.string,\n\n  /**\n   * Sets the glyph and title using a pre-baked variant. One of the following: `no-data`,\n   * `no-matching-results`, `not-authorized`, or `error`\n   */\n  variant: PropTypes.oneOf(Object.values(StatusViewVariants)),\n};\n/* eslint-enable react/forbid-foreign-prop-types */\n\nconst defaultProps = {\n  buttonAttrs: [],\n  customGlyph: undefined,\n  isAlignedTop: false,\n  isGlyphHidden: false,\n  message: undefined,\n  title: undefined,\n  variant: undefined,\n};\n\nconst generateButtons = (buttonAttrsArray) => {\n  if (!buttonAttrsArray.length) {\n    return undefined;\n  }\n\n  return buttonAttrsArray.map(button => <Button {...button} className={cx(['button', button.className])} />);\n};\n\nconst StatusView = ({\n  buttonAttrs,\n  customGlyph,\n  isAlignedTop,\n  isGlyphHidden,\n  message,\n  title,\n  variant,\n  ...customProps\n}) => {\n  let glyphSection;\n  if (customGlyph && !isGlyphHidden) {\n    glyphSection = (\n      <div className={cx('glyph')}>\n        {customGlyph}\n      </div>\n    );\n  } else if (variant && !isGlyphHidden) {\n    glyphSection = (\n      <div className={cx('glyph')}>\n        <svg className={cx(variant)} />\n      </div>\n    );\n  }\n\n  let defaultTitle;\n  if (variant) {\n    defaultTitle = <FormattedMessage id={`Terra.status-view.${variant}`} />;\n  }\n\n  // Custom title takes precedence\n  let titleSection;\n  if (title || defaultTitle) {\n    titleSection = (\n      <div className={cx('title')}>\n        {title || defaultTitle}\n      </div>\n    );\n  }\n\n  let messageSection;\n  if (message) {\n    messageSection = (\n      <div className={cx('message')}>\n        {message}\n      </div>\n    );\n  }\n\n  let actionSection;\n  const buttons = generateButtons(buttonAttrs);\n  if (buttons) {\n    actionSection = (\n      <div className={cx('actions')}>\n        {buttons}\n      </div>\n    );\n  }\n\n  let dividerSection;\n  if (titleSection && (messageSection || actionSection)) {\n    dividerSection = (\n      <div className={cx('divider')}>\n        <Divider />\n      </div>\n    );\n  }\n\n  const outerViewClassNames = cx([\n    'outer-view',\n    { 'is-aligned-top': isAlignedTop },\n    customProps.className,\n  ]);\n\n  const innerViewClassNames = cx([\n    'inner-view',\n  ]);\n\n  return (\n    <div {...customProps} className={outerViewClassNames}>\n      <div className={cx('top-space')} />\n      <div className={innerViewClassNames}>\n        {glyphSection}\n        {titleSection}\n        {dividerSection}\n        {messageSection}\n        {actionSection}\n      </div>\n      <div className={cx('bottom-space')} />\n    </div>\n  );\n};\n\nStatusView.propTypes = propTypes;\nStatusView.defaultProps = defaultProps;\nexport default StatusView;\nexport { StatusViewVariants };\n"},3353:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),a=(r=n(160))&&r.__esModule?r:{default:r};function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var s,o=e[Symbol.iterator]();!(r=(s=o.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(i)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var o=function(){var e=s((0,i.useState)("error"),2),t=e[0],n=e[1];return i.default.createElement("div",null,i.default.createElement(a.default,{variant:t}),i.default.createElement("fieldset",null,i.default.createElement("legend",null,"Change Variant"),i.default.createElement("select",{id:"statusViewVariant",name:"statusViewVariant",value:t,onChange:function(e){n(e.target.value)}},i.default.createElement("option",{value:"error"},"Error"),i.default.createElement("option",{value:"no-data"},"No Data"),i.default.createElement("option",{value:"no-matching-results"},"No Matching Results"),i.default.createElement("option",{value:"not-authorized"},"Not Authorized"))))};t.default=o},3354:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport StatusView from \'terra-status-view/lib/StatusView\';\n\nconst ToggleVariants = () => {\n  const [variant, setVariant] = useState(\'error\');\n\n  const handleOnSelect = (event) => {\n    setVariant(event.target.value);\n  };\n\n  return (\n    <div>\n      <StatusView variant={variant} />\n      <fieldset>\n        <legend>Change Variant</legend>\n        <select id="statusViewVariant" name="statusViewVariant" value={variant} onChange={handleOnSelect}>\n          <option value="error">Error</option>\n          <option value="no-data">No Data</option>\n          <option value="no-matching-results">No Matching Results</option>\n          <option value="not-authorized">Not Authorized</option>\n        </select>\n      </fieldset>\n    </div>\n  );\n};\n\nexport default ToggleVariants;\n'},3355:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),a=(r=n(160))&&r.__esModule?r:{default:r};function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var s,o=e[Symbol.iterator]();!(r=(s=o.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(i)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var o=function(){var e=s((0,i.useState)(!1),2),t=e[0],n=e[1],r=s((0,i.useState)(!1),2),o=r[0],l=r[1];return i.default.createElement("div",null,i.default.createElement("div",{style:{height:"400px",border:"1px dashed black"}},i.default.createElement(a.default,{variant:"error",isAlignedTop:t,isGlyphHidden:o})),i.default.createElement("fieldset",null,i.default.createElement("legend",null,"Toggle alignment and glyph"),i.default.createElement("div",null,i.default.createElement("input",{id:"isAlignedTop",type:"checkbox",onChange:function(){n(!t)}}),i.default.createElement("label",{htmlFor:"isAlignedTop"},"isAlignedTop")),i.default.createElement("div",null,i.default.createElement("input",{id:"isGlyphHidden",type:"checkbox",onChange:function(){l(!o)}}),i.default.createElement("label",{htmlFor:"isGlyphHidden"},"isGlyphHidden"))))};t.default=o},3356:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport StatusView from \'terra-status-view/lib/StatusView\';\n\nconst ToggleAlignmentAndGlyph = () => {\n  const [isAlignedTop, setIsAlignedTop] = useState(false);\n  const [isGlyphHidden, setIsGlyphHidden] = useState(false);\n\n  const handleOnAlignChange = () => {\n    setIsAlignedTop(!isAlignedTop);\n  };\n\n  const handleOnGlyphChange = () => {\n    setIsGlyphHidden(!isGlyphHidden);\n  };\n\n  /* eslint-disable react/forbid-dom-props */\n  return (\n    <div>\n      <div style={{ height: \'400px\', border: \'1px dashed black\' }}>\n        <StatusView variant="error" isAlignedTop={isAlignedTop} isGlyphHidden={isGlyphHidden} />\n      </div>\n      <fieldset>\n        <legend>Toggle alignment and glyph</legend>\n        <div>\n          <input id="isAlignedTop" type="checkbox" onChange={handleOnAlignChange} />\n          <label htmlFor="isAlignedTop">isAlignedTop</label>\n        </div>\n        <div>\n          <input id="isGlyphHidden" type="checkbox" onChange={handleOnGlyphChange} />\n          <label htmlFor="isGlyphHidden">isGlyphHidden</label>\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n\nexport default ToggleAlignmentAndGlyph;\n'},3357:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(0)),i=s(n(1364)),a=s(n(160));function s(e){return e&&e.__esModule?e:{default:e}}var o=r.default.createElement(a.default,{message:"Custom Message",customGlyph:r.default.createElement(i.default,null),title:"Custom Title",buttonAttrs:[{text:"Action 1",size:"medium",key:1},{text:"Action 2",size:"medium",key:2}]});t.default=o},3358:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport IconDiamond from 'terra-icon/lib/icon/IconDiamond';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport StatusView from 'terra-status-view/lib/StatusView';\n\nconst StatusViewButtons = [\n  {\n    text: 'Action 1',\n    size: 'medium',\n    key: 1,\n  }, {\n    text: 'Action 2',\n    size: 'medium',\n    key: 2,\n  },\n];\n\nconst Custom = (\n  <StatusView\n    message=\"Custom Message\"\n    customGlyph={<IconDiamond />}\n    title=\"Custom Title\"\n    buttonAttrs={StatusViewButtons}\n  />\n);\n\nexport default Custom;\n"},3827:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=f(n(0)),i=f(n(911)),a=f(n(3350)),s=n(3351),o=f(n(3352)),l=f(n(3353)),u=f(n(3354)),d=f(n(3355)),c=f(n(3356)),p=f(n(3357)),m=f(n(3358));function f(e){return e&&e.__esModule?e:{default:e}}var h=function(){return r.default.createElement(i.default,{packageName:s.name,readme:a.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(s.name),examples:[{title:"Variants",example:r.default.createElement(l.default,null),source:u.default},{title:"Custom: Icon + message + buttons",example:p.default,source:m.default},{title:"Toggle Alignment and Glyph",example:r.default.createElement(d.default,null),source:c.default}],propsTables:[{componentName:"Status View",componentSrc:o.default}]})};t.default=h},912:function(e,t){}}]);
//# sourceMappingURL=130-747d16d289aca64f6e9f.js.map