{"version":3,"sources":["webpack:///./src/terra-dev-site/guide/Internationalization/BuildingComponentsWhichIncludeTranslations.e.guide.md"],"names":[],"mappings":"6FAAA,OAAe","file":"371-b69133d2c3c2295396e4.js","sourcesContent":["export default \"# Building Components Which Include Translations\\n\\nBelow is an example of a component that renders a button with a hard-coded string.\\n\\n```jsx\\nimport React from 'react';\\n\\nconst Toggle = () => (\\n  <button type=\\\"button\\\">Toggle</button>\\n);\\n```\\n\\nThere are various ways to render the string as a translation with react-intl. We recommend using [react-intl's FormattedMessage component](https://github.com/yahoo/react-intl/wiki/Components#formattedmessage). Below is an example highlighting the use react-intl's formatted message component.\\n\\n```jsx\\nimport React from 'react';\\nimport Base from 'terra-base';\\nimport { FormattedMessage } from 'react-intl';\\n\\nconst Toggle = () => (\\n  <button type=\\\"button\\\">\\n    <FormattedMessage id=\\\"App.toggle\\\" />\\n  </button>\\n);\\n\\nconst App = () => (\\n  <Base className=\\\"custom-App\\\" locale=\\\"en\\\">\\n    <Toggle />\\n  </Base>\\n);\\n\\nexport default App;\\n```\\n\\n**Note:** *The terra-base component doesn't need to wrap individual components with translations, it should be used once to wrap the entire React app.*\\n\\nBy default `<FormattedMessage>` will render the formatted string into a `<span>`. If you need to customize rendering, we recommend using the [render prop version of FormattedMessage](https://github.com/yahoo/react-intl/wiki/Components#formattedmessage).\\n\\nFor example, the terra-button component has a prop for text, however it only accepts strings. We can use the render prop version of the FormattedMessage component to pass a string to the button text prop like so:\\n\\n```jsx\\nimport React from 'react';\\nimport Base from 'terra-base';\\nimport { FormattedMessage } from 'react-intl';\\nimport Button from 'terra-button';\\n\\nconst Toggle = () => (\\n  <FormattedMessage id=\\\"App.toggle\\\">\\n    {txt => (\\n      <Button text={txt} />\\n    )}\\n  </FormattedMessage>\\n);\\n\\nconst App = () => (\\n  <Base className=\\\"custom-App\\\" locale=\\\"en\\\">\\n    <Toggle />\\n  </Base>\\n);\\n\\nexport default App;\\n```\\n\\nThis works well and is how we'd recommend rendering a string when a component's API requires a string. There are some props we need to keep as strings due to the fact that the underlying HTML attribute we pass the prop to only accepts string. As an example, let's say we have a component where the `label` and `placeholder` props map to `aria-label` and `placeholder` HTML attributes on an input.\\n\\n```jsx\\nimport React from 'react';\\nimport Input from './Input';\\n\\n<Input label={localeLabel} placeholder={localePlaceholder) />\\n```\\n\\nWe could continue to use the render prop version of FormattedMessage:\\n\\n```jsx\\n<FormattedMessage id=\\\"App.localeLabel\\\">\\n  {localeLabel => (\\n    <FormattedMessage id=\\\"App.localePlaceholder\\\">\\n      {localePlaceHolder => (\\n        <Input label={localeLabel} placeholder={localePlaceholder) />\\n      )}\\n    </FormattedMessage>\\n  )}\\n</FormattedMessage>\\n```\\n\\nHowever, in this case, instead of nesting multiple FormattedMessage components, we'd recommend using [react-intl's injectIntl higher-order component (HOC)](https://github.com/yahoo/react-intl/wiki/API#injectintl).\\n\\n\\n```jsx\\nimport React from 'react';\\nimport { injectIntl, intlShape } from 'react-intl';\\n\\nconst propTypes = {\\n  /**\\n   * @private\\n   * The intl object to be injected for translations. Provided by the injectIntl function.\\n   */\\n  intl: intlShape.isRequired,\\n};\\n\\nconst Input = ({ intl }) => (\\n  <input\\n    aria-label={intl.formatMessage({ id: 'App.label' })}\\n    placeholder={intl.formatMessage({ id: 'App.placeholder' })}\\n  />\\n);\\n\\nInput.propTypes = propTypes;\\n\\nexport default injectIntl(Input);\\n```\\n\\nThe react-intl repo contains additional examples that cover using variables, plurals, numbers, and additional use-cases which can be [found here](https://github.com/yahoo/react-intl/tree/master/examples).\\n\""],"sourceRoot":""}