(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{1375:function(e,n,t){"use strict";var i=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=i(t(20)),o=i(t(24)),l=i(t(25)),a=i(t(26)),r=i(t(31)),d=i(t(27)),u=i(t(0)),c=i(t(61)),p=i(t(2)),h=i(t(348)),m=i(t(4)),f=i(t(3037)),g=m.default.bind(f.default),C={isArrowDisplayed:p.default.bool,contentWidth:p.default.string,boundingRef:p.default.func},k=function(e){function n(e){var t;return(0,s.default)(this,n),(t=(0,l.default)(this,(0,a.default)(n).call(this,e))).handleButtonClick=t.handleButtonClick.bind((0,r.default)(t)),t.handleRequestClose=t.handleRequestClose.bind((0,r.default)(t)),t.setButtonNode=t.setButtonNode.bind((0,r.default)(t)),t.getButtonNode=t.getButtonNode.bind((0,r.default)(t)),t.handleToggle1OnClick=t.handleToggle1OnClick.bind((0,r.default)(t)),t.handleToggle2OnClick=t.handleToggle2OnClick.bind((0,r.default)(t)),t.handleOnChange=t.handleOnChange.bind((0,r.default)(t)),t.handleAction=t.handleAction.bind((0,r.default)(t)),t.handleCloseOnClick=t.handleCloseOnClick.bind((0,r.default)(t)),t.state={open:!1,toggle1Selected:!1,toggle2Selected:!1,groupSelectedIndex:void 0,actionClickCount:0},t}return(0,d.default)(n,e),(0,o.default)(n,[{key:"setButtonNode",value:function(e){this.buttonNode=e}},{key:"getButtonNode",value:function(){return this.buttonNode}},{key:"handleButtonClick",value:function(){this.setState({open:!0})}},{key:"handleRequestClose",value:function(){this.setState({open:!1})}},{key:"handleCloseOnClick",value:function(e){e.preventDefault(),this.handleRequestClose()}},{key:"handleToggle1OnClick",value:function(){this.setState(function(e){return{toggle1Selected:!e.toggle1Selected}}),this.handleRequestClose()}},{key:"handleToggle2OnClick",value:function(){this.setState(function(e){return{toggle2Selected:!e.toggle2Selected}})}},{key:"handleOnChange",value:function(e,n){this.setState({groupSelectedIndex:n})}},{key:"handleAction",value:function(e){e.preventDefault();var n=this.state;n.actionClickCount+=1,this.setState(n)}},{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("div",{className:g("menu-wrapper"),ref:this.setButtonNode},u.default.createElement(h.default,{isOpen:this.state.open,targetRef:this.getButtonNode,onRequestClose:this.handleRequestClose,contentWidth:this.props.contentWidth,isArrowDisplayed:this.props.isArrowDisplayed,boundingRef:this.props.boundingRef},u.default.createElement(h.default.Item,{text:"Toggle Item 1 - Closes Menu",key:"Toggle1",isSelected:this.state.toggle1Selected,onClick:this.handleToggle1OnClick,isSelectable:!0}),u.default.createElement(h.default.Item,{text:"Toggle Item 2",key:"Toggle2",isSelected:this.state.toggle2Selected,onClick:this.handleToggle2OnClick,isSelectable:!0}),u.default.createElement(h.default.Item,{text:"Disabled Item 1",key:"Disabled1",isSelected:this.state.toggle1Selected,onClick:this.handleToggle1OnClick,isDisabled:!0}),u.default.createElement(h.default.Divider,{key:"Divider1"}),u.default.createElement(h.default.Item,{text:"Nested Menu 1",key:"Nested1",subMenuItems:[u.default.createElement(h.default.Item,{text:"Action 1.1",key:"1.1",onClick:this.handleAction}),u.default.createElement(h.default.Item,{text:"Action 1.2",key:"1.2",onClick:this.handleAction}),u.default.createElement(h.default.Item,{text:"Action 1.3",key:"1.3",onClick:this.handleAction}),u.default.createElement(h.default.Divider,{key:"Divider1.1"}),u.default.createElement(h.default.Item,{text:"Close Action 1.1",key:"1.4",onClick:this.handleCloseOnClick}),u.default.createElement(h.default.Item,{text:"Close Action 1.2",key:"1.5",onClick:this.handleCloseOnClick}),u.default.createElement(h.default.Item,{text:"Close Action 1.3",key:"1.6",onClick:this.handleCloseOnClick})]}),u.default.createElement(h.default.Item,{text:"Nested Menu 2 has a long title that will wrap and a truncated title when clicked",key:"Nested2",isDisabled:!0,subMenuItems:[u.default.createElement(h.default.Item,{text:"Default 2.1",key:"2.1"}),u.default.createElement(h.default.Item,{text:"Default 2.2",key:"2.2"}),u.default.createElement(h.default.Item,{text:"Default 2.3",key:"2.3"})]}),u.default.createElement(h.default.Divider,{key:"Divider2"}),u.default.createElement(h.default.Item,{text:"Close Action",key:"Action2",onClick:this.handleCloseOnClick}),u.default.createElement(h.default.Item,{text:"Action",key:"Action1",onClick:this.handleAction}),u.default.createElement(h.default.Divider,{key:"Divider3"}),u.default.createElement(h.default.ItemGroup,{key:"Group",onChange:this.handleOnChange},u.default.createElement(h.default.Item,{text:"Group Item 1",key:"GroupItem1",isSelected:0===this.state.groupSelectedIndex}),u.default.createElement(h.default.Item,{text:"Group Item 2",key:"GroupItem2",isSelected:1===this.state.groupSelectedIndex}),u.default.createElement(h.default.Item,{text:"Group Item 3",key:"GroupItem3",isSelected:2===this.state.groupSelectedIndex,isDisabled:!0}))),u.default.createElement(c.default,{onClick:this.handleButtonClick,text:"Click Me"})),u.default.createElement("br",null),u.default.createElement("p",null,"Action button has been clicked",this.state.actionClickCount," ","times."))}}]),n}(u.default.Component);k.propTypes=C;var y=k;n.default=y},3032:function(e,n,t){"use strict";t.r(n),n.default='# Terra Menu\n\nThe menu is a popup component that displays a list of items, item groups, and dividers. Menu Items can be actionable, have toggle-style selection, or have nested submenu items. Menu Item groups are a single-select grouping of menu items.\nThe Menu will determine the height of the popup based on the number of items in the main menu.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-menu`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\n<details>\n<summary>View information on this component\'s peer dependencies.</summary>\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n\n\n</details>\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\n\n```jsx\nimport React from \'react\';\nimport Button from \'terra-button\';\nimport Menu from \'terra-menu\';\n\nclass BasicMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handleRequestClose = this.handleRequestClose.bind(this);\n    this.setButtonNode = this.setButtonNode.bind(this);\n    this.getButtonNode = this.getButtonNode.bind(this);\n    this.handleOnClickFirstMenu = this.handleOnClickFirstMenu.bind(this);\n    this.handleOnClickSecondMenu = this.handleOnClickSecondMenu.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.state = {\n      open: false,\n      toggle1Selected: false,\n      toggle2Selected: false,\n      groupSelectedIndex: undefined,\n    };\n  }\n\n  setButtonNode(node) {\n    this.buttonNode = node;\n  }\n\n  getButtonNode() {\n    return this.buttonNode;\n  }\n\n  handleButtonClick() {\n    this.setState({ open: true });\n  }\n\n  handleRequestClose() {\n    this.setState({ open: false });\n  }\n\n  handleOnClickFirstMenu() {\n    this.setState(prevState => ({ toggle1Selected: !prevState.toggle1Selected }));\n  }\n\n  handleOnClickSecondMenu() {\n    this.setState(prevState => ({ toggle2Selected: !prevState.toggle2Selected }));\n  }\n\n  handleOnChange(event, index) {\n    this.setState({ groupSelectedIndex: index });\n  }\n\n  render() {\n    return (\n      <div ref={this.setButtonNode}>\n        <Menu\n          isOpen={this.state.open}\n          targetRef={this.getButtonNode}\n          onRequestClose={this.handleRequestClose}\n          contentWidth="240"\n          isArrowDisplayed\n        >\n          <Menu.Item\n            text="Toggle Item 1"\n            key="Toggle1"\n            isSelected={this.state.toggle1Selected}\n            onClick={this.handleOnClickFirstMenu}\n            isSelectable\n          />\n          <Menu.Item\n            text="Toggle Item 2"\n            key="Toggle2"\n            isSelected={this.state.toggle2Selected}\n            onClick={this.handleOnClickSecondMenu}\n            isSelectable\n          />\n          <Menu.Divider key="Divider1" />\n          <Menu.Item\n            text="Nested Menu 1"\n            key="Nested1"\n            subMenuItems={[\n              <Menu.Item text="Alert Action 1.1" key="1.1" onClick={() => alert(\'Action 1.1\')} />,\n              <Menu.Item text="Alert Action 1.2" key="1.2" onClick={() => alert(\'Action 1.2\')} />,\n              <Menu.Item text="Alert Action 1.3" key="1.3" onClick={() => alert(\'Action 1.3\')} />,\n              <Menu.Divider key="Divider1.1" />,\n              <Menu.Item text="Close Action 1.1" key="1.4" onClick={this.handleRequestClose} />,\n              <Menu.Item text="Close Action 1.2" key="1.5" onClick={this.handleRequestClose} />,\n              <Menu.Item text="Close Action 1.3" key="1.6" onClick={this.handleRequestClose} />,\n            ]}\n          />\n          <Menu.Item\n            text="Nested Menu 2"\n            key="Nested2"\n            subMenuItems={[\n              <Menu.Item text="Default 2.1" key="2.1" />,\n              <Menu.Item text="Default 2.2" key="2.2" />,\n              <Menu.Item text="Default 2.3" key="2.3" />,\n            ]}\n          />\n          <Menu.Divider key="Divider2" />\n          <Menu.Item text="Alert Action" key="Action1" onClick={() => alert(\'Action 1\')} />\n          <Menu.Item text="Close Action" key="Action2" onClick={this.handleRequestClose} />\n          <Menu.Divider key="Divider3" />\n          <Menu.ItemGroup key="Group" onChange={this.handleOnChange}>\n            <Menu.Item text="Group Item 1" key="GroupItem1" isSelected={this.state.groupSelectedIndex === 0} />\n            <Menu.Item text="Group Item 2" key="GroupItem2" isSelected={this.state.groupSelectedIndex === 1} />\n          </Menu.ItemGroup>\n        </Menu>\n        <Button onClick={this.handleButtonClick} text="Click Me" />\n      </div>\n    );\n  }\n}\n```\n'},3033:function(e){e.exports=JSON.parse('{"_from":"terra-menu@^6.0.0","_id":"terra-menu@6.8.0","_inBundle":false,"_integrity":"sha512-iePpx/Qx2jCn+ajyLplzbueOB9UmGPtUN5R/3ZQgXe6nyg60emmky+W/gxWStlN3jiAAAuaZhoLBh91rr9jSUg==","_location":"/terra-menu","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-menu@^6.0.0","name":"terra-menu","escapedName":"terra-menu","rawSpec":"^6.0.0","saveSpec":null,"fetchSpec":"^6.0.0"},"_requiredBy":["/","/terra-collapsible-menu-view","/terra-dev-site","/terra-tabs"],"_resolved":"https://registry.npmjs.org/terra-menu/-/terra-menu-6.8.0.tgz","_shasum":"8d58bd96c0c5b7610c25ab6aaea9015654638d21","_spec":"terra-menu@^6.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","keycode-js":"^1.0.4","prop-types":"^15.5.8","terra-arrange":"^3.0.0","terra-content-container":"^3.0.0","terra-icon":"^3.1.0","terra-list":"^4.0.0","terra-popup":"^6.8.0"},"deprecated":false,"description":"The menu is a popup component that displays a list of items, item groups, and dividers. Menu Items can be actionable, have toggle-style selection, or have nested submenu items. Menu Item groups are a single-select grouping of menu items. The Menu will determine the height of the popup based on the number of items in the main menu.","devDependencies":{"terra-button":"^3.3.0","terra-doc-template":"^2.2.0","terra-slide-group":"^4.6.0"},"gitHead":"f763d8f2d030d85d834554d5c2eca6f2917f2eac","homepage":"https://github.com/cerner/terra-framework#readme","keywords":["Cerner","Terra","terra-menu","Menu","UI"],"license":"Apache-2.0","main":"lib/Menu.js","name":"terra-menu","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"6.8.0"}')},3034:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport Popup from 'terra-popup';\nimport classNames from 'classnames/bind';\nimport MenuItem from './MenuItem';\nimport MenuItemGroup from './MenuItemGroup';\nimport MenuDivider from './MenuDivider';\nimport MenuContent from './_MenuContent';\nimport styles from './Menu.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * List of Menu.Item(s)/Menu.ItemGroup(s)/Menu.Divider(s) to be displayed as content within the Menu.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Callback function indicating a close condition was met, should be combined with isOpen for state management.\n   */\n  onRequestClose: PropTypes.func.isRequired,\n  /**\n   * Target element for the menu to anchor to.\n   */\n  targetRef: PropTypes.func.isRequired,\n  /**\n   * Bounding container for the menu, will use window if no value provided.\n   */\n  boundingRef: PropTypes.func,\n  /**\n   * CSS classnames that are append to the arrow.\n   */\n  classNameArrow: PropTypes.string,\n  /**\n   * CSS classnames that are append to the menu content inner.\n   */\n  classNameContent: PropTypes.string,\n  /**\n   * CSS classnames that are append to the overlay.\n   */\n  classNameOverlay: PropTypes.string,\n  /**\n   * Should the menu be presented as open.\n   */\n  isOpen: PropTypes.bool,\n  /**\n   * A string representation of the width in px, limited to:\n   * 160, 240, 320, 640, 960, 1280, 1760 or auto\n   */\n  contentWidth: PropTypes.oneOf(Object.keys(Popup.Opts.widths)),\n  /**\n   * Indicates if the menu should have an center aligned arrow displayed on dropdown.\n   * Otherwise, the menu will display without an arrow and right aligned.\n   */\n  isArrowDisplayed: PropTypes.bool,\n};\n\nconst defaultProps = {\n  isArrowDisplayed: false,\n  isOpen: false,\n  contentWidth: '240',\n};\n\nclass Menu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setPageDimensions = this.setPageDimensions.bind(this);\n    this.push = this.push.bind(this);\n    this.pop = this.pop.bind(this);\n    this.state = { stack: [this] };\n  }\n\n  componentDidUpdate(prevProps) {\n    if ((!this.props.isOpen && prevProps.isOpen) || this.props.children.length !== prevProps.children.length) {\n      /* eslint-disable react/no-did-update-set-state */\n      this.setState({ stack: [this] });\n    }\n  }\n\n  setPageDimensions(node) {\n    if (node) {\n      this.pageHeight = node.clientHeight;\n      if (this.props.contentWidth === 'auto') {\n        this.pageWidth = node.clientWidth;\n      }\n    } else {\n      this.pageHeight = undefined;\n      this.pageWidth = undefined;\n    }\n  }\n\n  pop() {\n    if (this.state.stack.length > 1) {\n      this.setState((prevState) => {\n        const newStack = prevState.stack.slice();\n        newStack.pop();\n        return { stack: newStack };\n      });\n    }\n  }\n\n\n  push(item) {\n    this.setState((prevState) => {\n      const newStack = prevState.stack.slice();\n      newStack.push(item);\n      return { stack: newStack };\n    });\n  }\n\n  render() {\n    const {\n      boundingRef,\n      classNameArrow,\n      classNameContent,\n      classNameOverlay,\n      onRequestClose,\n      isOpen,\n      children,\n      targetRef,\n      isArrowDisplayed,\n      contentWidth,\n      ...customProps\n    } = this.props;\n    const arrowClass = cx([\n      'arrow',\n      { submenu: this.state.stack.length > 1 },\n      classNameArrow,\n    ]);\n\n    const visiblePage = this.state.stack.length - 1;\n    const slides = this.state.stack.map((item, index) => (\n      <MenuContent\n        // eslint-disable-next-line react/no-array-index-key\n        key={`MenuPage-${index}`}\n        title={item.props.text}\n        onRequestNext={this.push}\n        onRequestBack={this.pop}\n        onRequestClose={this.props.onRequestClose}\n        isHidden={index !== visiblePage}\n        fixedHeight={this.pageHeight}\n        fixedWidth={this.pageWidth}\n        contentWidth={Popup.Opts.widths[contentWidth]}\n        refCallback={visiblePage === 0 ? this.setPageDimensions : null}\n        index={index}\n        boundingRef={boundingRef}\n        isFocused={index === visiblePage}\n      >\n        {item.props.children || item.props.subMenuItems}\n      </MenuContent>\n    ));\n\n    return (\n      <Popup\n        {...customProps}\n        boundingRef={boundingRef}\n        isArrowDisplayed={isArrowDisplayed}\n        attachmentBehavior=\"flip\"\n        contentAttachment={isArrowDisplayed ? 'top center' : 'top right'}\n        contentHeight=\"auto\"\n        contentWidth={this.props.contentWidth}\n        classNameArrow={arrowClass}\n        classNameContent={classNameContent}\n        classNameOverlay={classNameOverlay}\n        isOpen={isOpen}\n        onRequestClose={onRequestClose}\n        targetRef={targetRef}\n        isHeaderDisabled\n        isContentFocusDisabled\n      >\n        {slides}\n      </Popup>\n    );\n  }\n}\n\nMenu.propTypes = propTypes;\nMenu.defaultProps = defaultProps;\nMenu.Item = MenuItem;\nMenu.ItemGroup = MenuItemGroup;\nMenu.Divider = MenuDivider;\nMenu.Opts = {\n  widths: Popup.Opts.widths,\n};\n\nexport default Menu;\n"},3035:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport Arrange from 'terra-arrange';\nimport CheckIcon from 'terra-icon/lib/icon/IconCheckmark';\nimport ChevronIcon from 'terra-icon/lib/icon/IconChevronRight';\nimport classNames from 'classnames/bind';\nimport KeyCode from 'keycode-js';\nimport styles from './MenuItem.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst contextTypes = {\n  isGroupItem: PropTypes.bool,\n  isSelectableMenu: PropTypes.bool,\n};\n\nconst propTypes = {\n  /**\n   * Sets the item's text.\n   */\n  text: PropTypes.string,\n\n  /**\n   * Indicates if item should be disabled\n   */\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Indicates if the item is selected. A selected item is indicated with a checkmark.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Indicates if the item should be selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * List of Menu.Items to display in a submenu when this item is selected.\n   */\n  subMenuItems: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * Callback function for when item is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Callback function for when selection state changes on a selectable item.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Indicates if the item has focus. This is used internally to control focus and does not set initial focus.\n   */\n  isActive: PropTypes.bool,\n};\n\nconst defaultProps = {\n  text: '',\n  isSelected: false,\n  isActive: false,\n  isSelectable: undefined,\n  isDisabled: false,\n  subMenuItems: [],\n};\n\nclass MenuItem extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.wrapOnClick = this.wrapOnClick.bind(this);\n    this.wrapOnKeyDown = this.wrapOnKeyDown.bind(this);\n    this.wrapOnKeyUp = this.wrapOnKeyUp.bind(this);\n    this.handleSelection = this.handleSelection.bind(this);\n    this.setItemNode = this.setItemNode.bind(this);\n    this.state = {\n      isSelected: props.isSelected && props.isSelectable && !context.isGroupItem,\n      isActive: false,\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.isActive && this.itemNode) {\n      this.itemNode.focus();\n    }\n  }\n\n  setItemNode(node) {\n    if (node) {\n      this.itemNode = node;\n    }\n  }\n\n  handleSelection(event) {\n    event.preventDefault();\n\n    if (this.props.isSelectable && !this.context.isGroupItem && !this.props.isDisabled) {\n      this.setState(prevState => ({ isSelected: !prevState.isSelected }));\n\n      if (this.props.onChange) {\n        this.props.onChange(event, !this.state.isSelected);\n      }\n    }\n  }\n\n  wrapOnClick(event) {\n    this.handleSelection(event);\n\n    if (this.props.onClick) {\n      this.props.onClick(event);\n    }\n  }\n\n  wrapOnKeyDown(onKeyDown) {\n    return ((event) => {\n      if (event.nativeEvent.keyCode === KeyCode.KEY_RETURN || event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {\n        this.handleSelection(event);\n\n        // Only add active style if the menu doesn't have a sub menu to avoid active style being stuck enabled\n        if (!(this.props.subMenuItems && this.props.subMenuItems.length > 0)) {\n          this.setState({ isActive: true });\n        }\n\n        if (this.props.onClick) {\n          this.props.onClick(event);\n        }\n      // Remove active state when tab key is released while while holding the space key to avoid active style being stuck enabled\n      } else if (event.nativeEvent.keyCode === KeyCode.KEY_TAB) {\n        this.setState({ isActive: false });\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    });\n  }\n\n  wrapOnKeyUp(onKeyUp) {\n    return ((event) => {\n      if (event.nativeEvent.keyCode === KeyCode.KEY_RETURN || event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {\n        this.setState({ isActive: false });\n      }\n\n      if (onKeyUp) {\n        onKeyUp(event);\n      }\n    });\n  }\n\n  render() {\n    const {\n      text,\n      isDisabled,\n      isSelected,\n      isSelectable,\n      subMenuItems,\n      isActive,\n      ...customProps\n    } = this.props;\n\n    const { isGroupItem, isSelectableMenu } = this.context;\n\n    const attributes = Object.assign({}, customProps);\n    attributes.tabIndex = isDisabled ? '-1' : '0';\n    attributes['aria-disabled'] = isDisabled;\n\n    // This is passed down by the single select list in group item and not needed\n    delete attributes.hasChevron;\n\n    if (isDisabled) {\n      delete attributes.onClick;\n      delete attributes.onKeyDown;\n    } else {\n      attributes.onClick = this.wrapOnClick;\n      attributes.onKeyDown = this.wrapOnKeyDown(attributes.onKeyDown);\n      attributes.onKeyUp = this.wrapOnKeyUp(attributes.Up);\n    }\n\n    const markAsSelected = this.state.isSelected || (isGroupItem && isSelected);\n\n    const itemClassNames = cx([\n      'item',\n      { selected: markAsSelected },\n      { 'is-disabled': isDisabled },\n      // eslint-disable-next-line quote-props\n      { 'active': this.state.isActive },\n      attributes.className,\n    ]);\n\n    const textContainer = <div className={cx(['text'])}>{text}</div>;\n    const hasChevron = subMenuItems.length > 0;\n    let content = textContainer;\n    if (hasChevron || isSelectableMenu) {\n      content = (\n        <Arrange\n          fitStart={isSelectableMenu ? <CheckIcon className={cx(['checkmark'])} /> : null}\n          fill={textContainer}\n          fitEnd={hasChevron ? <ChevronIcon className={cx(['chevron'])} /> : null}\n          align=\"center\"\n        />\n      );\n    }\n\n    let role = 'menuitem';\n    if (isGroupItem) {\n      role = 'menuitemradio';\n    } else if (isSelectable) {\n      role = 'menuitemcheckbox';\n    }\n\n    return (\n      <li {...attributes} className={itemClassNames} ref={this.setItemNode} role={role} aria-checked={markAsSelected}>\n        {content}\n      </li>\n    );\n  }\n}\n\nMenuItem.propTypes = propTypes;\nMenuItem.defaultProps = defaultProps;\nMenuItem.contextTypes = contextTypes;\n\nexport default MenuItem;\n"},3036:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport List, { Utils } from 'terra-list';\n\nconst propTypes = {\n  /**\n   * Menu.Items to be grouped together.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Callback function called when selected index changes.\n   */\n  onChange: PropTypes.func,\n};\n\nconst childContextTypes = {\n  isGroupItem: PropTypes.bool,\n};\n\nconst initialSingleSelectedIndex = (children) => {\n  const childArray = React.Children.toArray(children);\n  for (let i = 0; i < childArray.length; i += 1) {\n    if (childArray[i].props.isSelected) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nclass MenuItemGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cloneChildren = this.cloneChildren.bind(this);\n    this.handleItemSelection = this.handleItemSelection.bind(this);\n    this.state = { selectedIndex: initialSingleSelectedIndex(props.children) };\n  }\n\n  getChildContext() {\n    return { isGroupItem: true };\n  }\n\n  handleItemSelection(event, metaData) {\n    if (this.state.selectedIndex !== metaData.index) {\n      event.preventDefault();\n      this.setState({ selectedIndex: metaData.index });\n      if (this.props.onChange) {\n        this.props.onChange(event, metaData.index);\n      }\n    }\n  }\n\n  cloneChildren(children) {\n    return React.Children.map(children, (child, index) => {\n      let isSelectable = true;\n      if (child.props.isSelectable === false) {\n        isSelectable = false;\n      }\n      return React.cloneElement(child, {\n        isSelectable,\n        isSelected: this.state.selectedIndex === index,\n        onClick: Utils.wrappedOnClickForItem(child.props.onKeyDown, this.handleItemSelection, { index }),\n        onKeyDown: Utils.wrappedOnKeyDownForItem(child.props.onClick, this.handleItemSelection, { index }),\n      });\n    });\n  }\n\n  render() {\n    const { children, ...customProps } = this.props;\n    const managedChildren = this.cloneChildren(children);\n\n    return (\n      <List {...customProps} role=\"group\">\n        {managedChildren}\n      </List>\n    );\n  }\n}\n\nMenuItemGroup.propTypes = propTypes;\nMenuItemGroup.childContextTypes = childContextTypes;\n\nexport default MenuItemGroup;\n"},3037:function(e,n,t){e.exports={"menu-wrapper":"BasicMenu-module__menu-wrapper___3wgCf"}},3038:function(e,n,t){"use strict";t.r(n),n.default='import React from \'react\';\nimport Button from \'terra-button\';\nimport PropTypes from \'prop-types\';\n// eslint-disable-next-line import/no-unresolved, import/extensions\nimport Menu from \'terra-menu\';\nimport classNames from \'classnames/bind\';\nimport styles from \'./BasicMenu.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  isArrowDisplayed: PropTypes.bool,\n  contentWidth: PropTypes.string,\n  boundingRef: PropTypes.func,\n};\n\nclass BasicMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handleRequestClose = this.handleRequestClose.bind(this);\n    this.setButtonNode = this.setButtonNode.bind(this);\n    this.getButtonNode = this.getButtonNode.bind(this);\n    this.handleToggle1OnClick = this.handleToggle1OnClick.bind(this);\n    this.handleToggle2OnClick = this.handleToggle2OnClick.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleAction = this.handleAction.bind(this);\n    this.handleCloseOnClick = this.handleCloseOnClick.bind(this);\n    this.state = {\n      open: false,\n      toggle1Selected: false,\n      toggle2Selected: false,\n      groupSelectedIndex: undefined,\n      actionClickCount: 0,\n    };\n  }\n\n  setButtonNode(node) {\n    this.buttonNode = node;\n  }\n\n  getButtonNode() {\n    return this.buttonNode;\n  }\n\n  handleButtonClick() {\n    this.setState({ open: true });\n  }\n\n  handleRequestClose() {\n    this.setState({ open: false });\n  }\n\n  handleCloseOnClick(event) {\n    event.preventDefault();\n    this.handleRequestClose();\n  }\n\n  handleToggle1OnClick() {\n    this.setState(prevState => ({ toggle1Selected: !prevState.toggle1Selected }));\n    this.handleRequestClose();\n  }\n\n  handleToggle2OnClick() {\n    this.setState(prevState => ({ toggle2Selected: !prevState.toggle2Selected }));\n  }\n\n  handleOnChange(event, index) {\n    this.setState({ groupSelectedIndex: index });\n  }\n\n  handleAction(event) {\n    event.preventDefault();\n    const newState = this.state;\n    newState.actionClickCount += 1;\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={cx(\'menu-wrapper\')} ref={this.setButtonNode}>\n          <Menu\n            isOpen={this.state.open}\n            targetRef={this.getButtonNode}\n            onRequestClose={this.handleRequestClose}\n            contentWidth={this.props.contentWidth}\n            isArrowDisplayed={this.props.isArrowDisplayed}\n            boundingRef={this.props.boundingRef}\n          >\n            <Menu.Item\n              text="Toggle Item 1 - Closes Menu"\n              key="Toggle1"\n              isSelected={this.state.toggle1Selected}\n              onClick={this.handleToggle1OnClick}\n              isSelectable\n            />\n            <Menu.Item\n              text="Toggle Item 2"\n              key="Toggle2"\n              isSelected={this.state.toggle2Selected}\n              onClick={this.handleToggle2OnClick}\n              isSelectable\n            />\n            <Menu.Item\n              text="Disabled Item 1"\n              key="Disabled1"\n              isSelected={this.state.toggle1Selected}\n              onClick={this.handleToggle1OnClick}\n              isDisabled\n            />\n            <Menu.Divider key="Divider1" />\n            <Menu.Item\n              text="Nested Menu 1"\n              key="Nested1"\n              subMenuItems={[\n                <Menu.Item text="Action 1.1" key="1.1" onClick={this.handleAction} />,\n                <Menu.Item text="Action 1.2" key="1.2" onClick={this.handleAction} />,\n                <Menu.Item text="Action 1.3" key="1.3" onClick={this.handleAction} />,\n                <Menu.Divider key="Divider1.1" />,\n                <Menu.Item text="Close Action 1.1" key="1.4" onClick={this.handleCloseOnClick} />,\n                <Menu.Item text="Close Action 1.2" key="1.5" onClick={this.handleCloseOnClick} />,\n                <Menu.Item text="Close Action 1.3" key="1.6" onClick={this.handleCloseOnClick} />,\n              ]}\n            />\n            <Menu.Item\n              text="Nested Menu 2 has a long title that will wrap and a truncated title when clicked"\n              key="Nested2"\n              isDisabled\n              subMenuItems={[\n                <Menu.Item text="Default 2.1" key="2.1" />,\n                <Menu.Item text="Default 2.2" key="2.2" />,\n                <Menu.Item text="Default 2.3" key="2.3" />,\n              ]}\n            />\n            <Menu.Divider key="Divider2" />\n            <Menu.Item text="Close Action" key="Action2" onClick={this.handleCloseOnClick} />\n            <Menu.Item text="Action" key="Action1" onClick={this.handleAction} />\n            <Menu.Divider key="Divider3" />\n            <Menu.ItemGroup key="Group" onChange={this.handleOnChange}>\n              <Menu.Item text="Group Item 1" key="GroupItem1" isSelected={this.state.groupSelectedIndex === 0} />\n              <Menu.Item text="Group Item 2" key="GroupItem2" isSelected={this.state.groupSelectedIndex === 1} />\n              <Menu.Item text="Group Item 3" key="GroupItem3" isSelected={this.state.groupSelectedIndex === 2} isDisabled />\n            </Menu.ItemGroup>\n          </Menu>\n          <Button onClick={this.handleButtonClick} text="Click Me" />\n        </div>\n        <br />\n        <p>\nAction button has been clicked\n          {this.state.actionClickCount}\n          {\' \'}\ntimes.\n        </p>\n      </div>\n    );\n  }\n}\n\nBasicMenu.propTypes = propTypes;\n\nexport default BasicMenu;\n'},3039:function(e,n,t){"use strict";var i=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=i(t(20)),o=i(t(24)),l=i(t(25)),a=i(t(26)),r=i(t(31)),d=i(t(27)),u=i(t(0)),c=i(t(4)),p=i(t(1375)),h=i(t(3040)),m=c.default.bind(h.default),f=function(e){function n(e){var t;return(0,s.default)(this,n),(t=(0,l.default)(this,(0,a.default)(n).call(this,e))).setParentNode=t.setParentNode.bind((0,r.default)(t)),t.getParentNode=t.getParentNode.bind((0,r.default)(t)),t}return(0,d.default)(n,e),(0,o.default)(n,[{key:"setParentNode",value:function(e){this.parentNode=e}},{key:"getParentNode",value:function(){return this.parentNode}},{key:"render",value:function(){return u.default.createElement("div",{className:m("content-wrapper"),ref:this.setParentNode},u.default.createElement(p.default,{boundingRef:this.getParentNode}))}}]),n}(u.default.Component);n.default=f},3040:function(e,n,t){e.exports={"content-wrapper":"MenuBounded-module__content-wrapper___SWJU0"}},3041:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport classNames from 'classnames/bind';\nimport BasicMenu from './BasicMenu';\nimport styles from './MenuBounded.module.scss';\n\nconst cx = classNames.bind(styles);\n\nclass MenuBounded extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setParentNode = this.setParentNode.bind(this);\n    this.getParentNode = this.getParentNode.bind(this);\n  }\n\n  setParentNode(node) {\n    this.parentNode = node;\n  }\n\n  getParentNode() {\n    return this.parentNode;\n  }\n\n  render() {\n    return (\n      <div\n        className={cx('content-wrapper')}\n        ref={this.setParentNode}\n      >\n        <BasicMenu boundingRef={this.getParentNode} />\n      </div>\n    );\n  }\n}\n\nexport default MenuBounded;\n"},3042:function(e,n,t){"use strict";var i=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=i(t(20)),o=i(t(24)),l=i(t(25)),a=i(t(26)),r=i(t(31)),d=i(t(27)),u=i(t(0)),c=i(t(1375)),p=function(e){function n(e){var t;return(0,s.default)(this,n),(t=(0,l.default)(this,(0,a.default)(n).call(this,e))).handleSelectChange=t.handleSelectChange.bind((0,r.default)(t)),t.state={menuWidth:void 0},t}return(0,d.default)(n,e),(0,o.default)(n,[{key:"handleSelectChange",value:function(e){this.setState({menuWidth:e.target.value})}},{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("label",{htmlFor:"menuWidth"},"Select menu width "),u.default.createElement("select",{id:"menuWidth",name:"menuWidth",value:this.state.menuWidth,onChange:this.handleSelectChange},u.default.createElement("option",{value:void 0},"Default"),u.default.createElement("option",{key:"160",value:"160"},"160"),u.default.createElement("option",{key:"240",value:"240"},"240"),u.default.createElement("option",{key:"320",value:"320"},"320"),u.default.createElement("option",{key:"640",value:"640"},"640"),u.default.createElement("option",{key:"960",value:"960"},"960"),u.default.createElement("option",{key:"1280",value:"1280"},"1280"),u.default.createElement("option",{key:"1760",value:"1760"},"1760"),u.default.createElement("option",{key:"auto",value:"auto"},"Auto")),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement(c.default,{contentWidth:this.state.menuWidth}))}}]),n}(u.default.Component);n.default=p},3043:function(e,n,t){"use strict";t.r(n),n.default='import React from \'react\';\nimport BasicMenu from \'./BasicMenu\';\n\nclass MenuWidths extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.state = { menuWidth: undefined };\n  }\n\n  handleSelectChange(event) {\n    this.setState({ menuWidth: event.target.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor="menuWidth">Select menu width </label>\n        <select id="menuWidth" name="menuWidth" value={this.state.menuWidth} onChange={this.handleSelectChange}>\n          <option value={undefined}>Default</option>\n          <option key="160" value="160">160</option>\n          <option key="240" value="240">240</option>\n          <option key="320" value="320">320</option>\n          <option key="640" value="640">640</option>\n          <option key="960" value="960">960</option>\n          <option key="1280" value="1280">1280</option>\n          <option key="1760" value="1760">1760</option>\n          <option key="auto" value="auto">Auto</option>\n        </select>\n        <br />\n        <br />\n\n        <BasicMenu contentWidth={this.state.menuWidth} />\n      </div>\n    );\n  }\n}\n\nexport default MenuWidths;\n'},3763:function(e,n,t){"use strict";var i=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=i(t(0)),o=i(t(911)),l=i(t(3032)),a=t(3033),r=i(t(3034)),d=i(t(3035)),u=i(t(3036)),c=i(t(1375)),p=i(t(3038)),h=i(t(3039)),m=i(t(3041)),f=i(t(3042)),g=i(t(3043)),C=function(){return s.default.createElement(o.default,{packageName:a.name,readme:l.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(a.name),examples:[{title:"Default Menu",example:s.default.createElement(c.default,null),source:p.default},{title:"Menu With Arrow",example:s.default.createElement(c.default,{isArrowDisplayed:!0}),source:p.default},{title:"Menu Bounded",example:s.default.createElement(h.default,null),source:m.default},{title:"Menu Widths",example:s.default.createElement(f.default,null),source:g.default}],propsTables:[{componentName:"Menu",componentSrc:r.default},{componentName:"Menu.Item",componentSrc:d.default},{componentName:"Menu.ItemGroup",componentSrc:u.default}]})};n.default=C}}]);
//# sourceMappingURL=119-78a34cdbc70fea615b43.js.map