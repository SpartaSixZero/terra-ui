(window.webpackJsonp=window.webpackJsonp||[]).push([[140,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{2520:function(e,t,n){"use strict";n.r(t),t.default="# Terra Form Select Field\n\nA convenience wrapper assembling a [terra-form-select](https://github.com/cerner/terra-core/tree/master/packages/terra-form-select) within a [terra-form-field](https://github.com/cerner/terra-core/tree/master/packages/terra-form-field).\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-form-select`\n\n## Component Features\n\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n * [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n * [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n * [Localization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n * [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n"},2521:function(e){e.exports=JSON.parse('{"_from":"terra-form-select@^5.0.0","_id":"terra-form-select@5.25.0","_inBundle":false,"_integrity":"sha512-Rb2oJbhqK9/8pTwzwdBot3245jAF96WlX28EZm8EWePVBzRJUMeGWPUDimVmguK1sdu6GGhUMXb/R4cNMfRB/A==","_location":"/terra-form-select","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"terra-form-select@^5.0.0","name":"terra-form-select","escapedName":"terra-form-select","rawSpec":"^5.0.0","saveSpec":null,"fetchSpec":"^5.0.0"},"_requiredBy":["/","/terra-clinical-onset-picker","/terra-dev-site"],"_resolved":"https://registry.npmjs.org/terra-form-select/-/terra-form-select-5.25.0.tgz","_shasum":"5bbcc0153aa339c8ee4d45558806ac5a4c6ad364","_spec":"terra-form-select@^5.0.0","_where":"/home/travis/build/cerner/terra-ui","author":{"name":"Cerner Corporation"},"bugs":{"url":"https://github.com/cerner/terra-core/issues"},"bundleDependencies":false,"dependencies":{"classnames":"^2.2.5","keycode-js":"^1.0.4","lodash.uniqueid":"^4.0.1","prop-types":"^15.5.8","react-lifecycles-compat":"^3.0.2","terra-doc-template":"^2.15.0","terra-form-field":"^3.19.0","terra-hookshot":"^5.0.0","terra-mixins":"^1.33.0"},"deprecated":false,"description":"Provides a drop down of selectable options.","gitHead":"0b893dc4a80250c0b485a5f205f2defde7c38ecf","homepage":"https://github.com/cerner/terra-core#readme","keywords":["Cerner","Terra","terra-form-select","Form","Select","UI"],"license":"Apache-2.0","main":"lib/Select.js","name":"terra-form-select","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"repository":{"type":"git","url":"git+https://github.com/cerner/terra-core.git"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run test:jest && npm run test:wdio","test:jest":"jest --config ../../jestconfig.js","test:wdio":"../../node_modules/.bin/wdio ../../node_modules/terra-dev-site/config/wdio/wdio.conf.js"},"version":"5.25.0"}')},2522:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport Field from 'terra-form-field';\nimport Select from './Select';\nimport Variants from './_constants';\n\nconst propTypes = {\n  /**\n   * Whether a clear option is available to clear the selection.\n   * This is not applicable to the `multiple` or `tag` variants since the selection can already be deselected using the tag.\n   */\n  allowClear: PropTypes.bool,\n  /**\n   * The select options.\n   */\n  children: PropTypes.node,\n  /**\n   * The field label.\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * The default value of the select.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.array, PropTypes.number, PropTypes.string]),\n  /**\n   * Whether the input is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Error message displayed when the select is invalid.\n   */\n  error: PropTypes.node,\n  /**\n   * Help message to display with the select.\n   */\n  help: PropTypes.node,\n  /**\n   * Whether to hide the required indicator on the label.\n   */\n  hideRequired: PropTypes.bool,\n  /**\n   * Whether the field is displayed inline. Displays block by default.\n   */\n  isInline: PropTypes.bool,\n  /**\n   * Whether the field is invalid.\n   */\n  isInvalid: PropTypes.bool,\n  /**\n   * Whether the label is hidden. Allows hiding the label while meeting accessibility guidelines.\n   */\n  isLabelHidden: PropTypes.bool,\n  /**\n   * Additional attributes to spread onto the label.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  labelAttrs: PropTypes.object,\n  /**\n   * The maximum number of options that can be selected. A value less than 2 will be ignored.\n   * Only applicable to variants allowing multiple selections (e.g.; `multiple`; `tag`).\n   */\n  maxSelectionCount: PropTypes.number,\n  /**\n   * Set the max-width of a field using `length` or `%`.  Best practice recommendation to never exceed\n   * a rendered value of 1020px. _(Note: Providing custom inline styles will take precedence.)_\n   */\n  maxWidth: PropTypes.string,\n  /**\n   * Callback function triggered when the select value changes. function(value)\n   */\n  onChange: PropTypes.func,\n  /**\n   * Placeholder text.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether the field is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Additional attributes to spread onto the select.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  selectAttrs: PropTypes.object,\n  /**\n   * The Select identifier. Links the htmlFor of the field to the select identifier.\n   */\n  selectId: PropTypes.string.isRequired,\n  /**\n   * Whether to append the 'optional' label to a non-required field label.\n   */\n  showOptional: PropTypes.bool,\n  /**\n   * The value of the select.\n   */\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.number, PropTypes.string]),\n  /**\n   * The select variant. One of `default`, `combobox`, `multiple`, `tag`, or `search`.\n   */\n  variant: PropTypes.oneOf([\n    Variants.COMBOBOX,\n    Variants.DEFAULT,\n    Variants.MULTIPLE,\n    Variants.SEARCH,\n    Variants.TAG,\n  ]),\n};\n\nconst defaultProps = {\n  allowClear: false,\n  children: undefined,\n  defaultValue: undefined,\n  disabled: false,\n  error: undefined,\n  help: undefined,\n  hideRequired: false,\n  isInline: false,\n  isInvalid: false,\n  isLabelHidden: false,\n  labelAttrs: {},\n  maxSelectionCount: undefined,\n  maxWidth: undefined,\n  onChange: undefined,\n  placeholder: undefined,\n  required: false,\n  selectAttrs: {},\n  showOptional: false,\n  value: undefined,\n  variant: 'default',\n};\n\nconst contextTypes = {\n  /* eslint-disable consistent-return */\n  intl: (context) => {\n    if (context.intl === undefined) {\n      return new Error('Component is internationalized, and must be wrapped in terra-base');\n    }\n  },\n};\n\n\nconst SelectField = ({\n  allowClear,\n  children,\n  defaultValue,\n  disabled,\n  error,\n  help,\n  hideRequired,\n  isInline,\n  isInvalid,\n  isLabelHidden,\n  label,\n  labelAttrs,\n  maxSelectionCount,\n  maxWidth,\n  onChange,\n  placeholder,\n  required,\n  selectAttrs,\n  selectId,\n  showOptional,\n  value,\n  variant,\n  ...customProps\n}, context) => {\n  let helpText = help;\n  if (maxSelectionCount !== undefined && maxSelectionCount >= 2) {\n    const limitSelectionText = context.intl.formatMessage({ id: 'Terra.form.select.maxSelectionHelp' }, { text: maxSelectionCount });\n\n    if (help) {\n      helpText = (\n        <span>\n          { limitSelectionText }\n          { ' ' }\n          { help }\n        </span>\n      );\n    } else {\n      helpText = limitSelectionText;\n    }\n  }\n\n  let ariaDescriptionIds;\n\n  if (help && error && isInvalid) {\n    ariaDescriptionIds = `${selectId}-error ${selectId}-help`;\n  } else {\n    if (help) {\n      ariaDescriptionIds = `${selectId}-help`;\n    }\n\n    if (error && isInvalid) {\n      ariaDescriptionIds = `${selectId}-error`;\n    }\n  }\n\n  return (\n    <Field\n      {...customProps}\n      label={label}\n      labelAttrs={labelAttrs}\n      error={error}\n      help={helpText}\n      hideRequired={hideRequired}\n      required={required}\n      showOptional={showOptional}\n      isInvalid={isInvalid}\n      isInline={isInline}\n      isLabelHidden={isLabelHidden}\n      htmlFor={selectId}\n      maxWidth={maxWidth}\n    >\n      <Select\n        {...selectAttrs}\n        ariaLabel={label}\n        allowClear={allowClear}\n        aria-describedby={ariaDescriptionIds}\n        disabled={selectAttrs.disabled || disabled}\n        id={selectId}\n        isInvalid={isInvalid}\n        defaultValue={defaultValue}\n        maxSelectionCount={maxSelectionCount !== undefined && maxSelectionCount < 2 ? undefined : maxSelectionCount}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        value={value}\n        variant={variant}\n      >\n        {children}\n      </Select>\n    </Field>\n  );\n};\n\nSelectField.propTypes = propTypes;\nSelectField.defaultProps = defaultProps;\nSelectField.contextTypes = contextTypes;\n\nSelectField.Option = Select.Option;\nSelectField.OptGroup = Select.OptGroup;\n\nexport default SelectField;\n"},2523:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=o(n(349)),r=o(n(4)),i=o(n(929));function o(e){return e&&e.__esModule?e:{default:e}}var s=r.default.bind(i.default),d=function(){return l.default.createElement(a.default,{help:"Shades of blue and green.",label:"Colors",maxSelectionCount:3,placeholder:"Select a size",selectId:"max-selection-field",variant:"multiple",className:s("form-select")},l.default.createElement(a.default.OptGroup,{label:"Shades of Blue"},l.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),l.default.createElement(a.default.Option,{value:"cyan",display:"Cyan"}),l.default.createElement(a.default.Option,{disabled:!0,value:"teal",display:"Teal"}),l.default.createElement(a.default.Option,{value:"azul",display:"Azul"}),l.default.createElement(a.default.Option,{value:"aqua",display:"Aqua"})),l.default.createElement(a.default.OptGroup,{label:"Shades of Green"},l.default.createElement(a.default.Option,{value:"green",display:"Green"}),l.default.createElement(a.default.Option,{value:"forest",display:"Forest Green"}),l.default.createElement(a.default.Option,{disabled:!0,value:"dark",display:"Dark Green"}),l.default.createElement(a.default.Option,{value:"neon",display:"Neon Green"}),l.default.createElement(a.default.Option,{value:"emerald",display:"Emerald"})))};t.default=d},2524:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport SelectField from \'terra-form-select/lib/SelectField\';\nimport classNames from \'classnames/bind\';\nimport styles from \'./FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst MaxSelectionExample = () => (\n  <SelectField help="Shades of blue and green." label="Colors" maxSelectionCount={3} placeholder="Select a size" selectId="max-selection-field" variant="multiple" className={cx(\'form-select\')}>\n    <SelectField.OptGroup label="Shades of Blue">\n      <SelectField.Option value="blue" display="Blue" />\n      <SelectField.Option value="cyan" display="Cyan" />\n      <SelectField.Option disabled value="teal" display="Teal" />\n      <SelectField.Option value="azul" display="Azul" />\n      <SelectField.Option value="aqua" display="Aqua" />\n    </SelectField.OptGroup>\n    <SelectField.OptGroup label="Shades of Green">\n      <SelectField.Option value="green" display="Green" />\n      <SelectField.Option value="forest" display="Forest Green" />\n      <SelectField.Option disabled value="dark" display="Dark Green" />\n      <SelectField.Option value="neon" display="Neon Green" />\n      <SelectField.Option value="emerald" display="Emerald" />\n    </SelectField.OptGroup>\n  </SelectField>\n);\n\nexport default MaxSelectionExample;\n'},2525:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=o(n(349)),r=o(n(4)),i=o(n(929));function o(e){return e&&e.__esModule?e:{default:e}}var s=r.default.bind(i.default),d=function(){return l.default.createElement(a.default,{label:"T-shirt size",placeholder:"Select a size",selectId:"tshirt-size-field",className:s("form-select")},l.default.createElement(a.default.Option,{value:"xSmall",display:"Extra Small"}),l.default.createElement(a.default.Option,{value:"small",display:"Small"}),l.default.createElement(a.default.Option,{value:"medium",display:"Medium"}),l.default.createElement(a.default.Option,{value:"large",display:"Large"}),l.default.createElement(a.default.Option,{value:"xLarge",display:"Extra Large"}))};t.default=d},2526:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport SelectField from \'terra-form-select/lib/SelectField\';\nimport classNames from \'classnames/bind\';\nimport styles from \'./FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst SelectFieldExample = () => (\n  <SelectField label="T-shirt size" placeholder="Select a size" selectId="tshirt-size-field" className={cx(\'form-select\')}>\n    <SelectField.Option value="xSmall" display="Extra Small" />\n    <SelectField.Option value="small" display="Small" />\n    <SelectField.Option value="medium" display="Medium" />\n    <SelectField.Option value="large" display="Large" />\n    <SelectField.Option value="xLarge" display="Extra Large" />\n  </SelectField>\n);\n\nexport default SelectFieldExample;\n'},2527:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=o(n(349)),r=o(n(4)),i=o(n(929));function o(e){return e&&e.__esModule?e:{default:e}}var s=r.default.bind(i.default),d=function(){return l.default.createElement(a.default,{label:"T-shirt size",placeholder:"Select a size",selectId:"tshirt-size-field",required:!0,className:s("form-select")},l.default.createElement(a.default.Option,{value:"xSmall",display:"Extra Small"}),l.default.createElement(a.default.Option,{value:"small",display:"Small"}),l.default.createElement(a.default.Option,{value:"medium",display:"Medium"}),l.default.createElement(a.default.Option,{value:"large",display:"Large"}),l.default.createElement(a.default.Option,{value:"xLarge",display:"Extra Large"}))};t.default=d},2528:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport SelectField from \'terra-form-select/lib/SelectField\';\nimport classNames from \'classnames/bind\';\nimport styles from \'./FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst SelectFieldExample = () => (\n  <SelectField label="T-shirt size" placeholder="Select a size" selectId="tshirt-size-field" required className={cx(\'form-select\')}>\n    <SelectField.Option value="xSmall" display="Extra Small" />\n    <SelectField.Option value="small" display="Small" />\n    <SelectField.Option value="medium" display="Medium" />\n    <SelectField.Option value="large" display="Large" />\n    <SelectField.Option value="xLarge" display="Extra Large" />\n  </SelectField>\n);\n\nexport default SelectFieldExample;\n'},3709:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=f(n(0)),a=f(n(911)),r=f(n(2520)),i=n(2521),o=f(n(2522)),s=f(n(2523)),d=f(n(2524)),c=f(n(2525)),p=f(n(2526)),u=f(n(2527)),m=f(n(2528));function f(e){return e&&e.__esModule?e:{default:e}}var h=function(){return l.default.createElement(a.default,{packageName:i.name,readme:r.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(i.name),propsTables:[{componentName:"Select Field",componentSrc:o.default}],examples:[{title:"Select Field Example",example:l.default.createElement(c.default,null),source:p.default},{title:"Required Select Field Example",example:l.default.createElement(u.default,null),source:m.default},{title:"Maximum Selection (applies to only 'multiple' and 'tag')",description:"A multiple selection variant that allows up to a set number of selections. (Not applicable to  'default', 'combobox', and 'search' variants)",example:l.default.createElement(s.default,null),source:d.default}]})};t.default=h},912:function(e,t){},929:function(e,t,n){e.exports={"form-select":"FormSelectDocCommon-module__form-select___3izDR"}}}]);
//# sourceMappingURL=140-255a60d16cc39ae3768d.js.map