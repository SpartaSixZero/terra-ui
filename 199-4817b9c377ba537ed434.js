(window.webpackJsonp=window.webpackJsonp||[]).push([[199,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],{3086:function(t,e,n){"use strict";n.r(e),e.default="# Terra Navigation Prompt - Implementation Guide\n\n## Part 3 - Implementing a Custom Prompt Solution\n\nAt this point, we realize that we do not want to **ever** allow users to navigate away from a Form with unsaved state. We can do that by using the NavigationPromptCheckpoint's `onPromptChange` prop.\n\n```diff\n- import React, { useState, useRef } from 'react';\n+ import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationPrompt, { NavigationPromptCheckpoint } from 'terra-navigation-prompt';\n\nconst Form = ({ title }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <div>\n      <p>{title}</p>\n      {inputValue.length ? <NavigationPrompt description={title} /> : undefined}\n      <input\n        type=\"text\"\n        onChange={(event) => {\n          setInputValue(event.target.value);\n        }}\n        value={inputValue}\n      />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setInputValue('');\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nconst FormSwitcher = () => {\n  const [activeForm, setActiveForm] = useState('Form 1');\n+ const [activePrompts, setActivePrompts] = useState([]);\n\n  function onSwitchForm(formKey) {\n-   formCheckpointRef.current.resolvePrompts({\n-     title: 'Descriptive Notification Prompt Title',\n-     message: 'Descriptive Notification Prompt Message',\n-     rejectButtonText: `Descriptive Reject Button Action`,\n-     acceptButtonText: 'Descriptive Accept Button Action',\n-   }).then(() => {\n      setActiveForm(formKey);\n-   });\n  }\n\n  return (\n    <div>\n      <h2>Form Switcher</h2>\n-     <p>The user will be prompted with the provided messaging when Forms are switched with unsaved changes present.</p>\n+     <p>Custom logic has been implemented to prevent navigation altogether when NavigationPrompts are present.</p>\n      <button\n        type=\"button\"\n-       disabled={activeForm === 'Form 1'}\n+       disabled={activeForm === 'Form 1' || activePrompts.length}\n        onClick={onSwitchForm.bind(null, 'Form 1')}\n      >\n        Switch to Form 1\n      </button>\n      <button\n        type=\"button\"\n-       disabled={activeForm === 'Form 2'}\n+       disabled={activeForm === 'Form 2' || activePrompts.length}\n        onClick={onSwitchForm.bind(null, 'Form 2')}\n      >\n        Switch to Form 2\n      </button>\n      <NavigationPromptCheckpoint\n-       ref={formCheckpointRef}\n+       onPromptChange={(prompts) => {\n+         setActivePrompts(prompts);\n+       }}\n      >\n        <Form title={activeForm} key={activeForm} />\n      </NavigationPromptCheckpoint>\n    </div>\n  );\n};\n```\n\nWe remove the `ref` from the NavigationPromptCheckpoint and instead implement `onPromptChange` to store the currently rendered NavigationPrompt's in the FormSwitcher's state. We disable the 'Switch to' buttons altogether if a NavigationPrompt is detected. We could also use this state to control other navigation-capable components, like client-side routers.\n"},3087:function(t,e,n){"use strict";var o=n(32),i=n(5);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(n(125)),a=o(n(0)),m=i(n(2)),p=o(n(1377)),u=function(t){var e=t.title,n=(0,a.useState)(""),o=(0,r.default)(n,2),i=o[0],m=o[1];return a.default.createElement("div",null,a.default.createElement("p",null,e),i.length?a.default.createElement(p.default,{description:e}):void 0,a.default.createElement("input",{type:"text",onChange:function(t){m(t.target.value)},value:i}),a.default.createElement("button",{type:"button",onClick:function(){m("")}},"Submit"))};u.propTypes={title:m.default.string};var l=function(){var t=(0,a.useState)("Form 1"),e=(0,r.default)(t,2),n=e[0],o=e[1],i=(0,a.useState)([]),m=(0,r.default)(i,2),l=m[0],c=m[1];function s(t){o(t)}return a.default.createElement("div",null,a.default.createElement("h2",null,"Form Switcher"),a.default.createElement("p",null,"Custom logic has been implemented to prevent navigation altogether when NavigationPrompts are present."),a.default.createElement("button",{type:"button",disabled:"Form 1"===n||l.length,onClick:s.bind(null,"Form 1")},"Switch to Form 1"),a.default.createElement("button",{type:"button",disabled:"Form 2"===n||l.length,onClick:s.bind(null,"Form 2")},"Switch to Form 2"),a.default.createElement(p.NavigationPromptCheckpoint,{onPromptChange:function(t){c(t)}},a.default.createElement(u,{title:n,key:n})))};e.default=l},3088:function(t,e,n){"use strict";n.r(e),e.default="import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationPrompt, { NavigationPromptCheckpoint } from '../../../../index';\n\nconst Form = ({ title }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <div>\n      <p>{title}</p>\n      {inputValue.length ? <NavigationPrompt description={title} /> : undefined}\n      <input\n        type=\"text\"\n        onChange={(event) => {\n          setInputValue(event.target.value);\n        }}\n        value={inputValue}\n      />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setInputValue('');\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nForm.propTypes = {\n  title: PropTypes.string,\n};\n\nconst FormSwitcher = () => {\n  const [activeForm, setActiveForm] = useState('Form 1');\n  const [activePrompts, setActivePrompts] = useState([]);\n\n  function onSwitchForm(formKey) {\n    setActiveForm(formKey);\n  }\n\n  return (\n    <div>\n      <h2>Form Switcher</h2>\n      <p>Custom logic has been implemented to prevent navigation altogether when NavigationPrompts are present.</p>\n      <button\n        type=\"button\"\n        disabled={activeForm === 'Form 1' || activePrompts.length}\n        onClick={onSwitchForm.bind(null, 'Form 1')}\n      >\n        Switch to Form 1\n      </button>\n      <button\n        type=\"button\"\n        disabled={activeForm === 'Form 2' || activePrompts.length}\n        onClick={onSwitchForm.bind(null, 'Form 2')}\n      >\n        Switch to Form 2\n      </button>\n      <NavigationPromptCheckpoint\n        onPromptChange={(prompts) => {\n          setActivePrompts(prompts);\n        }}\n      >\n        <Form title={activeForm} key={activeForm} />\n      </NavigationPromptCheckpoint>\n    </div>\n  );\n};\n\nexport default FormSwitcher;\n"},3775:function(t,e,n){"use strict";var o=n(5);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=o(n(0)),r=o(n(911)),a=o(n(3086)),m=o(n(3087)),p=o(n(3088)),u=function(){return i.default.createElement(r.default,{packageName:"terra-navigation-prompt",srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/terra-navigation-prompt",readme:a.default,examples:[{title:"Part 2 - Implementing a Custom Prompt Handler",example:i.default.createElement(m.default,null),source:p.default}]})};e.default=u},912:function(t,e){}}]);
//# sourceMappingURL=199-4817b9c377ba537ed434.js.map